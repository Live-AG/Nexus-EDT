// @strict-types
#Область ПрограммныйИнтерфейс
#Область АдминистрированиеКластера

// Получить структуру параметру кластера.
// 
// Возвращаемое значение:
//  Структура - Получить структуру параметру кластера:
// * АдресСервераАдминистрирования - Строка -
// * ПортСервераАдминистрирования - Число -
// * ПользовательЦентральногоСервер - Строка -
// * ПарольЦентральногоСервера - Строка -
// * Ссылка - СправочникСсылка.Кластеры1С
Функция ПолучитьСтруктуруПараметруКластера() Экспорт

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("АдресСервераАдминистрирования", "");
	СтруктураПараметров.Вставить("ПортСервераАдминистрирования", 0);
	СтруктураПараметров.Вставить("ПользовательЦентральногоСервер", "");
	СтруктураПараметров.Вставить("ПарольЦентральногоСервера", "");
	СтруктураПараметров.Вставить("Ссылка", Справочники.Кластеры1С.ПустаяСсылка());

	Возврат СтруктураПараметров;

КонецФункции

// Получить параметры кластера.
// 
// Параметры:
//  Кластер - СправочникСсылка.Кластеры1С - Кластер
// 
// Возвращаемое значение:
//  Структура - Получить параметры кластера:
// * ВерсияПлатформы - Строка -
// * ВерсияПлатформы - Строка -
// * МассивКласеторов - Массив -
Функция ПолучитьПараметрыКластера(Кластер) Экспорт

	ПараметрыКластера = ПолучитьСтруктуруПараметруКластера();
	ЗаполнитьЗначенияСвойств(ПараметрыКластера, Кластер);

	АгентАдминистрирования = ПолучитьАгентаАдминистрированияКластера(ПараметрыКластера);

	СтруктураПараметров = Новый Структура;
	Попытка
		СтруктураПараметров.Вставить("ВерсияПлатформы", АгентАдминистрирования.ПолучитьВерсию());
	Исключение
		СтруктураПараметров.Вставить("ВерсияПлатформы", "");
	КонецПопытки;

	МассивКласеторов = АгентАдминистрирования.ПолучитьКластеры();
	Если МассивКласеторов.Количество() = 1 Тогда
		ЭлементМассиваКластеров = МассивКласеторов[0];

		ЭлементМассиваКластеров.ВыполнитьАутентификацию(Кластер.ИмяАдминистратораКластера,
																Кластер.ПарольАдминистратораКластера);

		СтруктураПараметров.Вставить("ИмяКомпьютера", ЭлементМассиваКластеров.ИмяКомпьютера);
		СтруктураПараметров.Вставить("Имя", ЭлементМассиваКластеров.Имя);
		СтруктураПараметров.Вставить("ИдентификаторКластера", ЭлементМассиваКластеров.ИдентификаторКластера);
		СтруктураПараметров.Вставить("Порт", ЭлементМассиваКластеров.Порт);
		СтруктураПараметров.Вставить("ИнформационныеБазы", ЭлементМассиваКластеров.ПолучитьИнформационныеБазы());
	Иначе
		СтруктураПараметров.Вставить("МассивКласеторов", МассивКласеторов);
	КонецЕсли;

	Возврат СтруктураПараметров;

КонецФункции

#Область ПрограммныйИнтерфейс

// Получить агента администрирования кластера.
// 
// Параметры:
//  ПараметрыПодключения - Структура - Параметры подключения:
//  *АдресСервераАдминистрирования - Строка
//  *ПортСервераАдминистрирования - Число
//  *ПользовательЦентральногоСервер - Строка
//  *ПарольЦентральногоСервера - Строка
//  *Ссылка - СправочникСсылка.Кластеры1С
//  
//  Отказ - Булево - Отказ
// 
// Возвращаемое значение:
//  АдминистрированиеСервера - АдминистрированиеСервера - Получить агента администрирования кластера
Функция ПолучитьАгентаАдминистрированияКластера(ПараметрыПодключения, Отказ = Ложь) Экспорт

	Попытка
		АгентАдминистрирования = Новый АдминистрированиеСервера(ПараметрыПодключения.АдресСервераАдминистрирования,
			ПараметрыПодключения.ПортСервераАдминистрирования);
	Исключение
		ЗаписьЖурналаРегистрации("ПодключениеКСерверуАдминистрирования", УровеньЖурналаРегистрации.Ошибка, ,
			ПараметрыПодключения.АдресСервераАдминистрирования, ОписаниеОшибки());
		Правило = Справочники.ПравилаПроверкиОбъектов.ДоступностьСервераАдминистрированияКластера;
		ПроверкаСостоянияОбъектов.ЗаписатьРезультатПроверки(ПараметрыПодключения.Ссылка, Правило);
	КонецПопытки;

	Попытка
		АгентАдминистрирования.ВыполнитьАутентификацию(ПараметрыПодключения.ПользовательЦентральногоСервер,
			ПараметрыПодключения.ПарольЦентральногоСервера);
	Исключение
		Отказ = Истина;
		Правило = Справочники.ПравилаПроверкиОбъектов.АвторизацияСервераАдминистрирования;
		ПроверкаСостоянияОбъектов.ЗаписатьРезультатПроверки(ПараметрыПодключения.Ссылка, Правило);
	КонецПопытки;

	Возврат АгентАдминистрирования;

КонецФункции

#КонецОбласти

// Получить адиминистрирование кластера.
// 
// Параметры:
//  Кластер - СправочникСсылка.Кластеры1С - Кластер
//  Отказ - Булево - Отказ
// 
// Возвращаемое значение:
//  Неопределено, АдминистрированиеКластер - Получить адиминистрирование кластера
Функция ПолучитьАдиминистрированиеКластера(Кластер, Отказ = Ложь) Экспорт

	АгентАдминистрирования = ПолучитьАгентаАдминистрированияКластера(Кластер, Отказ);
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;

	МассивКластеров = АгентАдминистрирования.ПолучитьКластеры();
	Для Каждого ЭлементМассиваКластеров Из МассивКластеров Цикл
		Если ЭлементМассиваКластеров.ИдентификаторКластера = Кластер.ИдентификаторКластера Тогда
			Попытка
				ЭлементМассиваКластеров.ВыполнитьАутентификацию(Кластер.ИмяАдминистратораКластера,
					Кластер.ПарольАдминистратораКластера);
			Исключение
				Правило = Справочники.ПравилаПроверкиОбъектов.АвторизацияКластера1С;
				ПроверкаСостоянияОбъектов.ЗаписатьРезультатПроверки(Кластер, Правило);
				Отказ = Истина;
			КонецПопытки;

			Возврат ЭлементМассиваКластеров;
		КонецЕсли;
	КонецЦикла;

	Возврат Неопределено;

КонецФункции

// Получить базы кластера.
// 
// Параметры:
//  Кластер - СправочникСсылка.Кластеры1С - Кластер
// 
// Возвращаемое значение:
//  Массив - Получить базы кластера
Функция ПолучитьБазыКластера(Кластер) Экспорт

	ЭлементАдминистрированияКластера = ПолучитьАдиминистрированиеКластера(Кластер);
	Возврат ЭлементАдминистрированияКластера.ПолучитьИнформационныеБазы();

КонецФункции

// Получить рабочие серверы кластера.
// 
// Параметры:
//  Кластер - СправочникСсылка.Кластеры1С - Кластер
// 
// Возвращаемое значение:
//  Массив - Получить рабочие серверы кластера
Функция ПолучитьРабочиеСерверыКластера(Кластер) Экспорт

	ЭлементАдминистрированияКластера = ПолучитьАдиминистрированиеКластера(Кластер);
	Возврат ЭлементАдминистрированияКластера.ПолучитьРабочиеСерверы();

КонецФункции

// Создать информационную базу.
// 
// Параметры:
//  Кластер - СправочникСсылка.Кластеры1С - Кластер
//  ПараметрыБазы - Структура - Параметры базы
//  Отказ - Булево
Процедура СоздатьИнформационнуюБазу(Кластер, ПараметрыБазы, Отказ) Экспорт

	ЭлементАдминистрированияКластера = ПолучитьАдиминистрированиеКластера(Кластер, Отказ);
	ЭлементАдминистрированияИБ = ЭлементАдминистрированияКластера.СоздатьИнформационнуюБазу();
	ЗаполнитьЗначенияСвойств(ЭлементАдминистрированияИБ, ПараметрыБазы);
	ЭлементАдминистрированияИБ.Записать(); 
	//TODO 	

КонецПроцедуры
                     
// Удалить информационную базу.
// 
// Параметры:
//  ИнформационнаяБаза - СправочникСсылка.ИнформационныеБазы - Информационная база
//  РежимУдаленияБазы - Неопределено - Режим удаления базы
Процедура УдалитьИнформационнуюБазу(ИнформационнаяБаза, РежимУдаленияБазы = Неопределено) Экспорт

	Если РежимУдаленияБазы = Неопределено Тогда
		РежимУдаленияБазы = АдминистрированиеРежимУдаленияИнформационнойБазы.НеВыполнятьДействийСБазойДанных;
	КонецЕсли;

	ЭлемнетАдминистрированияИБ = ПолучитьАдминистрированиеИнформационнойБазы(ИнформационнаяБаза);
	ЭлемнетАдминистрированияИБ.Удалить(РежимУдаленияБазы); 
	//TODO 	

КонецПроцедуры

#КонецОбласти

#Область АдминистрированиеИнформационныхБаз

// Получить администрирование информационной базы.
// 
// Параметры:
//  ИнформационнаяБаза - СправочникСсылка.ИнформационныеБазы - Информационная база
//  Отказ - Булево - Отказ
// 
// Возвращаемое значение:
//  Неопределено, Произвольный, АдминистрированиеИнформационнаяБаза - Получить администрирование информационной базы
Функция ПолучитьАдминистрированиеИнформационнойБазы(ИнформационнаяБаза, Отказ = Ложь) Экспорт

	ИдентификаторИнформационнойБазы = ИнформационнаяБаза.ИдентификаторБазы;
	МассивИнформационныхБаз = АдминистрированиеЭлементовКластера.ПолучитьБазыКластера(ИнформационнаяБаза.Владелец);
	Для Каждого АдминистрированиеИнформационнойБазы Из МассивИнформационныхБаз Цикл

		Если АдминистрированиеИнформационнойБазы.ИдентификаторИнформационнойБазы = ИдентификаторИнформационнойБазы Тогда
			Попытка
				АдминистрированиеИнформационнойБазы.ВыполнитьАутентификацию(ИнформационнаяБаза.ИмяПользователяИБ,
					ИнформационнаяБаза.ПарольПользователяИБ);
			Исключение
				Отказ = Истина;
			КонецПопытки;

			Возврат АдминистрированиеИнформационнойБазы;
		КонецЕсли;
	КонецЦикла;

	Возврат Неопределено;

КонецФункции // ПолучитьАдминистрированиеИнформационнойБазы

// Получить структуру параметров информационной базы.
// 
// Возвращаемое значение:
//  Структура - Получить структуру параметров информационной базы:
// * АдресСервераАдминистрирования 
// * ПортСервераАдминистрирования 
// * ПользовательЦентральногоСервер 
// * ПарольЦентральногоСервера 
// * СерверБД 
// * БазаДанных 
// * ИмяАдминистратораСУБД 
// * ПарольАдминистратораСУБД 
// * АдресКластера 
// * ПортКластера 
// * ИмяИБ 
// * ИмяПользователяИБ 
// * ПарольПользователяИБ 
// * РабочиеСерверы 
Функция ПолучитьСтруктуруПараметровИнформационнойБазы()

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("АдресСервераАдминистрирования");
	СтруктураПараметров.Вставить("ПортСервераАдминистрирования");
	СтруктураПараметров.Вставить("ПользовательЦентральногоСервер");
	СтруктураПараметров.Вставить("ПарольЦентральногоСервера");
	СтруктураПараметров.Вставить("СерверБД");
	СтруктураПараметров.Вставить("БазаДанных");
	СтруктураПараметров.Вставить("ИмяАдминистратораСУБД");
	СтруктураПараметров.Вставить("ПарольАдминистратораСУБД");
	СтруктураПараметров.Вставить("АдресКластера");
	СтруктураПараметров.Вставить("ПортКластера");
	СтруктураПараметров.Вставить("ИмяИБ");
	СтруктураПараметров.Вставить("ИмяПользователяИБ");
	СтруктураПараметров.Вставить("ПарольПользователяИБ");
	СтруктураПараметров.Вставить("РабочиеСерверы");

	Возврат СтруктураПараметров;

КонецФункции // ПолучитьСтруктуруПараметровИнформационнойБазы()

// Получить параметры информационной базы.
// 
// Параметры:
//  ИнформационнаяБаза - СправочникСсылка.ИнформационныеБазы
//  
// Возвращаемое значение:
//  Структура - Получить параметры информационной базы:
// * АдресСервераАдминистрирования - Строка
// * ПортСервераАдминистрирования - Строка
// * ПользовательЦентральногоСервер - Строка
// * ПарольЦентральногоСервера - Строка
// * СерверБД - Строка
// * БазаДанных - Строка
// * ИмяАдминистратораСУБД - Строка
// * ПарольАдминистратораСУБД - Строка
// * АдресКластера - Строка
// * ПортКластера - Строка
// * ИмяИБ - Строка
// * ИмяПользователяИБ - Строка
// * ПарольПользователяИБ - Строка
// * РабочиеСерверы - Строка
Функция ПолучитьПараметрыИнформационнойБазы(ИнформационнаяБаза) Экспорт
	
	//#TODO Получение структуры параметров для скрипта
	СтруктураПараметров = ПолучитьСтруктуруПараметровИнформационнойБазы();

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ИнформационныеБазы.Владелец.АдресСервераАдминистрирования КАК АдресСервераАдминистрирования,
				   |	ИнформационныеБазы.Владелец.ПортСервераАдминистрирования КАК ПортСервераАдминистрирования,
				   |	ИнформационныеБазы.Владелец.ПользовательЦентральногоСервер КАК ПользовательЦентральногоСервер,
				   |	ИнформационныеБазы.Владелец.ПарольЦентральногоСервера КАК ПарольЦентральногоСервера,
				   |	ИнформационныеБазы.Владелец.АдресКластера КАК АдресКластера,
				   |	ИнформационныеБазы.Владелец.ПортКластера КАК ПортКластера,
				   |	ИнформационныеБазы.Владелец.ИмяАдминистратораКластера КАК ИмяАдминистратораКластера,
				   |	ИнформационныеБазы.Владелец.ПарольАдминистратораКластера КАК ПарольАдминистратораКластера,
				   |	ИнформационныеБазы.Владелец.РабочиеСерверыКластера.(
				   |		Имя КАК РабочиеСерверыИмя,
				   |		Порт КАК РабочиеСерверыПорт
				   |	) КАК РабочиеСерверы,
				   |	ИнформационныеБазы.ИмяИБ КАК ИмяИБ,
				   |	ИнформационныеБазы.СерверБД.ИмяСервера КАК СерверБД,
				   |	ИнформационныеБазы.СерверБД.ИмяАдминистратораСУБД КАК ИмяАдминистратораСУБД,
				   |	ИнформационныеБазы.СерверБД.ПарольАдминистратораСУБД КАК ПарольАдминистратораСУБД,
				   |	ИнформационныеБазы.БазаДанных КАК БазаДанных,
				   |	ИнформационныеБазы.ИмяПользователяИБ КАК ИмяПользователяИБ,
				   |	ИнформационныеБазы.ПарольПользователяИБ КАК ПарольПользователяИБ
				   |ИЗ
				   |	Справочник.ИнформационныеБазы КАК ИнформационныеБазы
				   |ГДЕ
				   |	ИнформационныеБазы.Ссылка = &ИнформационнаяБаза";

	Запрос.УстановитьПараметр("ИнформационнаяБаза", ИнформационнаяБаза);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();

	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, Выборка);
		СоответствиеРабочихCерверов = Новый Соответствие;
		Для Каждого РабочийСервер Из Выборка.РабочиеСерверы Цикл

			СоответствиеРабочихCерверов.Вставить(РабочийСервер.Имя, РабочийСервер.Порт);

		КонецЦикла;

		СтруктураПараметров.РабочиеСерверы = СоответствиеРабочихCерверов;
	КонецЕсли;

	Возврат СтруктураПараметров;

КонецФункции // ПолучитьПараметрыИнформационнойБазы()

// Получить каталог временных файлов базы.
// 
// Параметры:
//  ИнформационнаяБаза - СправочникСсылка.ИнформационныеБазы - Информационная база
// 
// Возвращаемое значение:
//  Строка - Получить каталог временных файлов базы
Функция ПолучитьКаталогВременныхФайловБазы(ИнформационнаяБаза) Экспорт

	ПутьКВременнымДаннымБазы = КаталогВременныхФайлов() + Строка(ИнформационнаяБаза.ИдентификаторБазы)
		+ ПолучитьРазделительПути();

	КаталогНаДиске = Новый Файл(ПутьКВременнымДаннымБазы);
	Если Не КаталогНаДиске.Существует() Тогда
		СоздатьКаталог(ПутьКВременнымДаннымБазы);
	КонецЕсли;

	Возврат ПутьКВременнымДаннымБазы;

КонецФункции

// Получить свойства информационной базы.
// 
// Параметры:
//  ИнформационнаяБаза - СправочникСсылка.ИнформационныеБазы - Информационная база
// 
// Возвращаемое значение:
//  Структура - Получить свойства информационной базы:
// * АвторизацияПройдена - Булево -
// * БлокировкаРегламентныхЗаданий - Булево -
// * БлокировкаНачалаСеансов - Булево -
// * СтруктураПараметровБлокировки - Структура -:
// ** ВключенаБлокировкаНачалаСеансов - Булево -
// ** ВремяНачалаБлокировки - Дата -
// ** ВремяОкончанияБлокировки - Дата -
// ** КодРазрешенияНачалаСеансов - Строка -
// ** ПараметрБлокировки - Строка -
// ** СообщениеБлокировки - Строка -
// * КоличествоАктивныхСеансов - Число -
// * ИмяБазыДанных - Строка -
// * СерверБазДанных - СправочникСсылка.СерверыБД -
Функция ПолучитьСвойстваИнформационнойБазы(ИнформационнаяБаза) Экспорт

	СтркутураСвойствБазы = Новый Структура;
	СтруктураПараметровБлокировки = ПолучитьСтруктуруПараметорвБлокировкиБазы();

	Отказ = Ложь;
	Адимнистрирование_ИнформационнаяБаза = ПолучитьАдминистрированиеИнформационнойБазы(ИнформационнаяБаза, Отказ);

	СтркутураСвойствБазы.Вставить("АвторизацияПройдена", Не Отказ);

	Если Отказ Тогда
		Возврат СтркутураСвойствБазы;
	КонецЕсли;

	СтркутураСвойствБазы.Вставить("БлокировкаРегламентныхЗаданий",
		Адимнистрирование_ИнформационнаяБаза.БлокировкаРегламентныхЗаданий);

	ЗаполнитьЗначенияСвойств(СтруктураПараметровБлокировки, Адимнистрирование_ИнформационнаяБаза);
	БлокировкаНачалаСеансов = Адимнистрирование_ИнформационнаяБаза.ВключенаБлокировкаНачалаСеансов
		И Адимнистрирование_ИнформационнаяБаза.ВремяОкончанияБлокировки > ТекущаяДатаСеанса();

	СтркутураСвойствБазы.Вставить("БлокировкаНачалаСеансов", БлокировкаНачалаСеансов);
	СтркутураСвойствБазы.Вставить("СтруктураПараметровБлокировки", СтруктураПараметровБлокировки);

	СеансыИнформационнойБазы = Адимнистрирование_ИнформационнаяБаза.ПолучитьСеансы();
	СчетчикСеансов = 0;

	Для Каждого СеансИнформационнойБазы Из СеансыИнформационнойБазы Цикл
		Если ПроверитьИмяМассива(СеансИнформационнойБазы.ИмяПриложения) Тогда
			СчетчикСеансов = СчетчикСеансов + 1;
		КонецЕсли;
	КонецЦикла;

	СтркутураСвойствБазы.Вставить("КоличествоАктивныхСеансов", СчетчикСеансов);
	СтркутураСвойствБазы.Вставить("ИмяБазыДанных", Адимнистрирование_ИнформационнаяБаза.ИмяБазыДанных);
	СтркутураСвойствБазы.Вставить("СерверБазДанных", Справочники.СерверыБД.НайтиПоРеквизиту("ИмяСервера",
		Адимнистрирование_ИнформационнаяБаза.СерверБазДанных));

	Возврат СтркутураСвойствБазы;

КонецФункции

// Проверить имя массива.
// 
// Параметры:
//  ИмяПриложения - Строка - Имя приложения
// 
// Возвращаемое значение:
//  Булево - Проверить имя массива
Функция ПроверитьИмяМассива(ИмяПриложения)

	Возврат ИмяПриложения = "1CV8" Или ИмяПриложения = "1CV8C" Или ИмяПриложения = "Designer";

КонецФункции // ПроверитьИмяМассива()

// Установить блокировку регламентных заданий.
// 
// Параметры:
//  ИнформационнаяБаза - СправочникСсылка.ИнформационныеБазы - Информационная база
//  Заблокировать - Булево
Процедура УстановитьБлокировкуРегламентныхЗаданий(ИнформационнаяБаза, Заблокировать) Экспорт

	Администрирование_ИнформационнойБазы = ПолучитьАдминистрированиеИнформационнойБазы(ИнформационнаяБаза);
	//@skip-check statement-type-change
	Администрирование_ИнформационнойБазы.БлокировкаРегламентныхЗаданий = Заблокировать;
	Администрирование_ИнформационнойБазы.КодЯзыка = "ru_RU";
	Администрирование_ИнформационнойБазы.Записать();

КонецПроцедуры

// Получить структуру параметорв блокировки базы.
// 
// Возвращаемое значение:
//  Структура - Получить структуру параметорв блокировки базы:
// * ВключенаБлокировкаНачалаСеансов - Булево -
// * ВремяНачалаБлокировки - Дата -
// * ВремяОкончанияБлокировки - Дата -
// * КодРазрешенияНачалаСеансов - Строка -
// * ПараметрБлокировки - Строка -
// * СообщениеБлокировки - Строка -
Функция ПолучитьСтруктуруПараметорвБлокировкиБазы() Экспорт

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВключенаБлокировкаНачалаСеансов", Ложь);
	СтруктураПараметров.Вставить("ВремяНачалаБлокировки", Дата("00010101"));
	СтруктураПараметров.Вставить("ВремяОкончанияБлокировки", Дата("00010101"));
	СтруктураПараметров.Вставить("КодРазрешенияНачалаСеансов", "");
	СтруктураПараметров.Вставить("ПараметрБлокировки", "");
	СтруктураПараметров.Вставить("СообщениеБлокировки", "");

	Возврат СтруктураПараметров;

КонецФункции

// Установить блокировку начала сеансов.
// 
// Параметры:
//  ИнформационнаяБаза - СправочникСсылка.ИнформационныеБазы - Информационная база
//  СтруктураПараметров - Структура - Структура параметров
Процедура УстановитьБлокировкуНачалаСеансов(ИнформационнаяБаза, СтруктураПараметров) Экспорт

	Администрирование_ИнформационнойБазы = ПолучитьАдминистрированиеИнформационнойБазы(ИнформационнаяБаза);
	ЗаполнитьЗначенияСвойств(Администрирование_ИнформационнойБазы, СтруктураПараметров);
	
	//Администрирование_ИнформационнойБазы.ВключенаБлокировкаНачалаСеансов	= СтруктураПараметров.ВключенаБлокировкаНачалаСеансов;
	//Администрирование_ИнформационнойБазы.ВремяНачалаБлокировки				= СтруктураПараметров.ВремяНачалаБлокировки;
	//Администрирование_ИнформационнойБазы.ВремяОкончанияБлокировки			= СтруктураПараметров.ВремяОкончанияБлокировки;
	//Администрирование_ИнформационнойБазы.КодРазрешенияНачалаСеансов		= СтруктураПараметров.КодРазрешенияНачалаСеансов;
	//Администрирование_ИнформационнойБазы.СообщениеБлокировки				= СтруктураПараметров.СообщениеБлокировки;
	//Администрирование_ИнформационнойБазы.СообщениеБлокировки				= СтруктураПараметров.СообщениеБлокировки;

	Администрирование_ИнформационнойБазы.Записать();

КонецПроцедуры

// Завершить сеансы информационной базы.
// 
// Параметры:
//  ИнформационнаяБаза - СправочникСсылка.ИнформационныеБазы - Информационная база
//  Сеансы - Массив - Массив уникальных идентификаторов сеансов
//  ЗавершатьТолькоСпящие - Булево - Завершать только спящие
Процедура ЗавершитьСеансыИнформационнойБазы(ИнформационнаяБаза, Сеансы = Неопределено, ЗавершатьТолькоСпящие = Ложь) Экспорт

	Отказ = Ложь;
	Адимнистрирование_ИнформационнаяБаза = ПолучитьАдминистрированиеИнформационнойБазы(ИнформационнаяБаза, Отказ);

	СеансыИнформационнойБазы = Адимнистрирование_ИнформационнаяБаза.ПолучитьСеансы();

	ЗавершитьВсеСеансы = (Сеансы = Неопределено);

	Для Каждого СеансИнформационнойБазы Из СеансыИнформационнойБазы Цикл

		Если ЗавершитьВсеСеансы Или Сеансы.Найти(СеансИнформационнойБазы.ИдентификаторСеанса) <> Неопределено Тогда

			Если ЗавершатьТолькоСпящие И Не СеансИнформационнойБазы.СпящийСеанс Тогда
				Продолжить;
			КонецЕсли;

			СеансИнформационнойБазы.ЗавершитьСеанс();
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область АдминистрированиеСеансов

// Инициализировать таблицу сеансов.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Инициализировать таблицу сеансов:
// * IPАдресКлиента 
// * ВремяНачала 
// * ВремяПоследнейАктивности 
// * ИдентификаторИнформационнойБазы - УникальныйИдентификатор -
// * ИдентификаторПроцесса - УникальныйИдентификатор -
// * ИдентификаторСеанса - УникальныйИдентификатор -
// * ИдентификаторСоединения - УникальныйИдентификатор -
// * ИмяКомпьютера 
// * ИмяПользователя 
// * ИмяПриложения 
// * ИмяТекущегоСервиса 
// * ДлительностьВызововВсего 
// * ДлительностьВызововСервисовВсего 
// * ДлительностьВызововСУБДВсего 
// * КоличествоВызововВсего 
// * ОбъемДанныхЗаписанныхНаДискВсего 
// * ОбъемДанныхПереданныхИПолученныхСУБДВсего 
// * ОбъемДанныхСчитанныхСДискаВсего 
// * ПотреблениеПамятиВсего 
// * ПроцессорноеВремяВсего 
// * Лицензии 
// * СоединениеСУБД 
// * СпящийСеанс - Булево -
// * АктивныйСеансПользователя - Булево -
Функция ИнициализироватьТаблицуСеансов()

	ТаблицаСеансов = Новый ТаблицаЗначений;

	ТаблицаСеансов.Колонки.Добавить("IPАдресКлиента", ОбщегоНазначения.ОписаниеТипаСтрока(15));
	ТаблицаСеансов.Колонки.Добавить("ВремяНачала", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ТаблицаСеансов.Колонки.Добавить("ВремяПоследнейАктивности", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));

	ТаблицаСеансов.Колонки.Добавить("ИдентификаторИнформационнойБазы", Новый ОписаниеТипов("УникальныйИдентификатор"));
	ТаблицаСеансов.Колонки.Добавить("ИдентификаторПроцесса", Новый ОписаниеТипов("УникальныйИдентификатор"));
	ТаблицаСеансов.Колонки.Добавить("ИдентификаторСеанса", Новый ОписаниеТипов("УникальныйИдентификатор"));
	ТаблицаСеансов.Колонки.Добавить("ИдентификаторСоединения", Новый ОписаниеТипов("УникальныйИдентификатор"));

	ТаблицаСеансов.Колонки.Добавить("ИмяКомпьютера", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ТаблицаСеансов.Колонки.Добавить("ИмяПользователя", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ТаблицаСеансов.Колонки.Добавить("ИмяПриложения", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ТаблицаСеансов.Колонки.Добавить("ИмяТекущегоСервиса", ОбщегоНазначения.ОписаниеТипаСтрока(50));

	ТаблицаСеансов.Колонки.Добавить("ДлительностьВызововВсего", ОбщегоНазначения.ОписаниеТипаЧисло(15));
	ТаблицаСеансов.Колонки.Добавить("ДлительностьВызововСервисовВсего", ОбщегоНазначения.ОписаниеТипаЧисло(15));
	ТаблицаСеансов.Колонки.Добавить("ДлительностьВызововСУБДВсего", ОбщегоНазначения.ОписаниеТипаЧисло(15));
	ТаблицаСеансов.Колонки.Добавить("КоличествоВызововВсего", ОбщегоНазначения.ОписаниеТипаЧисло(15));
	ТаблицаСеансов.Колонки.Добавить("ОбъемДанныхЗаписанныхНаДискВсего", ОбщегоНазначения.ОписаниеТипаЧисло(15));
	ТаблицаСеансов.Колонки.Добавить("ОбъемДанныхПереданныхИПолученныхСУБДВсего", ОбщегоНазначения.ОписаниеТипаЧисло(15));
	ТаблицаСеансов.Колонки.Добавить("ОбъемДанныхСчитанныхСДискаВсего", ОбщегоНазначения.ОписаниеТипаЧисло(15));
	ТаблицаСеансов.Колонки.Добавить("ПотреблениеПамятиВсего", ОбщегоНазначения.ОписаниеТипаЧисло(15));
	ТаблицаСеансов.Колонки.Добавить("ПроцессорноеВремяВсего", ОбщегоНазначения.ОписаниеТипаЧисло(15));

	ТаблицаСеансов.Колонки.Добавить("Лицензии", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	ТаблицаСеансов.Колонки.Добавить("СоединениеСУБД", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ТаблицаСеансов.Колонки.Добавить("СпящийСеанс", Новый ОписаниеТипов("Булево"));
	ТаблицаСеансов.Колонки.Добавить("АктивныйСеансПользователя", Новый ОписаниеТипов("Булево"));

	Возврат ТаблицаСеансов;

КонецФункции

// Получить таблицу активных сеансов кластера.
// 
// Параметры:
//  Кластер - СправочникСсылка.Кластеры1С - Кластер
//  ТаблицаСеансов - Неопределено - Таблица сеансов
// 
// Возвращаемое значение:
//  Неопределено, ТаблицаЗначений - Получить таблицу активных сеансов кластера:
// * IPАдресКлиента 
// * ВремяНачала 
// * ВремяПоследнейАктивности 
// * ИдентификаторИнформационнойБазы - УникальныйИдентификатор -
// * ИдентификаторПроцесса - УникальныйИдентификатор -
// * ИдентификаторСеанса - УникальныйИдентификатор -
// * ИдентификаторСоединения - УникальныйИдентификатор -
// * ИмяКомпьютера - Строка -
// * ИмяПользователя - Строка -
// * ИмяПриложения - Строка - 
// * ИмяТекущегоСервиса - Строка - 
// * ДлительностьВызововВсего 
// * ДлительностьВызововСервисовВсего 
// * ДлительностьВызововСУБДВсего 
// * КоличествоВызововВсего 
// * ОбъемДанныхЗаписанныхНаДискВсего 
// * ОбъемДанныхПереданныхИПолученныхСУБДВсего 
// * ОбъемДанныхСчитанныхСДискаВсего 
// * ПотреблениеПамятиВсего 
// * ПроцессорноеВремяВсего 
// * Лицензии 
// * СоединениеСУБД 
// * СпящийСеанс - Булево -
// * АктивныйСеансПользователя - Булево -
Функция ПолучитьТаблицуАктивныхСеансовКластера(Кластер, ТаблицаСеансов = Неопределено) Экспорт

	Если ТаблицаСеансов = Неопределено Тогда
		ТаблицаСеансов = ИнициализироватьТаблицуСеансов();
	КонецЕсли;

	Отказ = Ложь;
	ЭлементАдминистрированиеКластера = ПолучитьАдиминистрированиеКластера(Кластер, Отказ);
	Если Отказ Тогда
		Возврат ТаблицаСеансов;
	КонецЕсли;

	АктивныеСеансы = ЭлементАдминистрированиеКластера.ПолучитьСеансы();

	Для Каждого ОписаниеСеанса Из АктивныеСеансы Цикл
		СтрокаТаблицыСеансов = ТаблицаСеансов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыСеансов, ОписаниеСеанса);
		СтрокаТаблицыСеансов.АктивныйСеансПользователя = ПроверитьАктивностьСеанса(ОписаниеСеанса);
	КонецЦикла;

	Возврат ТаблицаСеансов;

КонецФункции  

// Проверить активность сеанса.
// 
// Параметры:
//  ОписаниеСеанса - АдминистрированиеСеанс - Описание сеанса
// 
// Возвращаемое значение:
//  Булево - Проверить активность сеанса
Функция ПроверитьАктивностьСеанса(ОписаниеСеанса)

	Возврат (ОписаниеСеанса.ИмяПриложения = "1CV8" Или ОписаниеСеанса.ИмяПриложения = "1CV8C"
		Или ОписаниеСеанса.ИмяПриложения = "Designer") И Не ОписаниеСеанса.СпящийСеанс;

КонецФункции

// Получить таблицу сеансов информационной базы.
// 
// Параметры:
//  ИнформационнаяБаза - СправочникСсылка.ИнформационныеБазы - Информационная база
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Получить таблицу сеансов информационной базы:
// * IPАдресКлиента 
// * ВремяНачала 
// * ВремяПоследнейАктивности 
// * ИдентификаторИнформационнойБазы - УникальныйИдентификатор -
// * ИдентификаторПроцесса - УникальныйИдентификатор -
// * ИдентификаторСеанса - УникальныйИдентификатор -
// * ИдентификаторСоединения - УникальныйИдентификатор -
// * ИмяКомпьютера 
// * ИмяПользователя 
// * ИмяПриложения 
// * ИмяТекущегоСервиса 
// * ДлительностьВызововВсего 
// * ДлительностьВызововСервисовВсего 
// * ДлительностьВызововСУБДВсего 
// * КоличествоВызововВсего 
// * ОбъемДанныхЗаписанныхНаДискВсего 
// * ОбъемДанныхПереданныхИПолученныхСУБДВсего 
// * ОбъемДанныхСчитанныхСДискаВсего 
// * ПотреблениеПамятиВсего 
// * ПроцессорноеВремяВсего 
// * Лицензии 
// * СоединениеСУБД 
// * СпящийСеанс - Булево -
// * АктивныйСеансПользователя - Булево -
Функция ПолучитьТаблицуСеансовИнформационнойБазы(ИнформационнаяБаза) Экспорт

	ТаблицаСеансов = ИнициализироватьТаблицуСеансов();

	Отказ = Ложь;
	Адимнистрирование_ИнформационнаяБаза = ПолучитьАдминистрированиеИнформационнойБазы(ИнформационнаяБаза, Отказ);
	СеансыИнформационнойБазы = Адимнистрирование_ИнформационнаяБаза.ПолучитьСеансы();

	Для Каждого СеансИнформационнойБазы Из СеансыИнформационнойБазы Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаСеансов.Добавить(), СеансИнформационнойБазы);
	КонецЦикла;

	Возврат ТаблицаСеансов;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Код процедур и функций

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Код процедур и функций

#КонецОбласти