


#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ПроверитьВыполнениеПравила(Объект, Правило) Экспорт
	
	// TODO
	Если Правило = ЗаполнениеДанныхСУБД Тогда
		РезультатПроверки = Проверить_ЗаполнениеДанныхСУБД(Объект);		
	Иначе
		
	КонецЕсли;
	
	Возврат РезультатПроверки;	
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

// Код процедур и функций

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция Проверить_ЗаполнениеДанныхСУБД(Объект) Экспорт
	
	ПроверяемыеРеквизиты = Новый Массив;
	ПроверяемыеРеквизиты.Добавить("ТипСУБД");
	ПроверяемыеРеквизиты.Добавить("ИмяАдминистратораСУБД");
	ПроверяемыеРеквизиты.Добавить("ПарольАдминистратораСУБД");
	ПроверяемыеРеквизиты.Добавить("ИмяСервера");
	ПроверяемыеРеквизиты.Добавить("Адрес");
	ПроверяемыеРеквизиты.Добавить("Порт");
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект, ПроверяемыеРеквизиты);
	
	Для Каждого Реквизит Из ПроверяемыеРеквизиты Цикл
		Если Не ЗначениеЗаполнено(ЗначенияРеквизитов[Реквизит]) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
		
КонецФункции


// Проверить актуальность зарегистрированных баз.
// 
// Параметры:
//  Кластер - СправочникСсылка.Кластеры1С
//  ИдентификаторыБаз - УникальныйИдентификатор
Процедура Проверить_АктуальностьЗарегистрированныхБаз(Кластер, ИдентификаторыБаз) Экспорт
	
	// REF: Переделать в самостоятельную проверку - без параметра "ИдентификаторыБаз".
	Правило = РегистрацияИнформационнойБазы;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
						|	ИнформационныеБазы.Ссылка КАК ИнформационнаяБаза
						|ИЗ
						|	Справочник.ИнформационныеБазы КАК ИнформационныеБазы
						|ГДЕ
						|	НЕ ИнформационныеБазы.ИдентификаторБазы В (&ИдентификаторыБаз)
						|	И ИнформационныеБазы.Владелец = &Кластер1С";
	
	Запрос.УстановитьПараметр("Кластер1С",				Кластер);
	Запрос.УстановитьПараметр("ИдентификаторыБаз",	ИдентификаторыБаз);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		//@skip-check invocation-parameter-type-intersect
		//@skip-check property-return-type
		ПроверкаСостоянияОбъектов.ЗаписатьРезультатПроверки(Выборка.ИнформационнаяБаза, Правило);		
	КонецЦикла;
		
КонецПроцедуры

// Проверить доступность серверов.
Процедура Проверить_ДоступностьСерверов() Экспорт
	
	Правило = ДоступностьСервераАдминистрированияКластера;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
						|	Кластеры1С.Ссылка КАК Кластер1С,
						|	Кластеры1С.АдресСервераАдминистрирования КАК АдресСервераАдминистрирования,
						|	Кластеры1С.ПортСервераАдминистрирования КАК ПортСервераАдминистрирования
						|ИЗ
						|	Справочник.Кластеры1С КАК Кластеры1С
						|ГДЕ
						|	Кластеры1С.Активен";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
		
	Пока Выборка.Следующий() Цикл
		Попытка
			//@skip-check property-return-type
			АгентАдминистрирования = Новый АдминистрированиеСервера(Выборка.АдресСервераАдминистрирования,
														Выборка.ПортСервераАдминистрирования);
			Проверить_АвторизациюСервераАдминистрирования(АгентАдминистрирования);	
		Исключение
			//@skip-check invocation-parameter-type-intersect
			//@skip-check property-return-type
			ПроверкаСостоянияОбъектов.ЗаписатьРезультатПроверки(Выборка.Кластер1С, Правило);	
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура Проверить_АвторизациюСервераАдминистрирования(АгентАдминистрирования) 
	//TODO: Реализация
КонецПроцедуры



#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Код процедур и функций

#КонецОбласти

#КонецЕсли
