
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьТаблицуКонтекстаВыполнения();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуКонтекстаВыполнения()

	// КонструкторФормул
	ПараметрыДобавленияСпискаПолей = КонструкторФормул.ПараметрыДобавленияСпискаПолей();
	ПараметрыДобавленияСпискаПолей.ИмяСписка = "КонтекстВыполнеиняСкрипта";
	ПараметрыДобавленияСпискаПолей.КоллекцииПолей.Добавить(ПрочитатьСписокКонтекста());
	ПараметрыДобавленияСпискаПолей.МестоРазмещенияСписка	= Элементы.ГруппаДоступныйКонтекст;
	ПараметрыДобавленияСпискаПолей.СкобкиИдентификаторов	= Истина;
	ПараметрыДобавленияСпискаПолей.СкобкиПредставлений		= Истина;
	
	ПараметрыДобавленияСпискаПолей.ПодсказкаВводаСтрокиПоиска = НСтр("ru = 'Найти элемент контекста...'");
	КонструкторФормул.ДобавитьСписокПолейНаФорму(ЭтотОбъект, ПараметрыДобавленияСпискаПолей);

КонецПроцедуры // ЗаполнитьТаблицуКонтекстаВыполнения()

&НаСервереБезКонтекста
Функция ПрочитатьСписокКонтекста();
	
	ИсточникПолей = ТаблицаОперандов();
	
	Возврат КонструкторФормул.КоллекцияПолей(ИсточникПолей);
	
КонецФункции

&НаСервереБезКонтекста
Функция ТаблицаОперандов()
	
	ТаблицаОперандов = КонструкторФормул.ТаблицаПолей();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
					|	КонтекстВыполненияСкрипта.ТипЗначения КАК ТипЗначения,
					|	КонтекстВыполненияСкрипта.ИмяПредопределенныхДанных КАК Идентификатор,
					|	КонтекстВыполненияСкрипта.Представление КАК Представление
					|ИЗ
					|	ПланВидовХарактеристик.КонтекстВыполненияСкрипта КАК КонтекстВыполненияСкрипта";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Операнд = ТаблицаОперандов.Добавить();
		ЗаполнитьЗначенияСвойств(Операнд, Выборка);
	КонецЦикла;	 

	Возврат ТаблицаОперандов;
	
КонецФункции

&НаКлиенте
Процедура ПрочитатьПараметры(Команда)
	
	ТекстСкрипта = Объект.ТекстСкрипта;
	
	Объект.Переменные.Очистить();
	
	КоличествоВхождений = СтрЧислоВхождений(Объект.ТекстСкрипта, "%");
	НачалоПараметра = Истина;
	ПозицияПредыдущегоСимвола = 0; 
	
	Для СчетчикВхождений = 1 По КоличествоВхождений Цикл
		
		ПозицияТекущегоСимвола = СтрНайти(ТекстСкрипта, "%", , ПозицияПредыдущегоСимвола + 1);
		
		Если Не НачалоПараметра Тогда
			Параметр = Сред(ТекстСкрипта, ПозицияПредыдущегоСимвола + 1, ПозицияТекущегоСимвола - (ПозицияПредыдущегоСимвола + 1));
			НоваяСтрокаПараметров = Объект.Переменные.Добавить();
			НоваяСтрокаПараметров.Параметр = Параметр;	
		КонецЕсли;	
		
		ПозицияПредыдущегоСимвола = ПозицияТекущегоСимвола;
		НачалоПараметра = Не НачалоПараметра;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСкрипт(Команда)
	
	ЭлементыНеобходимогоКонтекста = ПолучитьЭлементыНеобходимогоКонтекста();	
	
	Если ЭлементыНеобходимогоКонтекста.Количество() > 0 Тогда

		ОткрытьФорму("Справочник.Скрипты.Форма.ФормаУстановкиКонтекста", 
						Новый Структура("ЭлементыКонтекста", ЭлементыНеобходимогоКонтекста), 
						ЭтаФорма, 
						ЭтаФорма, 
						, 
						, 
						, 
						РежимОткрытияОкнаФормы.БлокироватьОкноВладельца)
	Иначе
		ОбработкаВыполненияСкрипта(Объект.ТекстСкрипта);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыполненияСкрипта(ТекстСкрипта)
	
	//Отладка
	Сообщить(ТекстСкрипта);
	Возврат;
	//Отладка
	
	Если Объект.МестоИсполнения = ПредопределенноеЗначение("Перечисление.МестаИсполненияСкрипта.НаКлиенте") Тогда
		Результат = ВыполнитьСкриптНаКлиенте(ТекстСкрипта);
	Иначе
		Результат = ВыполнитьСкриптНаСервере(ТекстСкрипта);
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		ПоказатьПредупреждение(, "Скрипт не выполнен!"); 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("РезультатПроверки", Результат.ПотокВывода + "
									| -------------------------------------------------------------------
									|" + Результат.ПотокОшибок);   
	
	ОткрытьФорму("Справочник.Скрипты.Форма.ФормаРезультатаПроверки", 
					ПараметрыФормы, 
					, 
					, 
					, 
					, 
					, 
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Функция ТекстСкриптаПриведенныйККонтексту(ПараметрыСкрипта)
	
	ТекстСкрипта = Объект.ТекстСкрипта;
	
	Для Каждого СтрокаПеременных Из Объект.Переменные Цикл 
		
		ПеременнаяКонтекста = ОчиститьКвадратныеСкобки(СтрокаПеременных.ПеременнаяКонтекста);
		
		//TODO: проверка на наличие метода
		Если ЗначениеЗаполнено(ПеременнаяКонтекста) Тогда
			
			ЭлементКонтекста = СтрРазделить(ПеременнаяКонтекста, ".");
			ЗначениеКонтекста = Неопределено;
			Если Не ПараметрыСкрипта.Свойство(ЭлементКонтекста[0], ЗначениеКонтекста) Тогда
				Продолжить;
			КонецЕсли;
			
			ЭлементКонтекста.Удалить(0);
			
			ПутьКЗначениюПараметра	= СтрСоединить(ЭлементКонтекста, ".");
			ЗначениеПараметра		= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначениеКонтекста, ПутьКЗначениюПараметра);
		Иначе
			ЗначениеПараметра = СтрокаПеременных.ПредставлениеПеременной;
		КонецЕсли;
			

		ЗначениеПараметра = ПриведенноеСтроке(ЗначениеПараметра);
		
		СтрокаПараметра = "%" + СтрокаПеременных.Параметр + "%";
		ТекстСкрипта = СтрЗаменить(ТекстСкрипта, СтрокаПараметра, ЗначениеПараметра);
		
	КонецЦикла; 
	
	Возврат ТекстСкрипта;
	
КонецФункции

&НаСервере
Функция ПриведенноеСтроке(ЗначениеПараметра)
	
	//TODO: привести к строке разного вида	
	Возврат Строка(ЗначениеПараметра);
	
КонецФункции

&НаКлиенте
Функция ПолучитьЭлементыНеобходимогоКонтекста();
	
	ЭлементыНеобходимогоКонтекста = Новый Структура;
	
	Для Каждого СтрокаПеременныхКонтекста Из Объект.Переменные Цикл
		ПеременнаяКонтекста = ОчиститьКвадратныеСкобки(СтрокаПеременныхКонтекста.ПеременнаяКонтекста);
		МассивСтрокиКонтекста = СтрРазделить(ПеременнаяКонтекста, ".");
		Если ЗначениеЗаполнено(МассивСтрокиКонтекста[0]) Тогда
			ЭлементыНеобходимогоКонтекста.Вставить(МассивСтрокиКонтекста[0], СтрокаПеременныхКонтекста.ЭлементКонтекста);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЭлементыНеобходимогоКонтекста;
	
КонецФункции

&НаКлиенте
Функция ВыполнитьСкриптНаКлиенте(ТекстСкрипта)
	
	ПараметрыЗапускаПрограммы = ФайловаяСистемаКлиент.ПараметрыЗапускаПрограммы(); 
	ПараметрыЗапускаПрограммы.ПолучитьПотокВывода = Истина;
	ПараметрыЗапускаПрограммы.ДождатьсяЗавершения = Истина;
	
	Возврат ФайловаяСистемаКлиент.ЗапуститьПрограмму(ТекстСкрипта, ПараметрыЗапускаПрограммы);

КонецФункции

&НаСервере
Функция ВыполнитьСкриптНаСервере(ТекстСкрипта)
	
	ПараметрыЗапускаПрограммы = ФайловаяСистема.ПараметрыЗапускаПрограммы(); 
	ПараметрыЗапускаПрограммы.ПолучитьПотокВывода = Истина;
	ПараметрыЗапускаПрограммы.ПолучитьПотокОшибок = Истина;
	ПараметрыЗапускаПрограммы.ДождатьсяЗавершения = Истина;
	
	Возврат ФайловаяСистема.ЗапуститьПрограмму(ТекстСкрипта, ПараметрыЗапускаПрограммы);  
	
КонецФункции // ВыполнитьСкриптНаСервере()

#Область ПодключаемыйСписокПолей

&НаКлиенте
Процедура Подключаемый_СписокПолейПередРазворачиванием(Элемент, Строка, Отказ)
	КонструкторФормулКлиент.СписокПолейПередРазворачиванием(ЭтотОбъект, Элемент, Строка, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазвернутьТекущийЭлементСпискаПолей()
	КонструкторФормулКлиент.РазвернутьТекущийЭлементСпискаПолей(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗаполнитьСписокДоступныхПолей(ПараметрыЗаполнения) Экспорт
	ЗаполнитьСписокДоступныхПолей(ПараметрыЗаполнения);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокДоступныхПолей(ПараметрыЗаполнения)
	КонструкторФормулСлужебный.ЗаполнитьСписокДоступныхПолей(ЭтотОбъект, ПараметрыЗаполнения);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокПолейНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ИдентификаторСтроки = ПараметрыПеретаскивания.Значение;
	Реквизит = ЭтотОбъект[Элемент.Имя].НайтиПоИдентификатору(ИдентификаторСтроки);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ПутьКДанным",		Реквизит.ПутьКДанным);
	СтруктураПараметров.Вставить("Представление",	Реквизит.ПредставлениеПутиКДанным);  
	
	ПараметрыПеретаскивания.Значение = СтруктураПараметров;
	
КонецПроцедуры

&НаКлиенте
Функция СтрокаГоловногоЭлемента(Знач Реквизит);
	
	РодительскийЭлемент = Реквизит.ПолучитьРодителя();
	Если РодительскийЭлемент = Неопределено Тогда
		Возврат Реквизит;
	Иначе
		Возврат СтрокаГоловногоЭлемента(Реквизит);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_СтрокаПоискаИзменениеСтруктураТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	КонструкторФормулКлиент.СтрокаПоискаИзменениеТекстаРедактирования(ЭтотОбъект, Элемент, Текст, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПоискВСпискеПолей()
	ВыполнитьПоискВСпискеПолей();   
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПоискВСпискеПолей()  
	КонструкторФормул.ВыполнитьПоискВСпискеПолей(ЭтотОбъект);   
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СтрокаПоискаОчистка(Элемент, СтандартнаяОбработка)   
	КонструкторФормулКлиент.СтрокаПоискаОчистка(ЭтотОбъект, Элемент, СтандартнаяОбработка); 
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОбработчикКонструктораФормулСервер(Параметр, ДополнительныеПараметры)
	КонструкторФормул.ОбработчикКонструктораФормул(ЭтотОбъект, Параметр, ДополнительныеПараметры);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикКонструктораФормулКлиент(Параметр, ДополнительныеПараметры = Неопределено) Экспорт
	КонструкторФормулКлиент.ОбработчикКонструктораФормул(ЭтотОбъект, Параметр, ДополнительныеПараметры);
	Если ДополнительныеПараметры.ВыполнитьНаСервере Тогда
		Подключаемый_ОбработчикКонструктораФормулСервер(Параметр, ДополнительныеПараметры);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачатьПоискВСпискеПолей()
	КонструкторФормулКлиент.НачатьПоискВСпискеПолей(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПеременныеПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ЗначениеПеретаскивания = ПараметрыПеретаскивания.Значение;
	
	ЭлементКонтекста = ПолучитьЭлементКонтекстаИзФормулы(ЗначениеПеретаскивания.ПутьКДанным);
	
	СтрокаДанныхПараметров = Объект.Переменные.НайтиПоИдентификатору(Строка);
	
	СтрокаДанныхПараметров.ПеременнаяКонтекста		= "[" + ЗначениеПеретаскивания.ПутьКДанным + "]";
	СтрокаДанныхПараметров.ПредставлениеПеременной	= "[" + ЗначениеПеретаскивания.Представление + "]";
	СтрокаДанныхПараметров.ЭлементКонтекста			= ПредопределенноеЗначение("ПланВидовХарактеристик.КонтекстВыполненияСкрипта." + ЭлементКонтекста);

КонецПроцедуры

&НаКлиенте
Функция ПолучитьЭлементКонтекстаИзФормулы(СтрокаФормулы)
	
	ПредставлениеФормулы = ОчиститьКвадратныеСкобки(ПредставлениеФормулы);
	ПредставлениеФормулы = ТРег(ПредставлениеФормулы);
	ПредставлениеФормулы = СтрЗаменить(ПредставлениеФормулы, " ", "");
	
	ЭлементКонтекста = Лев(ПредставлениеФормулы, СтрНайти(ПредставлениеФормулы, ".") - 1);
	
	Возврат ЭлементКонтекста;
	
КонецФункции

&НаКлиенте
Процедура ПеременныеПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаполнениеПараметровСкрипта" Тогда
		ПриведенныйТекстСкрипта = ТекстСкриптаПриведенныйККонтексту(Параметр);
		ОбработкаВыполненияСкрипта(ПриведенныйТекстСкрипта);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти   

Функция ОчиститьКвадратныеСкобки(Строка)
	
	Если СтрНачинаетсяС(Строка, "[") И СтрЗаканчиваетсяНа(Строка, "]") Тогда
		Возврат Сред(Строка, 2, СтрДлина(Строка) - 2);
	КонецЕсли;
	
	Возврат Строка;
	
КонецФункции

