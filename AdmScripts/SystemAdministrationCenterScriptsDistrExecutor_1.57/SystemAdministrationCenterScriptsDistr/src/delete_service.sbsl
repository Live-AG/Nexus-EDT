// #импорт include/common.sbsl

///////////////////////////////////////////////////////////////////
// ИСКЛЮЧЕНИЯ И СТРУКТУРЫ
///////////////////////////////////////////////////////////////////

исключение ИсключениеВремениВыполнения
;

исключение ИсключениеТаймаут
    пер Таймаут: Число
;

исключение ИсключениеФайлНеНайден
    пер КаталогПуть: Строка
;

исключение ИсключениеКаталогОказалсяФайлом
    пер КаталогПуть: Строка
;

исключение ИсключениеОтсутствуютОбязательныеПараметры
;

структура СтруктураПроверкиПараметра
    пер ИмяПараметра: Строка = "" 
    обз пер Значение: Строка|Число|ДатаВремя
    обз пер ФункцияПроверки: ()->Булево
;

перечисление ПеречислениеОперационнаяСистема
    WINDOWS
    LINUX
    LINUX_DEB
    LINUX_RPM
;


///////////////////////////////////////////////////////////////////
// ОБЩИЕ
///////////////////////////////////////////////////////////////////


метод ОбщиеВремяИстекло(ВремяСтарта: ДатаВремя, ЛимитВремени: Число)

    если ЛимитВремени == 0 или ВремяСтарта <= ДатаВремя{2000-01-01}
        возврат
    ;

    если (ДатаВремя.Сейчас() - ВремяСтарта).Секунды > ЛимитВремени
        пер Ошибка = "Time limit expired: $ЛимитВремени sec." 
        ЛогОшибка(Ошибка)
        выбросить новый ИсключениеТаймаут(Ошибка, ЛимитВремени)
    ;

;

метод ОбщиеПодходитПодШаблон(ПроверяемаяСтрока: Строка, Шаблон: Строка, ИнвертироватьШаблон: Булево): Булево

    пер Подходит = Ложь

    пер регВыражение = новый Образец(Шаблон)

    если ИнвертироватьШаблон
        Подходит = (регВыражение.НайтиСовпадения(ПроверяемаяСтрока).Размер() == 0)
    иначе
        Подходит = (регВыражение.НайтиСовпадения(ПроверяемаяСтрока).Размер() > 0)
    ;
    
    возврат Подходит

;

метод ОбщиеЭтоАрхив(Путь: Строка): Булево

    пер ЭтоАрхив: Булево = Путь.ВНижнийРегистр().ЗаканчиваетсяНа(".zip")
                            или Путь.ВНижнийРегистр().ЗаканчиваетсяНа(".rar")
                            или Путь.ВНижнийРегистр().ЗаканчиваетсяНа(".gz")
    
    возврат ЭтоАрхив

;

метод ОбщиеДобавитьРазделитель(Путь: Строка): Строка
  возврат Путь.ЗаканчиваетсяНа(Файлы.СимволРазделителя) ? Путь : Путь + Файлы.СимволРазделителя
;

метод ОбщиеУбратьПоследнийРазделитель(Путь: Строка): Строка
  возврат Путь.ЗаканчиваетсяНа(Файлы.СимволРазделителя) ? Путь.ПодстрокаСНачала(Путь.Длина() - 1) : Путь
;

метод ОбщиеПроверитьОбязательныеПараметры(Параметры: СтруктураПараметров, ПроверкиПараметров: ЧитаемыйМассив<СтруктураПроверкиПараметра>)

    пер ЕстьОшибки: Булево = Ложь
    
    для ПроверкаПараметра из ПроверкиПараметров
    
        если не ПроверкаПараметра.ФункцияПроверки()

            пер ИмяПараметра = ПроверкаПараметра.ИмяПараметра
            пер Значение = ПроверкаПараметра.Значение
            
            ЛогОшибка("Parameter error: $ИмяПараметра, value: $Значение")
            ЕстьОшибки = Истина
            
        ;
    
    ;
    
    если ЕстьОшибки
        выбросить новый ИсключениеОтсутствуютОбязательныеПараметры("FAIL: parameters check")
    ;
    
;

метод ОбщиеЗначениеПараметраБулево(СоответствиеПараметров: Соответствие<Строка, Строка>, Ключ: Строка, ЗначениеПоумолчанию: Булево = Ложь): Булево

    пер Результат = ЗначениеПоумолчанию

    попытка
    
        пер Значение = СоответствиеПараметров[Ключ] 
        
        выбор Значение.ВНижнийРегистр()
        когда "истина"
            Результат = Истина
        когда "true"
            Результат = Истина
        когда "1"
            Результат = Истина
        когда "on"
            Результат = Истина
        когда "да"
            Результат = Истина
        когда "yes"
            Результат = Истина
        когда "вкл"
            Результат = Истина
        когда "вкл."
            Результат = Истина
        когда "включено"
            Результат = Истина
        иначе
            Результат = Ложь
        ;
        
    поймать Исключение: Исключение
        Результат = ЗначениеПоумолчанию
    ;
    
    возврат Результат

;

метод ОбщиеЗначениеПараметраЧисло(СоответствиеПараметров: Соответствие<Строка, Строка>, Ключ: Строка, ЗначениеПоУмолчанию: Число = 0): Число

    пер Результат = ЗначениеПоУмолчанию

    попытка
        пер Значение = СоответствиеПараметров[Ключ] 
        Результат = новый Число(Значение)
    поймать Исключение: Исключение
        Результат = ЗначениеПоУмолчанию
    ;
    
    возврат Результат

;

метод ОбщиеЗначениеПараметраСтрока(СоответствиеПараметров: Соответствие<Строка, Строка>, Ключ: Строка, ЗначениеПоУмолчанию: Строка = ""): Строка

    пер Результат = ЗначениеПоУмолчанию

    попытка
        пер Значение = СоответствиеПараметров[Ключ] 
        Результат = Значение.ВСтроку()

        если Результат.Сравнить("null", Истина) == 0
            Результат = ЗначениеПоУмолчанию
        ;
        
    поймать Исключение: Исключение
        Результат = ЗначениеПоУмолчанию
    ;
    
    возврат Результат

;

метод ОбщиеПауза(ПаузаСекунд: Число, Случайная: Булево = Ложь)

    пер ПаузаРеальная = ПаузаСекунд
    
    если Случайная
    
        пер ГСЧ = новый СлучайныйГенератор(ДатаВремя.Сейчас().Миллисекунда)
        ПаузаРеальная = ГСЧ.СлучайноеЦелое(0, ПаузаСекунд)

    ;
    
    ПаузаРеальная = ПаузаРеальная == 0 ? ПаузаСекунд : ПаузаРеальная

    если Случайная
        
        ЛогИнформация("Selected delay $ПаузаРеальная sec.")
        
    ;
    
    Пауза(новый Длительность(0, 0, ПаузаРеальная))
    
;

метод ОбщиеТипОС(УточнятьТипLinux: Булево = Ложь): ПеречислениеОперационнаяСистема

    пер ТипОС: ПеречислениеОперационнаяСистема = СредаИсполнения.ПолучитьПеременную("OS").Содержит("Windows", Истина) ? ПеречислениеОперационнаяСистема.WINDOWS : ПеречислениеОперационнаяСистема.LINUX
    
    если ТипОС == ПеречислениеОперационнаяСистема.LINUX и УточнятьТипLinux
        
        ТипОС = ПеречислениеОперационнаяСистема.LINUX_DEB
        
        пер Процесс: ПроцессОс = новый ПроцессОс("dpkg", ["--version"])
        
        попытка
            Процесс.Запустить()
            Процесс.ПолучитьПотокВывода().ПрочитатьКакСтроку()
        поймать Игнорировать: Исключение
            ТипОС = ПеречислениеОперационнаяСистема.LINUX_RPM
        ; 
        
    ;
    
    возврат ТипОС
    
;

метод ОбщиеАрхитектураОС(): Число
    если СредаИсполнения.ПолучитьСвойство("os.arch").Содержит("64")
        возврат 64
    иначе
        возврат 32
    ;
;

метод ОбщиеНайтиФайл(Путь: Строка|Файл, ИмяФайла: Строка): Файл?

    пер НайденныйФайл: Файл? = Неопределено
    
    пер НастройкиПоиска: НастройкиПоиска = новый НастройкиПоиска()
    НастройкиПоиска.ИмяСодержит(ИмяФайла)
    НастройкиПоиска.ИсключитьКаталоги(Истина)
    
    пер МассивФайлов: ЧитаемыйМассив<Файл> = Файлы.Найти(Путь, НастройкиПоиска)
    для Файл из МассивФайлов
        если Файл.Имя == ИмяФайла
            НайденныйФайл = Файл
            прервать
        ;
    ;

    возврат НайденныйФайл
;

метод ОбщиеФайлСкрипта(): Файл
    пер ФайлСкрипта: Файл = новый Файл(Скрипт.ПутьТекущегоСкрипта)
    возврат ФайлСкрипта
;

метод ОбщиеКаталогСкрипта(): Строка
    пер ФайлСкрипта: Файл? = ОбщиеФайлСкрипта()
    возврат (ФайлСкрипта != Неопределено ? ФайлСкрипта.Каталог.Путь : "")
;

метод ОбщиеЗапуститьПроцессОС(Процесс: ПроцессОс, ОбработкаОшибок: ((Число, Строка)->void)? = Неопределено, ЛимитВремени: Число = 0, Кодировка: Строка = "UTF-8", ОжидатьЗавершения: Булево = Истина): Строка

    пер Ошибка: Строка = ""
    пер ФайлПотокаВывода = Файлы.СоздатьВременныйФайл("ex_")
    пер ПотокВывода: Строка = ""
    
    Процесс.Запустить()
	если не ОжидатьЗавершения
		возврат ПотокВывода
	;
    
    пер ВсеОк: Булево = Истина
    
    если ЛимитВремени > 0  
        ВсеОк = Процесс.ОжидатьЗавершения(Длительность.ИзСекунд(ЛимитВремени))
    иначе если ЛимитВремени == -1
        ВсеОк = Истина
        возврат ""
    иначе
        ВсеОк = Процесс.ОжидатьЗавершения()
    ;
    
    если не ВсеОк
        Ошибка = "Timeout expired: " + ЛимитВремени
        ЛогОшибка(Ошибка)
        выбросить новый ИсключениеТаймаут(Ошибка, ЛимитВремени)
    ;        

    пер КодОшибки: Число? = Процесс.ПолучитьКодВозврата()
    если КодОшибки == Неопределено
        КодОшибки = 0
    ;

    ПотокВывода = Процесс.ПолучитьПотокВывода().ПрочитатьКакСтроку(Кодировка)
    Ошибка = Процесс.ПолучитьПотокОшибок().ПрочитатьКакСтроку()

    если КодОшибки != 0 или не Ошибка.Пусто()
        если ОбработкаОшибок == Неопределено
            пер ТекстОшибки: Строка = "Return code: $КодОшибки. $Ошибка" 
            ЛогОшибка(ПотокВывода + ТекстОшибки)
            выбросить новый ИсключениеВремениВыполнения(ТекстОшибки)
        иначе
            ОбработкаОшибок(КодОшибки, ПотокВывода + "\n" + Ошибка)
        ;
    ;
    
    возврат ПотокВывода
    
;

метод ОбщиеЗапуститьКаскадПроцессов(Параметры: ЧитаемыйМассив<ЧитаемыйМассив<Строка>>): Строка

    пер Вывод: Строка = ""
    пер Вход: Строка = ""

    для ОписаниеКоманды из Параметры
        
        пер Команда: Строка = ОписаниеКоманды[0]
        пер ПараметрыКоманды: ЧитаемыйМассив<Строка> = (Параметры.Размер() > 1 ? ОписаниеКоманды.ПодМассив(1) : [])
        
        пер Процесс: ПроцессОс = новый ПроцессОс(Команда , ПараметрыКоманды)
        Процесс.Запустить()
        Процесс.ПолучитьПотокВвода().Записать(Вход).Закрыть()
        Вывод = Процесс.ПолучитьПотокВывода().ПрочитатьКакСтроку()
        Вход = Вывод
    ;
        
    возврат Вывод
        
;


метод ОбщиеУбратьГраничныеСимволы(Текст: Строка, Символ: Строка): Строка

    если Текст.НачинаетсяС(Символ)
        Текст = Текст.Подстрока(1)
    ;
    
    если Текст.ЗаканчиваетсяНа(Символ)
        Текст = Текст.Подстрока(0, Текст.Длина() - Мин(1, Текст.Длина()))
    ;
    
    возврат Текст

;

метод ОбщиеКодироватьВURL(Данные: Строка): Строка

    пер ДанныеКодированные: Массив<Строка>

    пер КодируемыеСимволы: Строка = ":/?#[]@!$&'()*+,;=ёйцукенгшщзхъфывапролджэячсмитьбюЁЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮ"
    пер ДекодируемыеСимволы: Строка = "#3A#2F#3F#23#5B#5D#40#21#24#26#27#28#29#2A#2B#2C#3B#3D#D1#91#D0#B9#D1#86#D1#83#D0#BA#D0#B5#D0#BD#D0#B3#D1#88#D1#89#D0#B7#D1#85#D1#8A#D1#84#D1#8B#D0#B2#D0#B0#D0#BF#D1#80#D0#BE#D0#BB#D0#B4#D0#B6#D1#8D#D1#8F#D1#87#D1#81#D0#BC#D0#B8#D1#82#D1#8C#D0#B1#D1#8E#D0#81#D0#99#D0#A6#D0#A3#D0#9A#D0#95#D0#9D#D0#93#D0#A8#D0#A9#D0#97#D0#A5#D0#AA#D0#A4#D0#AB#D0#92#D0#90#D0#9F#D0#A0#D0#9E#D0#9B#D0#94#D0#96#D0#AD#D0#AF#D0#A7#D0#A1#D0#9C#D0#98#D0#A2#D0#AC#D0#91#D0#AE"
    пер ДекодируемыеСимволыМассив: Массив<Строка> = ДекодируемыеСимволы.Разделить("#")
    
    для Символ из Данные
        пер Позиция = КодируемыеСимволы.Найти(Символ)
        если Позиция >= 0
            ДанныеКодированные.Добавить("%" + ДекодируемыеСимволыМассив[Позиция])
        иначе
            ДанныеКодированные.Добавить(Символ)
        ;
    ;
    
    
    возврат Строки.Соединить(ДанныеКодированные, "")
    
;

метод ОбщиеАрхитектураEXE(ФайлEXE: Файл): Число

    исп ПотокЧтения: ПотокЧтения = ФайлEXE.ОткрытьПотокЧтения()
    пер ЧтениеДанных: ЧтениеДанных = новый ЧтениеДанных(ПотокЧтения)
    пер ПозицияPE: Число = ЧтениеДанных.ПропуститьДо("PE")
    если ПозицияPE < 200 или ПозицияPE > 400
        возврат 0
    ;
    
    ЧтениеДанных.Пропустить(2)
    пер Разрядность: Число? = ЧтениеДанных.ПрочитатьЦелое16()
    если Разрядность == 0x4c01
        возврат 32
    иначе если Разрядность == 0x6486
        возврат 64
    ;
    
    возврат 0

;

метод ОбщиеВерсияEXE(ФайлEXE: Файл): Строка

    пер Процесс: ПроцессОс = новый ПроцессОс("wmic" , ["datafile", "where", "Name=\"" + ФайлEXE.Путь.Заменить("\\", "\\\\")  + "\"", "get", "Version", "/value"])
    пер Данные: Строка = ОбщиеЗапуститьПроцессОС(Процесс, Неопределено,  0, "cp866")
    
    пер Версия: Строка = Данные
        .Заменить("\r", "")
        .Заменить("\n", "")
        .Сократить()
        .Разделить("=")[1]
    
    возврат Версия

;


метод ОбщиеТекстВМассив(Текст: Строка, ВключаяПустые: Булево = Ложь): Массив<Строка>
    возврат Текст.Заменить("\r\n", "\n").Заменить("\r", "\n").Разделить("\n", ВключаяПустые)
;

метод ОбщиеОчиститьКаталог(Каталог: Файл|Строка, СоздаватьЕслиОтсутствует: Булево = Истина)
    
    пер КаталогФайл: Файл = (Каталог это Строка) ? новый Файл(Каталог как Строка) : Каталог как Файл
    
    если КаталогФайл.Существует() и не КаталогФайл.ЯвляетсяКаталогом()
        выбросить новый ИсключениеКаталогОказалсяФайлом("Destination path exists and not a directory", КаталогФайл.Путь)
    ;
    
    если КаталогФайл.Существует()
    
        пер МассивФайлов = новый Массив(Файлы.Найти(КаталогФайл, новый НастройкиПоиска().МаксимальнаяГлубина(1)))
        для Файл из МассивФайлов
            Файлы.Удалить(Файл, Истина)
        ;
    
    иначе если СоздаватьЕслиОтсутствует
        Файлы.СоздатьКаталог(Каталог)
    ;
    
;

метод ОбщиеРаспаковатьАрхив(ФайлАрхива: Файл, Каталог: Файл|Строка, ЛимитВремени: Число = 0)

    пер КаталогПриемник: Файл = (Каталог это Строка) ? новый Файл(Каталог как Строка) : Каталог как Файл

    пер ФайлRAR: Файл = новый Файл(ОбщиеДобавитьРазделитель(ОбщиеКаталогСкрипта())
        + Файлы.СимволРазделителя + ".." + Файлы.СимволРазделителя   
        + "external_utils" + Файлы.СимволРазделителя 
        + "unrar" + Файлы.СимволРазделителя
        + "unrar" + (ОбщиеТипОС() == ПеречислениеОперационнаяСистема.WINDOWS ? ".exe" : ""))
    
    если ФайлАрхива.Расширение.ВНижнийРегистр() == "rar" и не ФайлRAR.Существует()
        пер Ошибка: Строка = "Cannot find unrar."
        ЛогОшибка(Ошибка)
        выбросить новый ИсключениеФайлНеНайден(Ошибка, ФайлRAR.Путь)        
    ;
    
    если ФайлАрхива.Расширение == "zip"
        
        пер ФайлZip = новый ФайлZip(ФайлАрхива.Путь)
        ФайлZip.ИзвлечьВсе(КаталогПриемник)
        
    иначе если ФайлАрхива.Расширение == "rar"

        пер ПараметрыЗапуска: ЧитаемыйМассив<Строка> = новый ЧитаемыйМассив<Строка>(["x", "\"" + ФайлАрхива.Путь + "\"", "\"" + КаталогПриемник + "\""])
        пер Процесс: ПроцессОс = новый ПроцессОс(ФайлRAR.Путь, ПараметрыЗапуска)
        
        ОбщиеЗапуститьПроцессОС(Процесс, 
            метод(КодОшибки: Число, ТекстОшибки: Строка) -> 
                если КодОшибки != 0 или не ТекстОшибки.Пусто()
                    пер Ошибка: Строка = "UnRAR error. Return code: $КодОшибки. $ТекстОшибки" + "\n" + ФайлRAR.Путь + " " + Строки.Соединить(ПараметрыЗапуска, " ")  
                    ЛогОшибка(Ошибка)
                    выбросить новый ИсключениеВремениВыполнения(Ошибка)
                ;
            ;
        , ЛимитВремени, "cp866")
    
    иначе если ФайлАрхива.Расширение == "gz"
        
        пер Процесс: ПроцессОс = новый ПроцессОс("tar" , ["-xzf", ФайлАрхива.Путь, "-C", КаталогПриемник])
        ОбщиеЗапуститьПроцессОС(Процесс, Неопределено,  ЛимитВремени)
        
    ;
    
;

метод ОбщееПолучитьИнтерактивнуюСессиюПользователя(Пользователь: Строка): Строка
    пер МассивПараметров: Массив<Строка> = []
    пер ИдентификаторСессии = "-1"
    
    пер ЧастиИмениПользователя = Пользователь.Разделить("\\")
    пер ИмяПользователя = ЧастиИмениПользователя[0]

    если ЧастиИмениПользователя.Размер() > 1
        ИмяПользователя = ЧастиИмениПользователя[1]
    ;

    МассивПараметров.Добавить("query")
    МассивПараметров.Добавить("session")
    МассивПараметров.Добавить(ИмяПользователя)
    МассивПараметров.Добавить("|")
    МассивПараметров.Добавить("select")
    МассивПараметров.Добавить("-skip")
    МассивПараметров.Добавить("1")
    МассивПараметров.Добавить("-first")
    МассивПараметров.Добавить("1")

    пер Процесс: ПроцессОс = новый ПроцессОс("powershell", МассивПараметров, Истина)

    попытка 
        ОбщиеЗапуститьПроцессОС(Процесс, Неопределено, 0, "cp866", Ложь)
        Процесс.ОжидатьЗавершения()

        пер ПотокВывода = Процесс.ПолучитьПотокВывода()

        пер ТекстВывода = ПотокВывода.ПрочитатьКакСтроку("cp866")
        пер СтрокиВывода = ОбщиеТекстВМассив(ТекстВывода)

        для ТекущаяСтрока из СтрокиВывода
            пер ДанныеСтрокиВывода = ТекущаяСтрока.Разделить(" ")

            если ДанныеСтрокиВывода.Размер() > 2
                ИдентификаторСессии = ДанныеСтрокиВывода[2]
            ;
        ;

        ЛогИнформация(ТекстВывода)

    поймать Исключение: Исключение
        выбросить Исключение
    ;

    возврат ИдентификаторСессии
;

метод ОбщееПолучитьАдресSOAPСервиса(АдресВебСервера: Строка, ИмяПубликации: Строка, Сервис: Строка): Строка
    возврат "%{АдресВебСервера}/%{ИмяПубликации}/ws/%{Сервис}.1cws"
;

метод ОбщееВыполнитьSOAPЗапрос(АдресSOAPСервиса: Строка, Запрос: Строка, Пользователь: Строка = "", Пароль: Строка = ""): Строка
    
    пер Аутентификация: АутентификацияHttp = новый АутентификацияHttp(Пользователь, Пароль)
    пер UserAgent = "1C+Enterprise/8.3"

    исп Ответ: ОтветHttp = КлиентHttp.САутентификацией(Аутентификация)
        .СБазовымUrl(АдресSOAPСервиса)
        .ЗапросPost("")
        .УстановитьТело(Запрос)
        .ДобавитьЗаголовок("User-Agent", UserAgent)
        .ДобавитьЗаголовок("Accept", "*/*")
        .УстановитьТипСодержимого("application/soap+xml")
        .УстановитьТаймаутЗапроса(60с)
        .УстановитьТаймаутСоединения(60с)
        .Выполнить()

    если Ответ.КодСостояния == 200
        возврат Ответ.Тело.ПрочитатьКакСтроку()
    иначе
        выбросить новый ИсключениеВремениВыполнения("Response was returned with status code: %{Ответ.КодСостояния}; Message: %{Ответ.Тело.ПрочитатьКакСтроку()}")
    ;

    возврат ""
;

метод ОбщееНайтиИсполняемыйФайлПлатформы(ПутьКПлатформе: Строка, ИмяИсполняемогоФайла: Строка): Строка
    пер ЭтоWindows = (ОбщиеТипОС() == ПеречислениеОперационнаяСистема.WINDOWS)
    пер НастройкиПоискаДиректорииBin = новый НастройкиПоиска()
        .ИмяСодержит("bin")
        .ИсключитьФайлы(Истина)
    пер ДиректорияBin = ""

    если не Файлы.Найти(ОбщиеУбратьПоследнийРазделитель(ПутьКПлатформе), НастройкиПоискаДиректорииBin).Пусто()
         ДиректорияBin = ОбщиеДобавитьРазделитель("bin")

    ;

    пер ПутьКДиректорииBin = "${ОбщиеДобавитьРазделитель(ПутьКПлатформе)}%{ДиректорияBin}"
    ПутьКДиректорииBin = ОбщиеУбратьПоследнийРазделитель(ПутьКДиректорииBin)

    пер Расширение = (ЭтоWindows ? ".exe" : "")
    пер ПутьКФайлу = "${ОбщиеДобавитьРазделитель(ПутьКДиректорииBin)}%{ИмяИсполняемогоФайла}%{Расширение}"

    возврат новый Файл(ПутьКФайлу).Путь
;
// #конец_импорта


// #импорт include/logger.sbsl 


///////////////////////////////////////////////////////////////////
// ЛОГГЕР
///////////////////////////////////////////////////////////////////

метод ЛогСтарт()

    пер КаталогЛога = новый Файл(ОбщиеДобавитьРазделитель(ОбщиеКаталогСкрипта()) + "script_logs")
    если не КаталогЛога.Существует()
        Файлы.СоздатьКаталог(КаталогЛога)
    ;

    пер PID = "7777"

    пер ЛогДатаВремя = ДатаВремя.Сейчас().Представление("ггММдд_ЧЧммсс_")
    пер ИмяФайлаЛога = ОбщиеФайлСкрипта().ИмяБезРасширения + "_" + ЛогДатаВремя + PID + ".log"

    пер ФайлЛога = новый Файл(ОбщиеДобавитьРазделитель(КаталогЛога.Путь) + ИмяФайлаЛога)
    если не ФайлЛога.Существует()
        исп ПотокЗаписи = ФайлЛога.ОткрытьПотокЗаписи()
        ПотокЗаписи.СброситьБуферы()
        ПотокЗаписи.Закрыть()
    ;

    ЛогИнформация("Started")
    
;

метод НайтиТекущийФайлЛога(): Файл?

    пер МассивНайденныхФайлов = новый Массив(Файлы.Найти(ОбщиеДобавитьРазделитель(ОбщиеКаталогСкрипта()) + "script_logs",
        новый НастройкиПоиска()
            .ИмяСодержит(ОбщиеФайлСкрипта().ИмяБезРасширения)
            .ИсключитьКаталоги(Истина)
            .МаксимальнаяГлубина(1)
        ))

    если МассивНайденныхФайлов.Размер() > 0 
        МассивНайденныхФайлов.Сортировать((о1:Файл,о2:Файл) -> (о1.ИмяБезРасширения>о2.ИмяБезРасширения ? -1 : 1))
        возврат МассивНайденныхФайлов[0]
    иначе
        возврат Неопределено
    ;

;

метод ЛогВывод(ЛогУровень: Строка, ДатаВремяНачала: ДатаВремя? = Неопределено, ЛогТекст: Строка, Ошибка: Булево = Ложь)
    
    пер ЛогДлительность: Число = (ДатаВремяНачала != Неопределено ? (ДатаВремя.Сейчас() - ДатаВремяНачала).ВМиллисекундах() : 0)
    пер ЛогДатаВремя = ДатаВремя.Сейчас().Представление("гггг-ММ-дд ЧЧ:мм:сс.ССС")

    пер СтрокаЛог = "$ЛогДатаВремя-$ЛогДлительность [$ЛогУровень] $ЛогТекст"
    
    если Ошибка
        Консоль.ЗаписатьОшибку(СтрокаЛог)
    иначе
        Консоль.Записать(СтрокаЛог)
    ;

    пер ФайлЛога = НайтиТекущийФайлЛога()
    если ФайлЛога != Неопределено
        исп ПотокЗаписи = ФайлЛога.ОткрытьПотокЗаписи(Истина)
        ПотокЗаписи.Записать(СтрокаЛог + "\r\n")
    ;
    
;

метод ЛогИнформация(ЛогТекст: Строка, ДатаВремяНачала: ДатаВремя? = Неопределено)
    
    пер ЛогУровень = "INFO"
    ЛогВывод(ЛогУровень, ДатаВремяНачала, ЛогТекст)
    
;

метод ЛогОшибка(ЛогТекст: Строка, ДатаВремяНачала: ДатаВремя? = Неопределено)
    
    пер ЛогУровень = "ERROR"
    ЛогВывод(ЛогУровень, ДатаВремяНачала, ЛогТекст, Истина)
    
;

// #конец_импорта

// #импорт include/services.sbsl 


///////////////////////////////////////////////////////////////////
// РАБОТА СО СЛУЖБАМИ
///////////////////////////////////////////////////////////////////



структура СтруктураПараметрыСлужбы
    пер Подключено: Булево = Ложь
    пер Имя: Строка = ""
    пер ИсполняемыйФайл: Строка = ""
    пер КоманднаяСтрока: Строка = ""
    пер Запущена: Булево = Ложь
    пер Заголовок: Строка = ""
    пер ПараметрыЗапуска: Соответствие<Строка, Строка|Число|Диапазон<Число>> = {"": ""}
;


исключение ИсключениеОшибкаПолученияПараметровСлужбы
    пер ИмяПараметра: Строка
;

исключение ИсключениеОшибкаУправленияСлужбой
    пер ИмяСлужбы: Строка
;

перечисление ПеречислениеПараметрыСлужб
    ПУТЬ,
    ЗАГОЛОВОК,
    ЗАПУЩЕНА
;


метод СлужбыПолучитьЗначениеПараметра(ИмяСлужбы: Строка, Параметр: ПеречислениеПараметрыСлужб, ЛимитВремени: Число = 0): Строка

    пер ЗначениеПараметра: Строка = ""

    если ОбщиеТипОС() == ПеречислениеОперационнаяСистема.WINDOWS
    
        пер ИмяПараметра: Строка = {
            ПеречислениеПараметрыСлужб.ПУТЬ: "PathName",
            ПеречислениеПараметрыСлужб.ЗАГОЛОВОК: "Caption",
            ПеречислениеПараметрыСлужб.ЗАПУЩЕНА: "Started"
        }[Параметр]

        пер Процесс: ПроцессОс = новый ПроцессОс("wmic" , ["service", "\"" + ИмяСлужбы + "\"", "get", ИмяПараметра])
        ЗначениеПараметра = ОбщиеЗапуститьПроцессОС(Процесс, 
            метод(КодОшибки: Число, ТекстОшибки: Строка) -> 
                если КодОшибки != 0
                    пер Ошибка: Строка = "Property $ИмяПараметра not found. Return code: $КодОшибки. $ТекстОшибки" 
                    ЛогОшибка(Ошибка)
                    выбросить новый ИсключениеОшибкаПолученияПараметровСлужбы(Ошибка, ИмяПараметра)
                ;
            ;,
            ЛимитВремени, "cp866"
        )
        
        ЗначениеПараметра = ЗначениеПараметра.Разделить("\n")[1].Сократить().Заменить("\r", "")
            
    иначе
    
        пер ИмяПараметра: Строка = {
            ПеречислениеПараметрыСлужб.ПУТЬ: "ExecStart",
            ПеречислениеПараметрыСлужб.ЗАГОЛОВОК: "Caption",
            ПеречислениеПараметрыСлужб.ЗАПУЩЕНА: "ActiveState"
        }[Параметр]
        
        пер ПараметрыЗапуска: ЧитаемыйМассив<Строка> = ["call", "org.freedesktop.systemd1", "/org/freedesktop/systemd1", "org.freedesktop.systemd1.Manager", "LoadUnit", "s", ИмяСлужбы + ".service"]

        пер Процесс: ПроцессОс = новый ПроцессОс("busctl" , ПараметрыЗапуска)
        пер Юнит: Строка = ОбщиеЗапуститьПроцессОС(Процесс, 
            метод(КодОшибки: Число, ТекстОшибки: Строка) -> 
                если КодОшибки != 0
                    пер Ошибка: Строка = "Property $ИмяПараметра not found. Return code: $КодОшибки. $ТекстОшибки" 
                    ЛогОшибка(Ошибка)
                    выбросить новый ИсключениеОшибкаПолученияПараметровСлужбы(Ошибка, ИмяПараметра)
                ;
            ;,
            ЛимитВремени
        )

        Юнит = Юнит.Подстрока(Юнит.Найти("\"") + 1)
        Юнит = Юнит.Подстрока(0, Юнит.НайтиСКонца("\""))
        
        если Параметр == ПеречислениеПараметрыСлужб.ПУТЬ
            ПараметрыЗапуска = ["get-property", "org.freedesktop.systemd1", Юнит, "org.freedesktop.systemd1.Service", "ExecStart"] 
        иначе если Параметр == ПеречислениеПараметрыСлужб.ЗАГОЛОВОК
            возврат Юнит
        иначе если Параметр == ПеречислениеПараметрыСлужб.ЗАПУЩЕНА
            ПараметрыЗапуска = ["get-property", "org.freedesktop.systemd1", Юнит, "org.freedesktop.systemd1.Unit", "ActiveState"] 
        ;
        
        Процесс = новый ПроцессОс("busctl" , ПараметрыЗапуска)
        ЗначениеПараметра = ОбщиеЗапуститьПроцессОС(Процесс, 
            метод(КодОшибки: Число, ТекстОшибки: Строка) -> 
                если КодОшибки != 0
                    пер Ошибка: Строка = "Property $ИмяПараметра not found. Return code: $КодОшибки. $ТекстОшибки" 
                    ЛогОшибка(Ошибка)
                    выбросить новый ИсключениеОшибкаПолученияПараметровСлужбы(Ошибка, ИмяПараметра)
                ;
            ;,
            ЛимитВремени
        )
        
        ЗначениеПараметра = ЗначениеПараметра.Подстрока(ЗначениеПараметра.Найти("\"") + 1)
        ЗначениеПараметра = ЗначениеПараметра.Подстрока(0, ЗначениеПараметра.Найти("\""))

        если Параметр == ПеречислениеПараметрыСлужб.ЗАПУЩЕНА
            ЗначениеПараметра = (ЗначениеПараметра.ВНижнийРегистр() == "active" ? "TRUE" : "FALSE")
        ;
        
    ;
    
    возврат ЗначениеПараметра

;

метод СлужбыПодключиться(ИмяСлужбы: Строка, ЛимитВремени: Число): СтруктураПараметрыСлужбы

пер ПараметрыСлужбы: СтруктураПараметрыСлужбы = новый СтруктураПараметрыСлужбы()  
    
    ПараметрыСлужбы.Имя = ИмяСлужбы
    ПараметрыСлужбы.КоманднаяСтрока = СлужбыПолучитьЗначениеПараметра(ИмяСлужбы, ПеречислениеПараметрыСлужб.ПУТЬ, ЛимитВремени)
    ПараметрыСлужбы.Заголовок = СлужбыПолучитьЗначениеПараметра(ИмяСлужбы, ПеречислениеПараметрыСлужб.ЗАГОЛОВОК, ЛимитВремени)
    пер СлужбаЗапущена = СлужбыПолучитьЗначениеПараметра(ИмяСлужбы, ПеречислениеПараметрыСлужб.ЗАПУЩЕНА, ЛимитВремени)

    ПараметрыСлужбы.Запущена = не СлужбаЗапущена.Пусто() 
        и (СлужбаЗапущена.Сравнить("истина", Истина) == 0 или СлужбаЗапущена.Сравнить("true", Истина) == 0)

    пер ДанныеКоманднаяСтрока = ПараметрыСлужбы.КоманднаяСтрока.Разделить("\" ")
    если ДанныеКоманднаяСтрока.Размер() == 1
        ДанныеКоманднаяСтрока = ПараметрыСлужбы.КоманднаяСтрока.Разделить(" ")    
    ;
    
    если не ДанныеКоманднаяСтрока.Пусто()
        ПараметрыСлужбы.ИсполняемыйФайл = (новый Файл(ДанныеКоманднаяСтрока[0].Заменить("\"", ""))).Имя
    
        ПараметрыСлужбы.Подключено = Истина
    ;

    возврат ПараметрыСлужбы

; 

метод СлужбыСоздатьLinux(ФайлЗапускаСлужбы: Файл, ФайлШаблона: Файл, ПараметрыЗапуска: Соответствие<Строка, Строка>, ИмяПользователя: Строка = "", Пароль: Строка = "", Автозапуск: Булево = Ложь): Строка

    пер ИмяСлужбы: Строка = ФайлШаблона.ИмяБезРасширения.Заменить("@", "@default")
    
    исп ПотокЧтения: ПотокЧтения = ФайлШаблона.ОткрытьПотокЧтения()
    пер ШаблонСтрокой = ПотокЧтения.ПрочитатьКакСтроку()
    пер ОписаниеСлужбыМассив: Массив<Строка> = []
    
    // init.d
    для КлючЗначение из ПараметрыЗапуска
        ШаблонСтрокой = ШаблонСтрокой.Заменить("<" + КлючЗначение.Ключ + ">", КлючЗначение.Значение)
    ;
    
    // systemd
    для СтрокаШаблона из ОбщиеТекстВМассив(ШаблонСтрокой, Истина)
    
        если СтрокаШаблона.НачинаетсяС("Environment=")
            пер ИмяПеременной = СтрокаШаблона.Заменить("Environment=", "").Разделить("=")[0]
            если ПараметрыЗапуска.СодержитКлюч(ИмяПеременной)
                ОписаниеСлужбыМассив.Добавить("Environment=" + ИмяПеременной + "=" + ПараметрыЗапуска[ИмяПеременной])
                продолжить
            ;
        ;
        
        если СтрокаШаблона.НачинаетсяС("User=") и не ИмяПользователя.Пусто()
            ОписаниеСлужбыМассив.Добавить("User=" + ИмяПользователя)
            продолжить
        ;
        
        если СтрокаШаблона.НачинаетсяС("Group=") и не ИмяПользователя.Пусто()
            ОписаниеСлужбыМассив.Добавить("Group=" + ИмяПользователя)
            продолжить
        ;
        
        ОписаниеСлужбыМассив.Добавить(СтрокаШаблона)
        
    ; 
    
    исп ПотокЗаписи: ПотокЗаписи = новый Файл("/etc/systemd/system/" + ИмяСлужбы + ".service").ОткрытьПотокЗаписи(Ложь)
    ПотокЗаписи.Записать(Строки.Соединить(ОписаниеСлужбыМассив, "\r\n"))
    ПотокЗаписи.СброситьБуферы()
    ПотокЗаписи.Закрыть()
    
    пер ПроцессОс = новый ПроцессОс("systemctl", ["daemon-reload"])
    ОбщиеЗапуститьПроцессОС(ПроцессОс)
    
    пер ПараметрыСлужбы: СтруктураПараметрыСлужбы = СлужбыПодключиться(ИмяСлужбы, 0)
    
    если Автозапуск
        ПроцессОс = новый ПроцессОс("systemctl", ["enable", ИмяСлужбы])
        ОбщиеЗапуститьПроцессОС(ПроцессОс)
    ;
    
    возврат ИмяСлужбы

;


метод СлужбыСоздатьWindows(ИмяСлужбы: Строка, СтрокаЗапуска: Строка, ИмяПользователя: Строка = "", Пароль: Строка = "", Автозапуск: Булево = Ложь, Описание: Строка = "")
    
    пер МассивПараметровЗапуска: Массив<Строка> = ["create", 
        "\"" + ИмяСлужбы + "\"", 
        "binpath=", "\"" + СтрокаЗапуска + "\"", 
        "type=", "own",
        "start=", (Автозапуск ? "auto" : "demand")
    ]

    если не ИмяПользователя.Пусто() и МассивПараметровЗапуска.ДобавитьВсе(["obj=", "\"" + ИмяПользователя + "\""]);
    если не Пароль.Пусто() и МассивПараметровЗапуска.ДобавитьВсе(["password=", "\"" + Пароль + "\""]);
    если не Описание.Пусто() и МассивПараметровЗапуска.ДобавитьВсе(["displayname=", "\"" + Описание + "\""]);
    
    пер Процесс: ПроцессОс = новый ПроцессОс("sc" , новый ЧитаемыйМассив<Строка>(МассивПараметровЗапуска))

    ОбщиеЗапуститьПроцессОС(Процесс, 
        метод(КодОшибки: Число, ТекстОшибки: Строка) -> 
            если не [0, 1073].Содержит(КодОшибки) 
                пер Ошибка: Строка = "Service crete error. Return code: $КодОшибки. $ТекстОшибки" 
                ЛогОшибка(Ошибка)
                выбросить новый ИсключениеОшибкаУправленияСлужбой(Ошибка, ИмяСлужбы)
            ;
        ;
    , 0, "cp866")

;

метод СлужбыУдалить(ИмяСлужбы: Строка)

    пер МассивПараметровЗапуска: Массив<Строка> = ["delete", "\"" + ИмяСлужбы + "\""]

    если ОбщиеТипОС() == ПеречислениеОперационнаяСистема.WINDOWS
    
        пер Процесс: ПроцессОс = новый ПроцессОс("sc", новый ЧитаемыйМассив<Строка>(МассивПараметровЗапуска))

        ОбщиеЗапуститьПроцессОС(Процесс, 
            метод(КодОшибки: Число, ТекстОшибки: Строка) -> 
                если не [0, 1060].Содержит(КодОшибки) 
                    пер Ошибка: Строка = "Service delete error. Return code: $КодОшибки. $ТекстОшибки" 
                    ЛогОшибка(Ошибка)
                    выбросить новый ИсключениеОшибкаУправленияСлужбой(Ошибка, ИмяСлужбы)
                ;
            ;
        , 0, "cp866")
        
    иначе

        пер Процесс: ПроцессОс = новый ПроцессОс("systemctl", новый ЧитаемыйМассив<Строка>(МассивПараметровЗапуска))
        ОбщиеЗапуститьПроцессОС(Процесс)
        
        пер ФайлСлужбы = новый Файл("/etc/systemd/system/" + ИмяСлужбы + ".service")
        если ФайлСлужбы.Существует()
            Файлы.Удалить(ФайлСлужбы)
        ;
        
        Процесс = новый ПроцессОс("systemctl", ["daemon-reload"])
        ОбщиеЗапуститьПроцессОС(Процесс)
        
    ;

;

метод СлужбыПравДостаточно(): Булево
    
    пер ПравДостаточно: Булево = Ложь
    
    пер ИмяСлужбы: Строка = "SACTestService_" + (новый Ууид()).ВСтроку()
    
    если ОбщиеТипОС() == ПеречислениеОперационнаяСистема.WINDOWS
        
        СлужбыСоздатьWindows(ИмяСлужбы, "\\dev\\null")
        СлужбыУдалить(ИмяСлужбы)
        
        ПравДостаточно = Истина
            
    иначе

        пер Процесс: ПроцессОс = новый ПроцессОс("systemctl" , ["start", "\"" + ИмяСлужбы + "\""])

        ОбщиеЗапуститьПроцессОС(Процесс, 
            метод(КодОшибки: Число, ТекстОшибки: Строка) -> 
                если ТекстОшибки.ВНижнийРегистр().Найти("access") >= 0
                    пер Ошибка: Строка = "Start service crete error. Return code: $КодОшибки. $ТекстОшибки" 
                    ЛогОшибка(Ошибка)
                    выбросить новый ИсключениеОшибкаУправленияСлужбой(Ошибка, ИмяСлужбы)
                ;
            ;
        )
        
        ПравДостаточно = Истина
        
    ;
    
    возврат ПравДостаточно 

;

метод СлужбыЖдатьСостояния(ИмяСлужбы: Строка, ЖдатьОстановки: Булево)

    пер Запущена: Булево = новый Булево(СлужбыПолучитьЗначениеПараметра(ИмяСлужбы, ПеречислениеПараметрыСлужб.ЗАПУЩЕНА))
    пер ЛимитОжидания: Число = 60
    пер ЗначениеПаузы: Число = 2 
    
    пока ((Запущена и ЖдатьОстановки) или (не Запущена и не ЖдатьОстановки)) и ЛимитОжидания > 0 
        
        Запущена = новый Булево(СлужбыПолучитьЗначениеПараметра(ИмяСлужбы, ПеречислениеПараметрыСлужб.ЗАПУЩЕНА))
        ОбщиеПауза(ЗначениеПаузы)
        ЛимитОжидания -= ЗначениеПаузы
        
    ;
    
;

метод СлужбыЖдатьЗапуска(ИмяСлужбы: Строка)
    СлужбыЖдатьСостояния(ИмяСлужбы, Ложь)
;

метод СлужбыЖдатьОстановки(ИмяСлужбы: Строка)
    СлужбыЖдатьСостояния(ИмяСлужбы, Истина)
;

метод СлужбыОстановитьСлужбу(ИмяСлужбы: Строка, ЛимитВремени: Число)

    пер ВремяСтарта: ДатаВремя = ДатаВремя.Сейчас()

    пер ПараметрыСлужбы: СтруктураПараметрыСлужбы = СлужбыПодключиться(ИмяСлужбы, ЛимитВремени)
    
    если не ПараметрыСлужбы.Запущена
        ЛогИнформация("Service already stopped")
        возврат
    ;
    
    если не СлужбыПравДостаточно()
        возврат
    ;

    ЛогИнформация("Stopping service $ИмяСлужбы...")
        
    если ОбщиеТипОС() == ПеречислениеОперационнаяСистема.WINDOWS

        пер Процесс: ПроцессОс = новый ПроцессОс("sc" , ["stop", "\"" + ИмяСлужбы + "\""])
    
        ОбщиеЗапуститьПроцессОС(Процесс, 
            метод(КодОшибки: Число, ТекстОшибки: Строка) -> 
                если КодОшибки != 0
                    пер Ошибка: Строка = "Сan't stop service. Return code: $КодОшибки. $ТекстОшибки" 
                    ЛогОшибка(Ошибка)
                    выбросить новый ИсключениеОшибкаУправленияСлужбой(Ошибка, ИмяСлужбы)
                ;
            ;
        , 0, "cp866")
        
    иначе
    
        пер ПараметрыЗапуска: ЧитаемыйМассив<Строка> = ["call", "org.freedesktop.systemd1", ПараметрыСлужбы.Заголовок, "org.freedesktop.systemd1.Unit", "Stop", "s", "replace"]

        пер Процесс: ПроцессОс = новый ПроцессОс("busctl" , ПараметрыЗапуска)
        ОбщиеЗапуститьПроцессОС(Процесс, 
            метод(КодОшибки: Число, ТекстОшибки: Строка) -> 
                если КодОшибки != 0
                    пер Ошибка: Строка = "Сan't stop service. Return code: $КодОшибки. $ТекстОшибки" 
                    ЛогОшибка(Ошибка)
                    выбросить новый ИсключениеОшибкаУправленияСлужбой(Ошибка, ИмяСлужбы)
                ;
            ;,
            ЛимитВремени
        )
    
    ;
    
    СлужбыЖдатьОстановки(ИмяСлужбы)
    
    ЛогИнформация("Service stopped", ВремяСтарта)

;
метод СлужбыЗапуститьСлужбу(ИмяСлужбы: Строка, ЛимитВремени: Число)

    пер ВремяСтарта: ДатаВремя = ДатаВремя.Сейчас()

    пер ПараметрыСлужбы: СтруктураПараметрыСлужбы = СлужбыПодключиться(ИмяСлужбы, ЛимитВремени)
    
    если ПараметрыСлужбы.Запущена
        ЛогИнформация("Service already started")
        возврат
    ;
    
    если не СлужбыПравДостаточно()
        возврат
    ;

    ЛогИнформация("Starting service $ИмяСлужбы...")
        
    если ОбщиеТипОС() == ПеречислениеОперационнаяСистема.WINDOWS
    
        пер Процесс: ПроцессОс = новый ПроцессОс("sc" , ["start", "\"" + ИмяСлужбы + "\""])
    
        ОбщиеЗапуститьПроцессОС(Процесс, 
            метод(КодОшибки: Число, ТекстОшибки: Строка) -> 
                если КодОшибки != 0
                    пер Ошибка: Строка = "Сan't start service. Return code: $КодОшибки. $ТекстОшибки" 
                    ЛогОшибка(Ошибка)
                    выбросить новый ИсключениеОшибкаУправленияСлужбой(Ошибка, ИмяСлужбы)
                ;
            ;
        ,0, "cp866")
        
    иначе
    
        пер ПараметрыЗапуска: ЧитаемыйМассив<Строка> = ["call", "org.freedesktop.systemd1", ПараметрыСлужбы.Заголовок, "org.freedesktop.systemd1.Unit", "Start", "s", "replace"]

        пер Процесс: ПроцессОс = новый ПроцессОс("busctl" , ПараметрыЗапуска)
        ОбщиеЗапуститьПроцессОС(Процесс, 
            метод(КодОшибки: Число, ТекстОшибки: Строка) -> 
                если КодОшибки != 0
                    пер Ошибка: Строка = "Сan't start service. Return code: $КодОшибки. $ТекстОшибки" 
                    ЛогОшибка(Ошибка)
                    выбросить новый ИсключениеОшибкаУправленияСлужбой(Ошибка, ИмяСлужбы)
                ;
            ;,
            ЛимитВремени
        )
    
    ;
    
    СлужбыЖдатьЗапуска(ИмяСлужбы)
    ЛогИнформация("Service started", ВремяСтарта)

;

метод СлужбыЗначениеПараметраКоманднойСтроки(СтрокаЗапуска: Строка, ИмяПараметра: Строка, ТипЗначения: Тип, СимволыРазделители: Массив<Строка> = ["-", "/", "--"]): Строка|Число|Диапазон<Число>

    для Сч=1 по СимволыРазделители.Граница()
        СтрокаЗапуска = СтрокаЗапуска.Заменить(" " + СимволыРазделители[Сч] + ИмяПараметра + " ", " " + СимволыРазделители[0] + ИмяПараметра + " ")
        СтрокаЗапуска = СтрокаЗапуска.Заменить(" " + СимволыРазделители[Сч] + ИмяПараметра + "=", " " + СимволыРазделители[0] + ИмяПараметра + "=")
    ;
    
    пер Параметр = СимволыРазделители[0] + ИмяПараметра
    пер ЗначениеСтрокой: Строка = ""

    если СтрокаЗапуска.Содержит(Параметр + " ", Истина) или СтрокаЗапуска.Содержит(Параметр + "=", Истина) 
        ЗначениеСтрокой = СтрокаЗапуска.Разделить(Параметр)[1].Сократить()

        если ЗначениеСтрокой.НачинаетсяС("=")
            ЗначениеСтрокой = ЗначениеСтрокой.Подстрока(1)
        ;
        
        ЗначениеСтрокой = ЗначениеСтрокой.Сократить()

        если ЗначениеСтрокой.НачинаетсяС("\"")
            ЗначениеСтрокой = ЗначениеСтрокой.Подстрока(1, ЗначениеСтрокой.Найти("\"", 1))
        иначе
            ЗначениеСтрокой = ЗначениеСтрокой.Подстрока(0, ЗначениеСтрокой.Найти(" "))
        ;
    ;
    
    если ТипЗначения == Тип<Диапазон<Число>>
        если не ЗначениеСтрокой.Пусто()
            пер МассивДиапазона: Массив<Строка> = ЗначениеСтрокой.Заменить(" ", "").Разделить(":")
            возврат новый Диапазон<Число>(новый Число(МассивДиапазона[0]), новый Число(МассивДиапазона[1]))
        иначе
            возврат новый Диапазон<Число>(0, 0)
        ;
    иначе если ТипЗначения == Тип<Число> и не ЗначениеСтрокой.Пусто()
        если не ЗначениеСтрокой.Пусто()
            возврат новый Число(ЗначениеСтрокой)
        иначе
            возврат 0
        ;
    ;
    
    возврат ЗначениеСтрокой

;

метод СлужбыПоЗапускаемомуФайлу(ИмяФайла: Строка, ЛимитВремени: Число = 0): Массив<СтруктураПараметрыСлужбы>

    пер МассивСлужб: Массив<СтруктураПараметрыСлужбы> = новый Массив<СтруктураПараметрыСлужбы>()
    
    если ОбщиеТипОС() == ПеречислениеОперационнаяСистема.WINDOWS
    
        пер Процесс: ПроцессОс = новый ПроцессОс("wmic" , ["service", "get", "Name,PathName"])
        пер ПотокВыводаСтрокой: Строка = ОбщиеЗапуститьПроцессОС(Процесс, Неопределено, ЛимитВремени, "cp866")
        
        пер Данные: Массив<Строка> = ПотокВыводаСтрокой.Заменить("\r", "\n").Заменить("\n\n", "\n").Разделить("\n")
        для СтрокаДанных из Данные
            если не СтрокаДанных.Содержит(ИмяФайла, Истина)
                продолжить
            ;

            пер ОписаниеСлужбы: СтруктураПараметрыСлужбы = новый СтруктураПараметрыСлужбы()
            ОписаниеСлужбы.ИсполняемыйФайл = ИмяФайла
            
            пер ДанныеСтрокиЗапуска: Массив<Строка> = СтрокаДанных.Разделить(ИмяФайла)
            если ДанныеСтрокиЗапуска[0].НайтиСКонца("\"") >= 0
                ОписаниеСлужбы.Имя = ДанныеСтрокиЗапуска[0].Подстрока(0, ДанныеСтрокиЗапуска[0].НайтиСКонца("\"")).Сократить()
            иначе
                ОписаниеСлужбы.Имя = ДанныеСтрокиЗапуска[0].Подстрока(0, ДанныеСтрокиЗапуска[0].НайтиСКонца(" ")).Сократить()
            ;
            
            ОписаниеСлужбы.КоманднаяСтрока = СтрокаДанных.Заменить(ОписаниеСлужбы.Имя, "").Сократить()
            ДанныеСтрокиЗапуска = ОписаниеСлужбы.КоманднаяСтрока.Разделить(ИмяФайла)
            ОписаниеСлужбы.КоманднаяСтрока = ДанныеСтрокиЗапуска[0].Заменить("\"", "") + ИмяФайла
            
            ОписаниеСлужбы.ПараметрыЗапуска.Очистить()
            ОписаниеСлужбы.ПараметрыЗапуска.Вставить("ПортАгента", СлужбыЗначениеПараметраКоманднойСтроки(СтрокаДанных, "port", Тип<Число>))
            ОписаниеСлужбы.ПараметрыЗапуска.Вставить("ПортКластера", СлужбыЗначениеПараметраКоманднойСтроки(СтрокаДанных, "regport", Тип<Число>))
            ОписаниеСлужбы.ПараметрыЗапуска.Вставить("ДиапазонПортов", СлужбыЗначениеПараметраКоманднойСтроки(СтрокаДанных, "range", Тип<Диапазон<Число>>))
            ОписаниеСлужбы.ПараметрыЗапуска.Вставить("КаталогКластера", СлужбыЗначениеПараметраКоманднойСтроки(СтрокаДанных, "d", Тип<Строка>))
            
            МассивСлужб.Добавить(ОписаниеСлужбы)
            
        ;
        
    иначе
        
        для КаталогСлужб из ["/etc/systemd/system"]
            
            пер НастройкиПоиска: НастройкиПоиска = новый НастройкиПоиска()
            НастройкиПоиска.ИмяСодержит(".service")
            НастройкиПоиска.ИсключитьКаталоги(Истина)
            
            для ФайлСлужбы из Файлы.Найти(КаталогСлужб, НастройкиПоиска)
                
                исп ПотокЧтения: ПотокЧтения = ФайлСлужбы.ОткрытьПотокЧтения()
                пер ДанныеСтрокой: Строка = ПотокЧтения.ПрочитатьКакСтроку().Заменить("\r", "\n").Заменить("\n\n", "\n").Заменить("\\\n", "")
                
                если не ДанныеСтрокой.Содержит("ExecStart=")
                    продолжить
                ;
                
                пер СтрокаЗапуска: Строка = ДанныеСтрокой.Разделить("ExecStart=")[1].Разделить("\n")[0]
                пер ИсполняемыйФайл: Строка = СтрокаЗапуска.Разделить(" ")[0]
                если не ИсполняемыйФайл.Содержит(ИмяФайла)
                    продолжить
                ;
                
                пер ОписаниеСлужбы: СтруктураПараметрыСлужбы = новый СтруктураПараметрыСлужбы()
                ОписаниеСлужбы.ИсполняемыйФайл = ИмяФайла
                ОписаниеСлужбы.Имя = ФайлСлужбы.ИмяБезРасширения.Заменить("@default", "").Заменить("@", "")
                ОписаниеСлужбы.ПараметрыЗапуска.Очистить()
                
                для СтрокаДанных из ДанныеСтрокой.Разделить("\n")
                    если СтрокаДанных.НачинаетсяС("Environment=")
                        пер ДанныеПеременной: Массив<Строка> = СтрокаДанных.Разделить("=", Истина)
                        СтрокаЗапуска = СтрокаЗапуска.Заменить("\${" + ДанныеПеременной[1] + "}", ДанныеПеременной[2])
                    ;
                ;
                
                ОписаниеСлужбы.ПараметрыЗапуска.Вставить("ПортАгента", СлужбыЗначениеПараметраКоманднойСтроки(СтрокаЗапуска, "port", Тип<Число>))
                ОписаниеСлужбы.ПараметрыЗапуска.Вставить("ПортКластера", СлужбыЗначениеПараметраКоманднойСтроки(СтрокаЗапуска, "regport", Тип<Число>))
                ОписаниеСлужбы.ПараметрыЗапуска.Вставить("ДиапазонПортов", СлужбыЗначениеПараметраКоманднойСтроки(СтрокаЗапуска, "range", Тип<Диапазон<Число>>))
                ОписаниеСлужбы.ПараметрыЗапуска.Вставить("КаталогКластера", СлужбыЗначениеПараметраКоманднойСтроки(СтрокаЗапуска, "d", Тип<Строка>))
                ОписаниеСлужбы.КоманднаяСтрока = СтрокаЗапуска
                
                если не МассивСлужб.Содержит(ОписаниеСлужбы)
                    МассивСлужб.Добавить(ОписаниеСлужбы)
                ;
                
            ;
            
        ;
        
    ;
    
    возврат МассивСлужб 

;

метод СлужбыНайтиСлужбыПоШаблонам(МассивШаблонов: Массив<Строка>): Массив<Строка>

    пер МассивИменСлужб: Массив<Строка> = []
    
    если ОбщиеТипОС() == ПеречислениеОперационнаяСистема.WINDOWS

        для Сч = 0 по МассивШаблонов.Размер() - 1
            МассивШаблонов[Сч] = "Name like '\%${МассивШаблонов[Сч]}\%'"
        ;
        
        пер Процесс: ПроцессОс = новый ПроцессОс("wmic" , ["service", "where", Строки.Соединить(МассивШаблонов, " OR "), "get", "Name"])
        пер ПотокВыводаСтрокой: Строка = ОбщиеЗапуститьПроцессОС(Процесс, Неопределено, 0, "cp866")
        пер МассивОтвета: Массив<Строка> = ОбщиеТекстВМассив(ПотокВыводаСтрокой)
        
        если МассивОтвета.Размер() > 1 и МассивОтвета[0].Сократить() == "Name"
            МассивОтвета.УдалитьПоИндексу(0)
            для ИмяСлужбы из МассивОтвета
                МассивИменСлужб.Добавить(ИмяСлужбы.Сократить())
            ;
        ; 
        
    иначе
    
        для КаталогСлужб из ["/etc/systemd/system"]
            
            пер НастройкиПоиска: НастройкиПоиска = новый НастройкиПоиска()
            НастройкиПоиска.ИмяСодержит(".service")
            НастройкиПоиска.ИсключитьКаталоги(Истина)
            
            для ФайлСлужбы из Файлы.Найти(КаталогСлужб, НастройкиПоиска)
                если МассивШаблонов.Содержит(ФайлСлужбы.ИмяБезРасширения)
                    МассивИменСлужб.Добавить(ФайлСлужбы.ИмяБезРасширения)
                ;
            ;

        ;
    
    ;
    
    возврат МассивИменСлужб

;


// #конец_импорта


///////////////////////////////////////////////////////////////////
// ПРИВАТНАЯ ЧАСТЬ
///////////////////////////////////////////////////////////////////


структура СтруктураПараметров
    // общие
    пер Задержка: Число = 0
    пер ВремяСтарта: ДатаВремя = ДатаВремя{2000-01-01}
    пер ЛимитВремени: Число = 0

    // параметры скрипта
    пер ИмяСлужбы: Строка = ""
;

метод ПолучитьПараметры(СоответствиеПараметров: Соответствие<Строка, Строка>): СтруктураПараметров

    пер Параметры = новый СтруктураПараметров()
    
    Параметры.ВремяСтарта = ДатаВремя.Сейчас()

    Параметры.ИмяСлужбы = ОбщиеЗначениеПараметраСтрока(СоответствиеПараметров, "name")
    
    Параметры.ЛимитВремени = ОбщиеЗначениеПараметраЧисло(СоответствиеПараметров, "time-limit")
    Параметры.Задержка = ОбщиеЗначениеПараметраЧисло(СоответствиеПараметров, "max-delay")
    
    возврат Параметры

;



///////////////////////////////////////////////////////////////////
// ТОЧКА ВХОДА
///////////////////////////////////////////////////////////////////


метод Скрипт(СоответствиеПараметров: Соответствие<Строка, Строка>): Число

    // Тестовый режим.
    если ОбщиеЗначениеПараметраБулево(СоответствиеПараметров, "test-mode")
        ЛогИнформация("Test mode completed successfully")
        возврат 0
    ;

    ЛогСтарт()

    пер Параметры = ПолучитьПараметры(СоответствиеПараметров)
    
    ОбщиеПроверитьОбязательныеПараметры(Параметры, [
              новый СтруктураПроверкиПараметра("name", Параметры.ИмяСлужбы, () -> (не Параметры.ИмяСлужбы.Пусто()))  
        ]
    )
    
    // Случайная задержка перед выполнением операции
    если Параметры.Задержка > 0
        ОбщиеПауза(Параметры.Задержка, Истина)
    ;

    Параметры.ВремяСтарта = ДатаВремя.Сейчас()

    если СлужбыПравДостаточно()
    
        пер ПараметрыСлужбы: СтруктураПараметрыСлужбы = СлужбыПодключиться(Параметры.ИмяСлужбы, Параметры.ЛимитВремени)
        если ПараметрыСлужбы.Запущена
            СлужбыОстановитьСлужбу(Параметры.ИмяСлужбы, Параметры.ЛимитВремени)
        ;
    
        СлужбыУдалить(Параметры.ИмяСлужбы)
        
    ;

    ОбщиеВремяИстекло(Параметры.ВремяСтарта, Параметры.ЛимитВремени)

    ЛогИнформация("Finished", Параметры.ВремяСтарта)
    возврат 0
  
;
