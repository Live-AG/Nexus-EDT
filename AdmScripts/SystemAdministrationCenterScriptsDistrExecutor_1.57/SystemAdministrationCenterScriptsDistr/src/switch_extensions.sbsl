// #импорт include/common.sbsl

///////////////////////////////////////////////////////////////////
// ИСКЛЮЧЕНИЯ И СТРУКТУРЫ
///////////////////////////////////////////////////////////////////

исключение ИсключениеВремениВыполнения
;

исключение ИсключениеТаймаут
    пер Таймаут: Число
;

исключение ИсключениеФайлНеНайден
    пер КаталогПуть: Строка
;

исключение ИсключениеКаталогОказалсяФайлом
    пер КаталогПуть: Строка
;

исключение ИсключениеОтсутствуютОбязательныеПараметры
;

структура СтруктураПроверкиПараметра
    пер ИмяПараметра: Строка = "" 
    обз пер Значение: Строка|Число|ДатаВремя
    обз пер ФункцияПроверки: ()->Булево
;

перечисление ПеречислениеОперационнаяСистема
    WINDOWS
    LINUX
    LINUX_DEB
    LINUX_RPM
;


///////////////////////////////////////////////////////////////////
// ОБЩИЕ
///////////////////////////////////////////////////////////////////


метод ОбщиеВремяИстекло(ВремяСтарта: ДатаВремя, ЛимитВремени: Число)

    если ЛимитВремени == 0 или ВремяСтарта <= ДатаВремя{2000-01-01}
        возврат
    ;

    если (ДатаВремя.Сейчас() - ВремяСтарта).Секунды > ЛимитВремени
        пер Ошибка = "Time limit expired: $ЛимитВремени sec." 
        ЛогОшибка(Ошибка)
        выбросить новый ИсключениеТаймаут(Ошибка, ЛимитВремени)
    ;

;

метод ОбщиеПодходитПодШаблон(ПроверяемаяСтрока: Строка, Шаблон: Строка, ИнвертироватьШаблон: Булево): Булево

    пер Подходит = Ложь

    пер регВыражение = новый Образец(Шаблон)

    если ИнвертироватьШаблон
        Подходит = (регВыражение.НайтиСовпадения(ПроверяемаяСтрока).Размер() == 0)
    иначе
        Подходит = (регВыражение.НайтиСовпадения(ПроверяемаяСтрока).Размер() > 0)
    ;
    
    возврат Подходит

;

метод ОбщиеЭтоАрхив(Путь: Строка): Булево

    пер ЭтоАрхив: Булево = Путь.ВНижнийРегистр().ЗаканчиваетсяНа(".zip")
                            или Путь.ВНижнийРегистр().ЗаканчиваетсяНа(".rar")
                            или Путь.ВНижнийРегистр().ЗаканчиваетсяНа(".gz")
    
    возврат ЭтоАрхив

;

метод ОбщиеДобавитьРазделитель(Путь: Строка): Строка
  возврат Путь.ЗаканчиваетсяНа(Файлы.СимволРазделителя) ? Путь : Путь + Файлы.СимволРазделителя
;

метод ОбщиеУбратьПоследнийРазделитель(Путь: Строка): Строка
  возврат Путь.ЗаканчиваетсяНа(Файлы.СимволРазделителя) ? Путь.ПодстрокаСНачала(Путь.Длина() - 1) : Путь
;

метод ОбщиеПроверитьОбязательныеПараметры(Параметры: СтруктураПараметров, ПроверкиПараметров: ЧитаемыйМассив<СтруктураПроверкиПараметра>)

    пер ЕстьОшибки: Булево = Ложь
    
    для ПроверкаПараметра из ПроверкиПараметров
    
        если не ПроверкаПараметра.ФункцияПроверки()

            пер ИмяПараметра = ПроверкаПараметра.ИмяПараметра
            пер Значение = ПроверкаПараметра.Значение
            
            ЛогОшибка("Parameter error: $ИмяПараметра, value: $Значение")
            ЕстьОшибки = Истина
            
        ;
    
    ;
    
    если ЕстьОшибки
        выбросить новый ИсключениеОтсутствуютОбязательныеПараметры("FAIL: parameters check")
    ;
    
;

метод ОбщиеЗначениеПараметраБулево(СоответствиеПараметров: Соответствие<Строка, Строка>, Ключ: Строка, ЗначениеПоумолчанию: Булево = Ложь): Булево

    пер Результат = ЗначениеПоумолчанию

    попытка
    
        пер Значение = СоответствиеПараметров[Ключ] 
        
        выбор Значение.ВНижнийРегистр()
        когда "истина"
            Результат = Истина
        когда "true"
            Результат = Истина
        когда "1"
            Результат = Истина
        когда "on"
            Результат = Истина
        когда "да"
            Результат = Истина
        когда "yes"
            Результат = Истина
        когда "вкл"
            Результат = Истина
        когда "вкл."
            Результат = Истина
        когда "включено"
            Результат = Истина
        иначе
            Результат = Ложь
        ;
        
    поймать Исключение: Исключение
        Результат = ЗначениеПоумолчанию
    ;
    
    возврат Результат

;

метод ОбщиеЗначениеПараметраЧисло(СоответствиеПараметров: Соответствие<Строка, Строка>, Ключ: Строка, ЗначениеПоУмолчанию: Число = 0): Число

    пер Результат = ЗначениеПоУмолчанию

    попытка
        пер Значение = СоответствиеПараметров[Ключ] 
        Результат = новый Число(Значение)
    поймать Исключение: Исключение
        Результат = ЗначениеПоУмолчанию
    ;
    
    возврат Результат

;

метод ОбщиеЗначениеПараметраСтрока(СоответствиеПараметров: Соответствие<Строка, Строка>, Ключ: Строка, ЗначениеПоУмолчанию: Строка = ""): Строка

    пер Результат = ЗначениеПоУмолчанию

    попытка
        пер Значение = СоответствиеПараметров[Ключ] 
        Результат = Значение.ВСтроку()

        если Результат.Сравнить("null", Истина) == 0
            Результат = ЗначениеПоУмолчанию
        ;
        
    поймать Исключение: Исключение
        Результат = ЗначениеПоУмолчанию
    ;
    
    возврат Результат

;

метод ОбщиеПауза(ПаузаСекунд: Число, Случайная: Булево = Ложь)

    пер ПаузаРеальная = ПаузаСекунд
    
    если Случайная
    
        пер ГСЧ = новый СлучайныйГенератор(ДатаВремя.Сейчас().Миллисекунда)
        ПаузаРеальная = ГСЧ.СлучайноеЦелое(0, ПаузаСекунд)

    ;
    
    ПаузаРеальная = ПаузаРеальная == 0 ? ПаузаСекунд : ПаузаРеальная

    если Случайная
        
        ЛогИнформация("Selected delay $ПаузаРеальная sec.")
        
    ;
    
    Пауза(новый Длительность(0, 0, ПаузаРеальная))
    
;

метод ОбщиеТипОС(УточнятьТипLinux: Булево = Ложь): ПеречислениеОперационнаяСистема

    пер ТипОС: ПеречислениеОперационнаяСистема = СредаИсполнения.ПолучитьПеременную("OS").Содержит("Windows", Истина) ? ПеречислениеОперационнаяСистема.WINDOWS : ПеречислениеОперационнаяСистема.LINUX
    
    если ТипОС == ПеречислениеОперационнаяСистема.LINUX и УточнятьТипLinux
        
        ТипОС = ПеречислениеОперационнаяСистема.LINUX_DEB
        
        пер Процесс: ПроцессОс = новый ПроцессОс("dpkg", ["--version"])
        
        попытка
            Процесс.Запустить()
            Процесс.ПолучитьПотокВывода().ПрочитатьКакСтроку()
        поймать Игнорировать: Исключение
            ТипОС = ПеречислениеОперационнаяСистема.LINUX_RPM
        ; 
        
    ;
    
    возврат ТипОС
    
;

метод ОбщиеАрхитектураОС(): Число
    если СредаИсполнения.ПолучитьСвойство("os.arch").Содержит("64")
        возврат 64
    иначе
        возврат 32
    ;
;

метод ОбщиеНайтиФайл(Путь: Строка|Файл, ИмяФайла: Строка): Файл?

    пер НайденныйФайл: Файл? = Неопределено
    
    пер НастройкиПоиска: НастройкиПоиска = новый НастройкиПоиска()
    НастройкиПоиска.ИмяСодержит(ИмяФайла)
    НастройкиПоиска.ИсключитьКаталоги(Истина)
    
    пер МассивФайлов: ЧитаемыйМассив<Файл> = Файлы.Найти(Путь, НастройкиПоиска)
    для Файл из МассивФайлов
        если Файл.Имя == ИмяФайла
            НайденныйФайл = Файл
            прервать
        ;
    ;

    возврат НайденныйФайл
;

метод ОбщиеФайлСкрипта(): Файл
    пер ФайлСкрипта: Файл = новый Файл(Скрипт.ПутьТекущегоСкрипта)
    возврат ФайлСкрипта
;

метод ОбщиеКаталогСкрипта(): Строка
    пер ФайлСкрипта: Файл? = ОбщиеФайлСкрипта()
    возврат (ФайлСкрипта != Неопределено ? ФайлСкрипта.Каталог.Путь : "")
;

метод ОбщиеЗапуститьПроцессОС(Процесс: ПроцессОс, ОбработкаОшибок: ((Число, Строка)->void)? = Неопределено, ЛимитВремени: Число = 0, Кодировка: Строка = "UTF-8", ОжидатьЗавершения: Булево = Истина): Строка

    пер Ошибка: Строка = ""
    пер ФайлПотокаВывода = Файлы.СоздатьВременныйФайл("ex_")
    пер ПотокВывода: Строка = ""
    
    Процесс.Запустить()
	если не ОжидатьЗавершения
		возврат ПотокВывода
	;
    
    пер ВсеОк: Булево = Истина
    
    если ЛимитВремени > 0  
        ВсеОк = Процесс.ОжидатьЗавершения(Длительность.ИзСекунд(ЛимитВремени))
    иначе если ЛимитВремени == -1
        ВсеОк = Истина
        возврат ""
    иначе
        ВсеОк = Процесс.ОжидатьЗавершения()
    ;
    
    если не ВсеОк
        Ошибка = "Timeout expired: " + ЛимитВремени
        ЛогОшибка(Ошибка)
        выбросить новый ИсключениеТаймаут(Ошибка, ЛимитВремени)
    ;        

    пер КодОшибки: Число? = Процесс.ПолучитьКодВозврата()
    если КодОшибки == Неопределено
        КодОшибки = 0
    ;

    ПотокВывода = Процесс.ПолучитьПотокВывода().ПрочитатьКакСтроку(Кодировка)
    Ошибка = Процесс.ПолучитьПотокОшибок().ПрочитатьКакСтроку()

    если КодОшибки != 0 или не Ошибка.Пусто()
        если ОбработкаОшибок == Неопределено
            пер ТекстОшибки: Строка = "Return code: $КодОшибки. $Ошибка" 
            ЛогОшибка(ПотокВывода + ТекстОшибки)
            выбросить новый ИсключениеВремениВыполнения(ТекстОшибки)
        иначе
            ОбработкаОшибок(КодОшибки, ПотокВывода + "\n" + Ошибка)
        ;
    ;
    
    возврат ПотокВывода
    
;

метод ОбщиеЗапуститьКаскадПроцессов(Параметры: ЧитаемыйМассив<ЧитаемыйМассив<Строка>>): Строка

    пер Вывод: Строка = ""
    пер Вход: Строка = ""

    для ОписаниеКоманды из Параметры
        
        пер Команда: Строка = ОписаниеКоманды[0]
        пер ПараметрыКоманды: ЧитаемыйМассив<Строка> = (Параметры.Размер() > 1 ? ОписаниеКоманды.ПодМассив(1) : [])
        
        пер Процесс: ПроцессОс = новый ПроцессОс(Команда , ПараметрыКоманды)
        Процесс.Запустить()
        Процесс.ПолучитьПотокВвода().Записать(Вход).Закрыть()
        Вывод = Процесс.ПолучитьПотокВывода().ПрочитатьКакСтроку()
        Вход = Вывод
    ;
        
    возврат Вывод
        
;


метод ОбщиеУбратьГраничныеСимволы(Текст: Строка, Символ: Строка): Строка

    если Текст.НачинаетсяС(Символ)
        Текст = Текст.Подстрока(1)
    ;
    
    если Текст.ЗаканчиваетсяНа(Символ)
        Текст = Текст.Подстрока(0, Текст.Длина() - Мин(1, Текст.Длина()))
    ;
    
    возврат Текст

;

метод ОбщиеКодироватьВURL(Данные: Строка): Строка

    пер ДанныеКодированные: Массив<Строка>

    пер КодируемыеСимволы: Строка = ":/?#[]@!$&'()*+,;=ёйцукенгшщзхъфывапролджэячсмитьбюЁЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮ"
    пер ДекодируемыеСимволы: Строка = "#3A#2F#3F#23#5B#5D#40#21#24#26#27#28#29#2A#2B#2C#3B#3D#D1#91#D0#B9#D1#86#D1#83#D0#BA#D0#B5#D0#BD#D0#B3#D1#88#D1#89#D0#B7#D1#85#D1#8A#D1#84#D1#8B#D0#B2#D0#B0#D0#BF#D1#80#D0#BE#D0#BB#D0#B4#D0#B6#D1#8D#D1#8F#D1#87#D1#81#D0#BC#D0#B8#D1#82#D1#8C#D0#B1#D1#8E#D0#81#D0#99#D0#A6#D0#A3#D0#9A#D0#95#D0#9D#D0#93#D0#A8#D0#A9#D0#97#D0#A5#D0#AA#D0#A4#D0#AB#D0#92#D0#90#D0#9F#D0#A0#D0#9E#D0#9B#D0#94#D0#96#D0#AD#D0#AF#D0#A7#D0#A1#D0#9C#D0#98#D0#A2#D0#AC#D0#91#D0#AE"
    пер ДекодируемыеСимволыМассив: Массив<Строка> = ДекодируемыеСимволы.Разделить("#")
    
    для Символ из Данные
        пер Позиция = КодируемыеСимволы.Найти(Символ)
        если Позиция >= 0
            ДанныеКодированные.Добавить("%" + ДекодируемыеСимволыМассив[Позиция])
        иначе
            ДанныеКодированные.Добавить(Символ)
        ;
    ;
    
    
    возврат Строки.Соединить(ДанныеКодированные, "")
    
;

метод ОбщиеАрхитектураEXE(ФайлEXE: Файл): Число

    исп ПотокЧтения: ПотокЧтения = ФайлEXE.ОткрытьПотокЧтения()
    пер ЧтениеДанных: ЧтениеДанных = новый ЧтениеДанных(ПотокЧтения)
    пер ПозицияPE: Число = ЧтениеДанных.ПропуститьДо("PE")
    если ПозицияPE < 200 или ПозицияPE > 400
        возврат 0
    ;
    
    ЧтениеДанных.Пропустить(2)
    пер Разрядность: Число? = ЧтениеДанных.ПрочитатьЦелое16()
    если Разрядность == 0x4c01
        возврат 32
    иначе если Разрядность == 0x6486
        возврат 64
    ;
    
    возврат 0

;

метод ОбщиеВерсияEXE(ФайлEXE: Файл): Строка

    пер Процесс: ПроцессОс = новый ПроцессОс("wmic" , ["datafile", "where", "Name=\"" + ФайлEXE.Путь.Заменить("\\", "\\\\")  + "\"", "get", "Version", "/value"])
    пер Данные: Строка = ОбщиеЗапуститьПроцессОС(Процесс, Неопределено,  0, "cp866")
    
    пер Версия: Строка = Данные
        .Заменить("\r", "")
        .Заменить("\n", "")
        .Сократить()
        .Разделить("=")[1]
    
    возврат Версия

;


метод ОбщиеТекстВМассив(Текст: Строка, ВключаяПустые: Булево = Ложь): Массив<Строка>
    возврат Текст.Заменить("\r\n", "\n").Заменить("\r", "\n").Разделить("\n", ВключаяПустые)
;

метод ОбщиеОчиститьКаталог(Каталог: Файл|Строка, СоздаватьЕслиОтсутствует: Булево = Истина)
    
    пер КаталогФайл: Файл = (Каталог это Строка) ? новый Файл(Каталог как Строка) : Каталог как Файл
    
    если КаталогФайл.Существует() и не КаталогФайл.ЯвляетсяКаталогом()
        выбросить новый ИсключениеКаталогОказалсяФайлом("Destination path exists and not a directory", КаталогФайл.Путь)
    ;
    
    если КаталогФайл.Существует()
    
        пер МассивФайлов = новый Массив(Файлы.Найти(КаталогФайл, новый НастройкиПоиска().МаксимальнаяГлубина(1)))
        для Файл из МассивФайлов
            Файлы.Удалить(Файл, Истина)
        ;
    
    иначе если СоздаватьЕслиОтсутствует
        Файлы.СоздатьКаталог(Каталог)
    ;
    
;

метод ОбщиеРаспаковатьАрхив(ФайлАрхива: Файл, Каталог: Файл|Строка, ЛимитВремени: Число = 0)

    пер КаталогПриемник: Файл = (Каталог это Строка) ? новый Файл(Каталог как Строка) : Каталог как Файл

    пер ФайлRAR: Файл = новый Файл(ОбщиеДобавитьРазделитель(ОбщиеКаталогСкрипта())
        + Файлы.СимволРазделителя + ".." + Файлы.СимволРазделителя   
        + "external_utils" + Файлы.СимволРазделителя 
        + "unrar" + Файлы.СимволРазделителя
        + "unrar" + (ОбщиеТипОС() == ПеречислениеОперационнаяСистема.WINDOWS ? ".exe" : ""))
    
    если ФайлАрхива.Расширение.ВНижнийРегистр() == "rar" и не ФайлRAR.Существует()
        пер Ошибка: Строка = "Cannot find unrar."
        ЛогОшибка(Ошибка)
        выбросить новый ИсключениеФайлНеНайден(Ошибка, ФайлRAR.Путь)        
    ;
    
    если ФайлАрхива.Расширение == "zip"
        
        пер ФайлZip = новый ФайлZip(ФайлАрхива.Путь)
        ФайлZip.ИзвлечьВсе(КаталогПриемник)
        
    иначе если ФайлАрхива.Расширение == "rar"

        пер ПараметрыЗапуска: ЧитаемыйМассив<Строка> = новый ЧитаемыйМассив<Строка>(["x", "\"" + ФайлАрхива.Путь + "\"", "\"" + КаталогПриемник + "\""])
        пер Процесс: ПроцессОс = новый ПроцессОс(ФайлRAR.Путь, ПараметрыЗапуска)
        
        ОбщиеЗапуститьПроцессОС(Процесс, 
            метод(КодОшибки: Число, ТекстОшибки: Строка) -> 
                если КодОшибки != 0 или не ТекстОшибки.Пусто()
                    пер Ошибка: Строка = "UnRAR error. Return code: $КодОшибки. $ТекстОшибки" + "\n" + ФайлRAR.Путь + " " + Строки.Соединить(ПараметрыЗапуска, " ")  
                    ЛогОшибка(Ошибка)
                    выбросить новый ИсключениеВремениВыполнения(Ошибка)
                ;
            ;
        , ЛимитВремени, "cp866")
    
    иначе если ФайлАрхива.Расширение == "gz"
        
        пер Процесс: ПроцессОс = новый ПроцессОс("tar" , ["-xzf", ФайлАрхива.Путь, "-C", КаталогПриемник])
        ОбщиеЗапуститьПроцессОС(Процесс, Неопределено,  ЛимитВремени)
        
    ;
    
;

метод ОбщееПолучитьИнтерактивнуюСессиюПользователя(Пользователь: Строка): Строка
    пер МассивПараметров: Массив<Строка> = []
    пер ИдентификаторСессии = "-1"
    
    пер ЧастиИмениПользователя = Пользователь.Разделить("\\")
    пер ИмяПользователя = ЧастиИмениПользователя[0]

    если ЧастиИмениПользователя.Размер() > 1
        ИмяПользователя = ЧастиИмениПользователя[1]
    ;

    МассивПараметров.Добавить("query")
    МассивПараметров.Добавить("session")
    МассивПараметров.Добавить(ИмяПользователя)
    МассивПараметров.Добавить("|")
    МассивПараметров.Добавить("select")
    МассивПараметров.Добавить("-skip")
    МассивПараметров.Добавить("1")
    МассивПараметров.Добавить("-first")
    МассивПараметров.Добавить("1")

    пер Процесс: ПроцессОс = новый ПроцессОс("powershell", МассивПараметров, Истина)

    попытка 
        ОбщиеЗапуститьПроцессОС(Процесс, Неопределено, 0, "cp866", Ложь)
        Процесс.ОжидатьЗавершения()

        пер ПотокВывода = Процесс.ПолучитьПотокВывода()

        пер ТекстВывода = ПотокВывода.ПрочитатьКакСтроку("cp866")
        пер СтрокиВывода = ОбщиеТекстВМассив(ТекстВывода)

        для ТекущаяСтрока из СтрокиВывода
            пер ДанныеСтрокиВывода = ТекущаяСтрока.Разделить(" ")

            если ДанныеСтрокиВывода.Размер() > 2
                ИдентификаторСессии = ДанныеСтрокиВывода[2]
            ;
        ;

        ЛогИнформация(ТекстВывода)

    поймать Исключение: Исключение
        выбросить Исключение
    ;

    возврат ИдентификаторСессии
;

метод ОбщееПолучитьАдресSOAPСервиса(АдресВебСервера: Строка, ИмяПубликации: Строка, Сервис: Строка): Строка
    возврат "%{АдресВебСервера}/%{ИмяПубликации}/ws/%{Сервис}.1cws"
;

метод ОбщееВыполнитьSOAPЗапрос(АдресSOAPСервиса: Строка, Запрос: Строка, Пользователь: Строка = "", Пароль: Строка = ""): Строка
    
    пер Аутентификация: АутентификацияHttp = новый АутентификацияHttp(Пользователь, Пароль)
    пер UserAgent = "1C+Enterprise/8.3"

    исп Ответ: ОтветHttp = КлиентHttp.САутентификацией(Аутентификация)
        .СБазовымUrl(АдресSOAPСервиса)
        .ЗапросPost("")
        .УстановитьТело(Запрос)
        .ДобавитьЗаголовок("User-Agent", UserAgent)
        .ДобавитьЗаголовок("Accept", "*/*")
        .УстановитьТипСодержимого("application/soap+xml")
        .УстановитьТаймаутЗапроса(60с)
        .УстановитьТаймаутСоединения(60с)
        .Выполнить()

    если Ответ.КодСостояния == 200
        возврат Ответ.Тело.ПрочитатьКакСтроку()
    иначе
        выбросить новый ИсключениеВремениВыполнения("Response was returned with status code: %{Ответ.КодСостояния}; Message: %{Ответ.Тело.ПрочитатьКакСтроку()}")
    ;

    возврат ""
;

метод ОбщееНайтиИсполняемыйФайлПлатформы(ПутьКПлатформе: Строка, ИмяИсполняемогоФайла: Строка): Строка
    пер ЭтоWindows = (ОбщиеТипОС() == ПеречислениеОперационнаяСистема.WINDOWS)
    пер НастройкиПоискаДиректорииBin = новый НастройкиПоиска()
        .ИмяСодержит("bin")
        .ИсключитьФайлы(Истина)
    пер ДиректорияBin = ""

    если не Файлы.Найти(ОбщиеУбратьПоследнийРазделитель(ПутьКПлатформе), НастройкиПоискаДиректорииBin).Пусто()
         ДиректорияBin = ОбщиеДобавитьРазделитель("bin")

    ;

    пер ПутьКДиректорииBin = "${ОбщиеДобавитьРазделитель(ПутьКПлатформе)}%{ДиректорияBin}"
    ПутьКДиректорииBin = ОбщиеУбратьПоследнийРазделитель(ПутьКДиректорииBin)

    пер Расширение = (ЭтоWindows ? ".exe" : "")
    пер ПутьКФайлу = "${ОбщиеДобавитьРазделитель(ПутьКДиректорииBin)}%{ИмяИсполняемогоФайла}%{Расширение}"

    возврат новый Файл(ПутьКФайлу).Путь
;
// #конец_импорта


// #импорт include/logger.sbsl


///////////////////////////////////////////////////////////////////
// ЛОГГЕР
///////////////////////////////////////////////////////////////////

метод ЛогСтарт()

    пер КаталогЛога = новый Файл(ОбщиеДобавитьРазделитель(ОбщиеКаталогСкрипта()) + "script_logs")
    если не КаталогЛога.Существует()
        Файлы.СоздатьКаталог(КаталогЛога)
    ;

    пер PID = "7777"

    пер ЛогДатаВремя = ДатаВремя.Сейчас().Представление("ггММдд_ЧЧммсс_")
    пер ИмяФайлаЛога = ОбщиеФайлСкрипта().ИмяБезРасширения + "_" + ЛогДатаВремя + PID + ".log"

    пер ФайлЛога = новый Файл(ОбщиеДобавитьРазделитель(КаталогЛога.Путь) + ИмяФайлаЛога)
    если не ФайлЛога.Существует()
        исп ПотокЗаписи = ФайлЛога.ОткрытьПотокЗаписи()
        ПотокЗаписи.СброситьБуферы()
        ПотокЗаписи.Закрыть()
    ;

    ЛогИнформация("Started")
    
;

метод НайтиТекущийФайлЛога(): Файл?

    пер МассивНайденныхФайлов = новый Массив(Файлы.Найти(ОбщиеДобавитьРазделитель(ОбщиеКаталогСкрипта()) + "script_logs",
        новый НастройкиПоиска()
            .ИмяСодержит(ОбщиеФайлСкрипта().ИмяБезРасширения)
            .ИсключитьКаталоги(Истина)
            .МаксимальнаяГлубина(1)
        ))

    если МассивНайденныхФайлов.Размер() > 0 
        МассивНайденныхФайлов.Сортировать((о1:Файл,о2:Файл) -> (о1.ИмяБезРасширения>о2.ИмяБезРасширения ? -1 : 1))
        возврат МассивНайденныхФайлов[0]
    иначе
        возврат Неопределено
    ;

;

метод ЛогВывод(ЛогУровень: Строка, ДатаВремяНачала: ДатаВремя? = Неопределено, ЛогТекст: Строка, Ошибка: Булево = Ложь)
    
    пер ЛогДлительность: Число = (ДатаВремяНачала != Неопределено ? (ДатаВремя.Сейчас() - ДатаВремяНачала).ВМиллисекундах() : 0)
    пер ЛогДатаВремя = ДатаВремя.Сейчас().Представление("гггг-ММ-дд ЧЧ:мм:сс.ССС")

    пер СтрокаЛог = "$ЛогДатаВремя-$ЛогДлительность [$ЛогУровень] $ЛогТекст"
    
    если Ошибка
        Консоль.ЗаписатьОшибку(СтрокаЛог)
    иначе
        Консоль.Записать(СтрокаЛог)
    ;

    пер ФайлЛога = НайтиТекущийФайлЛога()
    если ФайлЛога != Неопределено
        исп ПотокЗаписи = ФайлЛога.ОткрытьПотокЗаписи(Истина)
        ПотокЗаписи.Записать(СтрокаЛог + "\r\n")
    ;
    
;

@Глобально
метод ЛогИнформация(ЛогТекст: Строка, ДатаВремяНачала: ДатаВремя? = Неопределено)
    
    пер ЛогУровень = "INFO"
    ЛогВывод(ЛогУровень, ДатаВремяНачала, ЛогТекст)
    
;

метод ЛогОшибка(ЛогТекст: Строка, ДатаВремяНачала: ДатаВремя? = Неопределено)
    
    пер ЛогУровень = "ERROR"
    ЛогВывод(ЛогУровень, ДатаВремяНачала, ЛогТекст, Истина)
    
;

// #конец_импорта

///////////////////////////////////////////////////////////////////
// ПРИВАТНАЯ ЧАСТЬ
///////////////////////////////////////////////////////////////////

структура СтруктураПараметров
    // общие
    пер Задержка = 0
    пер ВремяСтарта = ДатаВремя{2000-01-01}
    пер ЛимитВремени = 0

    // параметры скрипта
    пер ПутьКПлатформе = ""
    пер АктивностьРасширений = Ложь

    пер Язык = "ru"
    пер КодДоступа = ""
    пер Сервер = ""
    пер ИнформационнаяБаза = ""
    пер ПутьКФайловойБазе = ""
    пер Пользователь = ""
    пер Пароль = ""
    пер Порт = 1541
    пер АдресАгентаКонфигуратора = "localhost"
    пер ПортАгентаКонфигуратора = 1543
    пер ПутьКФайлуСОписаниемРасширений: Строка = ""
;

структура РезультатКоманды
    пер Результат = Ложь
    пер Сообщение = ""
    пер Тело = ""

    статический метод Прочитать(РезультатКоманды: Строка, ОтветВJson: Булево): РезультатКоманды
        пер Результат = новый РезультатКоманды()

        пер ОтветКоманды =  новый Соответствие<Строка, Объект?>() 
        пер РезультатВыполнения = Ложь
        пер СообщениеКоманды = ""

        если не РезультатКоманды.Пусто() 
            если ОтветВJson
                попытка 
                    пер МассивОтвета = СериализацияJson.ПрочитатьМассив(РезультатКоманды, Кодировка.Utf8)

                    если не МассивОтвета.Пусто()
                        ОтветКоманды = МассивОтвета.Первый() как Соответствие<Строка, Объект?>
                    ;

                    РезультатВыполнения = (ОтветКоманды.ПолучитьИлиУмолчание("type") == "success")
                    СообщениеКоманды = (ОтветКоманды.ПолучитьИлиУмолчание("type", "") как Строка)

                поймать Исключение: Исключение
                    СообщениеКоманды = "Результат команды: %{РезультатКоманды}; Исключение: %{Исключение}"
                ;
            иначе
                РезультатВыполнения = РезультатКоманды.Содержит("Операция завершена успешно")
                СообщениеКоманды = РезультатКоманды
            ;
        ;

        Результат.Результат = РезультатВыполнения
        Результат.Сообщение = СообщениеКоманды
        Результат.Тело = РезультатКоманды

        возврат Результат
    ;
;

структура РезультатКомандыПолученияСпискаРасширений
    @JsonСвойство(Имя = "type")
    пер Результат = ""
    @JsonСвойство(Имя = "message")
    пер Сообщение = ""
    @JsonСвойство(Имя = "body")
    пер Тело: Массив<ОписаниеРасширения>?
;

структура ОписаниеРасширения
    @JsonСвойство(Имя = "type")
    пер ЗначениеТипа = ""
    @JsonСвойство(Имя = "body")
    пер Тело: ПараметрыРасширения?
;

структура ПараметрыРасширения
    @JsonСвойство(Имя = "name")
    пер Имя = ""
    @JsonСвойство(Имя = "version")
    пер Версия = ""
    @JsonСвойство(Имя = "active")
    пер Активно = Ложь
    @JsonСвойство(Имя = "purpose")
    пер Назначение = "customization"
    @JsonСвойство(Имя = "safe-mode")
    пер БезопасныйРежим = Ложь
    @JsonСвойство(Имя = "security-profile-name")
    пер ИмяПрофиляБезопасности = ""
    @JsonСвойство(Имя = "unsafe-action-protection")
    пер ЗащитаОтОпасныхДействий = Истина
    @JsonСвойство(Имя = "used-in-distributed-infobase")
    пер ИспользуетсяВРаспределеннойИБ = Ложь
    @JsonСвойство(Имя = "scope")
    пер ОбластьДействия = "infobase"
    @JsonСвойство(Имя = "hash-sum")
    пер ХэшСумма = ""
;

метод ПолучитьПараметры(СоответствиеПараметров: Соответствие<Строка, Строка>): СтруктураПараметров

    пер Параметры = новый СтруктураПараметров()
    
    Параметры.ВремяСтарта = ДатаВремя.Сейчас()
    Параметры.ЛимитВремени = ОбщиеЗначениеПараметраЧисло(СоответствиеПараметров, "time-limit")
    Параметры.Задержка = ОбщиеЗначениеПараметраЧисло(СоответствиеПараметров, "max-delay")
    
    Параметры.АктивностьРасширений = ОбщиеЗначениеПараметраБулево(СоответствиеПараметров, "extension-activity")
    Параметры.ПутьКПлатформе = ОбщиеЗначениеПараметраСтрока(СоответствиеПараметров, "platform-folder")

    Параметры.Язык = ОбщиеЗначениеПараметраСтрока(СоответствиеПараметров, "lang")
    Параметры.КодДоступа = ОбщиеЗначениеПараметраСтрока(СоответствиеПараметров, "access-code")
    Параметры.Сервер = ОбщиеЗначениеПараметраСтрока(СоответствиеПараметров, "server")
    Параметры.ИнформационнаяБаза = ОбщиеЗначениеПараметраСтрока(СоответствиеПараметров, "ib")
    Параметры.ПутьКФайловойБазе = ОбщиеЗначениеПараметраСтрока(СоответствиеПараметров, "path-to-ib")
    Параметры.Пользователь = ОбщиеЗначениеПараметраСтрока(СоответствиеПараметров, "ib-user")
    Параметры.Пароль = ОбщиеЗначениеПараметраСтрока(СоответствиеПараметров, "ib-password")
    Параметры.Порт = ОбщиеЗначениеПараметраЧисло(СоответствиеПараметров, "port")
    Параметры.АдресАгентаКонфигуратора = ОбщиеЗначениеПараметраСтрока(СоответствиеПараметров, "agent-hostname")
    Параметры.ПортАгентаКонфигуратора = ОбщиеЗначениеПараметраЧисло(СоответствиеПараметров, "agent-port")
    Параметры.ПутьКФайлуСОписаниемРасширений = ОбщиеЗначениеПараметраСтрока(СоответствиеПараметров, "extensions-description")

    возврат Параметры
;

метод ПолучитьКонсольSSH(ТекущееСоединени: СоединениеSsh?): КонсольSsh?
    пер АгентSSH: КонсольSsh?

    попытка 
        АгентSSH = ТекущееСоединени!.ОткрытьКонсоль(Истина)

    поймать Исключение: ИсключениеSsh
        ЛогОшибка(Исключение.Представление())
    ;

    возврат АгентSSH
;

метод ПрочитатьФайлОписанияРасширений(Параметры: СтруктураПараметров): ЧитаемоеСоответствие<Строка, Булево>?
    пер ФайлОписанияРасширений = новый Файл(Параметры.ПутьКФайлуСОписаниемРасширений)

    если не ФайлОписанияРасширений.Существует()
        ЛогОшибка("Отсутвует файл %{Параметры.ПутьКФайлуСОписаниемРасширений} с описание расширений")

        возврат Неопределено
    ;

    пер ДанныеОписанияРасширения = ФайлОписанияРасширений.ОткрытьПотокЧтения().ПрочитатьКакСтроку()
    пер СписокОписанияРасширений = ОбщиеТекстВМассив(ДанныеОписанияРасширения, Ложь)
    пер Результат = новый Соответствие<Строка, Булево>()

    для ОписаниеРасширения из СписокОписанияРасширений
        пер ЧастиОписанияРасширения = ОписаниеРасширения.Разделить(":")

        если ЧастиОписанияРасширения.Пусто() 
            или ЧастиОписанияРасширения.Размер() < 3
            продолжить
        ;

        пер РасширениеВключено = (ЧастиОписанияРасширения.Получить(0) == "1")
        ЛогИнформация("Расширение: ${ЧастиОписанияРасширения.Получить(2)}; Значение расширения: %{ЧастиОписанияРасширения.Получить(0)}; Расширение включено: %{РасширениеВключено}")

        Результат.Вставить(ЧастиОписанияРасширения.Получить(2), РасширениеВключено)
    ;

    возврат Результат
;

структура ПараметрыПодключенияКБазе
    пер Адрес = ""
    пер Порт = 0
    пер ИмяБазы = ""
    пер ПутьКФайловойБазе = ""
    пер Пользователь = ""
    пер Пароль = ""

    метод СтрокаПодключения(): Строка
        пер строкаПодключения = "/F\"%{этот.ПутьКФайловойБазе}\""

        если не этот.Адрес.Пусто()
            пер ПортСервера = (этот.Порт != 0 ? ":%{этот.Порт}" : "")
            строкаПодключения = "/S\"%{этот.Адрес}%{ПортСервера}\\%{этот.ИмяБазы}\""
        ;

        возврат строкаПодключения
    ;
;

метод ЗавершитьПроцесс(ИдПроцесса: Число?)
    если ИдПроцесса == Неопределено
        возврат
    ;

    пер ПараметрыЗапуска = новый Массив<Строка>()
    ПараметрыЗапуска.Добавить("/F")
    ПараметрыЗапуска.Добавить("/Pid")
    ПараметрыЗапуска.Добавить("%{ИдПроцесса}")

    пер Процесс: ПроцессОс = новый ПроцессОс("taskkill", ПараметрыЗапуска)

    попытка 
        ОбщиеЗапуститьПроцессОС(Процесс, метод(КодОшибки: Число, Сообщение: Строка)->
            ЛогОшибка("Ошибка вызова сервиса: КодОшибки=%{КодОшибки}; Описание=%{Сообщение}")
        ;, 60)
    поймать Исключение: ИсключениеТаймаут
        ЛогОшибка(Исключение.Представление())
    ;
;

метод ЗапуститьАгентаКонфигуратора(ПутьКПлатформе: Строка, 
                      ПараметрыПодключения: ПараметрыПодключенияКБазе, 
                      ПортСервераSsh: Число = 1543, 
                      КодДоступа: Строка = ""): ПроцессОс?

    пер ПараметрыЗапуска = новый Массив<Строка>()
    пер ФайлВывода = Файлы.СоздатьВременныйФайл("ex_")

    ПараметрыЗапуска.Добавить("DESIGNER")  
    ПараметрыЗапуска.Добавить(ПараметрыПодключения.СтрокаПодключения())
    ПараметрыЗапуска.Добавить("/DisableStartupDialogs")
    ПараметрыЗапуска.Добавить("/DisableStartupMessages")
    
    если не КодДоступа.Пусто()
        ПараметрыЗапуска.Добавить("/UC")
        ПараметрыЗапуска.Добавить("\"" + КодДоступа + "\"")
    ;

    ПараметрыЗапуска.Добавить("/AgentMode")
    ПараметрыЗапуска.Добавить("/AgentSSHHostKeyAuto")
    ПараметрыЗапуска.Добавить("/AgentPort")
    ПараметрыЗапуска.Добавить(ПортСервераSsh == 0 ? "1543" : "%{ПортСервераSsh}")

    ПараметрыЗапуска.Добавить("/Out")
    ПараметрыЗапуска.Добавить("\"%{ФайлВывода.Путь}\"")

    пер ПутьККонфигуратору = ОбщееНайтиИсполняемыйФайлПлатформы(ПутьКПлатформе, "1cv8")
    пер Процесс: ПроцессОс = новый ПроцессОс(ПутьККонфигуратору, ПараметрыЗапуска)
    
    попытка 
        ОбщиеЗапуститьПроцессОС(Процесс, метод(КодОшибки: Число, Сообщение: Строка)->
            пер ТекстОшибки = "Ошибка вызова сервиса: КодОшибки=%{КодОшибки}; Описание=%{Сообщение}"

            ЛогОшибка(ТекстОшибки)
            выбросить новый ИсключениеВремениВыполнения(ТекстОшибки)
        ;, -1)

        ОбщиеПауза(2)

        пер РезультатРаботы: Строка = ФайлВывода
            .ОткрытьПотокЧтения()
            .ПрочитатьКакСтроку("utf8")

        если не РезультатРаботы.Пусто()
            ЛогОшибка(РезультатРаботы)
            возврат Неопределено
        ;
    поймать Исключение: ИсключениеТаймаут
        ЛогОшибка("Не удалось запустить конфигуратор в режиме агента. Проверьте существование базы в составе кластера")
        ЗавершитьПроцесс(Процесс.ПолучитьPid())

        возврат Неопределено
    ;

    возврат Процесс
;

метод ПолучитьSshСоединение(Процесс: ПроцессОс?,АдресАгентаКонфигуратора: Строка, ПортСервераSsh: Число, Пользователь: Строка, Пароль: Строка): СоединениеSsh?
    попытка 
        пер ТестовоеСоединение = новый СоединениеSsh(
            АдресАгентаКонфигуратора.Пусто() ? "localhost" : АдресАгентаКонфигуратора, 
            ПортСервераSsh == 0 ? 1543 : ПортСервераSsh, 
            Пользователь, Пароль)

        возврат ТестовоеСоединение
    поймать Исключение: ИсключениеSsh
        если Процесс?.Живой() == Истина
            ЗавершитьПроцесс(Процесс!.ПолучитьPid())
        ;

        выбросить Исключение
    ;

    возврат Неопределено
;

метод ВыполнитьКомандуАгента(КонсольSsh: КонсольSsh?, Команда: Строка, ОтветВJson: Булево = Истина): РезультатКоманды
    если КонсольSsh == Неопределено
        возврат новый РезультатКоманды(Ложь, "Консоль агента конфигуратора не активна")
    ;

    исп ПотокЧтения = КонсольSsh!.Выполнить(Команда, Длительность.ИзСекунд(5))
    пер ВыводКоманды = (ПотокЧтения == Неопределено ? "Не удалось открыть поток чтения" :
        ПотокЧтения!.ПрочитатьКакСтроку("utf8"))

    // TODO: Отладочная информация
    // ЛогИнформация("Консоль инициализирована: %{КонсольSsh != Неопределено}; Команда: %{Команда}; ВыводКоманды: %{ВыводКоманды}; Ответ в Json: %{ОтветВJson}")

    пер ОтветКоманды = РезультатКоманды.Прочитать(ВыводКоманды, ОтветВJson)

    если не ОтветКоманды.Результат
        ЛогОшибка(ОтветКоманды.Сообщение)
        ЛогОшибка(ОтветКоманды.Тело)
    ;

    возврат ОтветКоманды
;

метод ПодключитьКБазе(КонсольSsh: КонсольSsh?): РезультатКоманды

    пер Команда = "common connect-ib"

    возврат ВыполнитьКомандуАгента(КонсольSsh, Команда)
;

метод ПереключитьФорматВыводаВJson(КонсольSsh: КонсольSsh?): РезультатКоманды

    пер Команда = "options set --output-format json"

    возврат ВыполнитьКомандуАгента(КонсольSsh, Команда)
;

метод ПереключитьФорматВыводаВТекст(КонсольSsh: КонсольSsh?): РезультатКоманды

    пер Команда = "options set --output-format text"

    возврат ВыполнитьКомандуАгента(КонсольSsh, Команда, Ложь)
;

метод ПолучитьОписаниеВсехРасширений(КонсольSsh: КонсольSsh?): ЧитаемыйМассив<ОписаниеРасширения>
    пер Команда = "config extensions properties get --all-extensions"
    пер ОтветКоманды = ВыполнитьКомандуАгента(КонсольSsh, Команда)
    пер Результат = новый Массив<ОписаниеРасширения>()

    если не ОтветКоманды.Результат
        возврат Результат
    ;

    попытка 
        пер РасширенияКонфигурации = СериализацияJson.ПрочитатьОбъект(ОтветКоманды.Тело, 
                Тип<ЧитаемыйМассив<РезультатКомандыПолученияСпискаРасширений>>)
                как ЧитаемыйМассив<РезультатКомандыПолученияСпискаРасширений>

        если РасширенияКонфигурации.Пусто()
            возврат Результат
        ;

        Результат = РасширенияКонфигурации.Первый().Тело!

    поймать Исключение: Исключение
        ЛогОшибка(Исключение.ВСтроку())
    ;

    возврат Результат
;

метод ПереключитьАктивностьВсехРасширений(КонсольSsh: КонсольSsh?, 
    ОпределяемыеРасширения: ЧитаемоеСоответствие<Строка, Булево>,
    ЗначениеАктивности: Булево, 
    СписокРасширений: ЧитаемыйМассив<ОписаниеРасширения>)

    ПереключитьФорматВыводаВТекст(КонсольSsh)

    для ТекущееРасширение из СписокРасширений
        ИзменитьАктивностьРасширения(КонсольSsh, 
            ОпределяемыеРасширения, 
            ТекущееРасширение,
            ЗначениеАктивности)
    ;

    ПереключитьФорматВыводаВJson(КонсольSsh)
;

метод ИзменитьАктивностьРасширения(КонсольSsh: КонсольSsh?, 
    ОпределяемыеРасширения: ЧитаемоеСоответствие<Строка, Булево>,
    ОписаниеРасширения: ОписаниеРасширения, 
    ЗначениеАктивности: Булево)

    ЛогИнформация("Изменение расширения: %{ОписаниеРасширения.Тело!.Имя}")
    ЛогИнформация("В файле описано расширение: %{ОпределяемыеРасширения.СодержитКлюч(ОписаниеРасширения.Тело!.Имя)}")

    пер ТекущееЗначениеПоляАктивности = ЗначениеАктивности

    если ОписаниеРасширения.Тело != Неопределено 
        и ОпределяемыеРасширения.СодержитКлюч(ОписаниеРасширения.Тело!.Имя) == Истина

        ТекущееЗначениеПоляАктивности =  ОпределяемыеРасширения.ПолучитьИлиУмолчание(
            ОписаниеРасширения.Тело!.Имя, Ложь)
    ;

    пер ЗначениеПоляАктивности = ТекущееЗначениеПоляАктивности ? "yes" : "no"

    пер Команда = "config extensions properties set --extension=%{ОписаниеРасширения.Тело!.Имя} --active=%{ЗначениеПоляАктивности}"
    пер РезультатКоманды = ВыполнитьКомандуАгента(КонсольSsh, Команда, Ложь)

    если РезультатКоманды.Результат
        пер СостояниеРасширения = (ЗначениеАктивности ? "включено" : "отключено")
        ЛогИнформация("Расширение '%{ОписаниеРасширения.Тело!.Имя}' было успешно %{СостояниеРасширения}")
    иначе
        ЛогОшибка("Ошибка во время переключения состояния расширения. Причина: %{РезультатКоманды.Сообщение}")
    ;
;

///////////////////////////////////////////////////////////////////
// ТОЧКА ВХОДА
///////////////////////////////////////////////////////////////////


метод Скрипт(СоответствиеПараметров: Соответствие<Строка, Строка>): Число

    // Тестовый режим.
    если ОбщиеЗначениеПараметраБулево(СоответствиеПараметров, "test-mode")
        ЛогИнформация("Test mode completed successfully")
        возврат 0
    ;

    ЛогСтарт()

    пер Параметры = ПолучитьПараметры(СоответствиеПараметров)

    ОбщиеПроверитьОбязательныеПараметры(Параметры, [
              новый СтруктураПроверкиПараметра("platform-folder", ОбщиеЗначениеПараметраСтрока(СоответствиеПараметров, "platform-folder"), () -> (Параметры.ПутьКПлатформе != "")),
              новый СтруктураПроверкиПараметра("ib", ОбщиеЗначениеПараметраСтрока(СоответствиеПараметров, "ib"), () -> (Параметры.ПутьКФайловойБазе != "" или Параметры.ИнформационнаяБаза != "")),
              новый СтруктураПроверкиПараметра("server", ОбщиеЗначениеПараметраСтрока(СоответствиеПараметров, "server"), () -> (Параметры.ПутьКФайловойБазе != "" или Параметры.Сервер != "")),
              новый СтруктураПроверкиПараметра("path-to-ib", ОбщиеЗначениеПараметраСтрока(СоответствиеПараметров, "path-to-ib"), () -> (Параметры.ПутьКФайловойБазе != "" 
                или (Параметры.ИнформационнаяБаза != "" и Параметры.Сервер != "")))
        ]
    )
    
    // Случайная задержка перед выполнением операции
    если Параметры.Задержка > 0
        ОбщиеПауза(Параметры.Задержка, Истина)
    ;

    Параметры.ВремяСтарта = ДатаВремя.Сейчас()

    пер ПараметрыПодключения = новый ПараметрыПодключенияКБазе(
        Параметры.Сервер, 
        Параметры.Порт, 
        Параметры.ИнформационнаяБаза, 
        Параметры.ПутьКФайловойБазе,
        Параметры.Пользователь,
        Параметры.Пароль
    )

    пер ПроцессАгентаКонфигуратора = ЗапуститьАгентаКонфигуратора(Параметры.ПутьКПлатформе,
            ПараметрыПодключения, 
            Параметры.ПортАгентаКонфигуратора,
            Параметры.КодДоступа)

    если ПроцессАгентаКонфигуратора == Неопределено
        возврат 1
    ;

    пер БылаОшибка = Ложь
    пер КонсольSsh: КонсольSsh?
    пер СоединениеSsh: СоединениеSsh?
    пер ОпределяемыеРасширения: ЧитаемоеСоответствие<Строка, Булево> = новый Соответствие<Строка, Булево>()

    если не Параметры.ПутьКФайлуСОписаниемРасширений.Пусто()
        ОпределяемыеРасширения = ПрочитатьФайлОписанияРасширений(Параметры)!
    ;

    попытка
        СоединениеSsh = ПолучитьSshСоединение(ПроцессАгентаКонфигуратора,
            Параметры.АдресАгентаКонфигуратора,
            Параметры.ПортАгентаКонфигуратора,
            ПараметрыПодключения.Пользователь,
            ПараметрыПодключения.Пароль)

        КонсольSsh = ПолучитьКонсольSSH(СоединениеSsh)
        
        ПереключитьФорматВыводаВJson(КонсольSsh)
        ПодключитьКБазе(КонсольSsh)
        пер СписокРасширений = ПолучитьОписаниеВсехРасширений(КонсольSsh)

        ПереключитьАктивностьВсехРасширений(КонсольSsh,
            ОпределяемыеРасширения, 
            Параметры.АктивностьРасширений,
            СписокРасширений)
    поймать Исключение: Исключение
        ЛогОшибка(Исключение.ВСтроку())
        БылаОшибка = Истина
    вконце
        КонсольSsh?.Закрыть()
        СоединениеSsh?.Закрыть()

        если ПроцессАгентаКонфигуратора?.Живой() == Истина
            ЗавершитьПроцесс(ПроцессАгентаКонфигуратора!.ПолучитьPid())
        ;
    ;

    ОбщиеВремяИстекло(Параметры.ВремяСтарта, Параметры.ЛимитВремени)

    ЛогИнформация("Finished", Параметры.ВремяСтарта)

    если БылаОшибка
        возврат 255
    ;

    возврат 0
;