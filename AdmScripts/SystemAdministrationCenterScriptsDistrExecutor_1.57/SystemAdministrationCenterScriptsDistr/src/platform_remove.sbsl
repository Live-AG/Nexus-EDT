// #импорт include/common.sbsl

///////////////////////////////////////////////////////////////////
// ИСКЛЮЧЕНИЯ И СТРУКТУРЫ
///////////////////////////////////////////////////////////////////

исключение ИсключениеВремениВыполнения
;

исключение ИсключениеТаймаут
    пер Таймаут: Число
;

исключение ИсключениеФайлНеНайден
    пер КаталогПуть: Строка
;

исключение ИсключениеКаталогОказалсяФайлом
    пер КаталогПуть: Строка
;

исключение ИсключениеОтсутствуютОбязательныеПараметры
;

структура СтруктураПроверкиПараметра
    пер ИмяПараметра: Строка = "" 
    обз пер Значение: Строка|Число|ДатаВремя
    обз пер ФункцияПроверки: ()->Булево
;

перечисление ПеречислениеОперационнаяСистема
    WINDOWS
    LINUX
    LINUX_DEB
    LINUX_RPM
;


///////////////////////////////////////////////////////////////////
// ОБЩИЕ
///////////////////////////////////////////////////////////////////


метод ОбщиеВремяИстекло(ВремяСтарта: ДатаВремя, ЛимитВремени: Число)

    если ЛимитВремени == 0 или ВремяСтарта <= ДатаВремя{2000-01-01}
        возврат
    ;

    если (ДатаВремя.Сейчас() - ВремяСтарта).Секунды > ЛимитВремени
        пер Ошибка = "Time limit expired: $ЛимитВремени sec." 
        ЛогОшибка(Ошибка)
        выбросить новый ИсключениеТаймаут(Ошибка, ЛимитВремени)
    ;

;

метод ОбщиеПодходитПодШаблон(ПроверяемаяСтрока: Строка, Шаблон: Строка, ИнвертироватьШаблон: Булево): Булево

    пер Подходит = Ложь

    пер регВыражение = новый Образец(Шаблон)

    если ИнвертироватьШаблон
        Подходит = (регВыражение.НайтиСовпадения(ПроверяемаяСтрока).Размер() == 0)
    иначе
        Подходит = (регВыражение.НайтиСовпадения(ПроверяемаяСтрока).Размер() > 0)
    ;
    
    возврат Подходит

;

метод ОбщиеЭтоАрхив(Путь: Строка): Булево

    пер ЭтоАрхив: Булево = Путь.ВНижнийРегистр().ЗаканчиваетсяНа(".zip")
                            или Путь.ВНижнийРегистр().ЗаканчиваетсяНа(".rar")
                            или Путь.ВНижнийРегистр().ЗаканчиваетсяНа(".gz")
    
    возврат ЭтоАрхив

;

метод ОбщиеДобавитьРазделитель(Путь: Строка): Строка
  возврат Путь.ЗаканчиваетсяНа(Файлы.СимволРазделителя) ? Путь : Путь + Файлы.СимволРазделителя
;

метод ОбщиеУбратьПоследнийРазделитель(Путь: Строка): Строка
  возврат Путь.ЗаканчиваетсяНа(Файлы.СимволРазделителя) ? Путь.ПодстрокаСНачала(Путь.Длина() - 1) : Путь
;

метод ОбщиеПроверитьОбязательныеПараметры(Параметры: СтруктураПараметров, ПроверкиПараметров: ЧитаемыйМассив<СтруктураПроверкиПараметра>)

    пер ЕстьОшибки: Булево = Ложь
    
    для ПроверкаПараметра из ПроверкиПараметров
    
        если не ПроверкаПараметра.ФункцияПроверки()

            пер ИмяПараметра = ПроверкаПараметра.ИмяПараметра
            пер Значение = ПроверкаПараметра.Значение
            
            ЛогОшибка("Parameter error: $ИмяПараметра, value: $Значение")
            ЕстьОшибки = Истина
            
        ;
    
    ;
    
    если ЕстьОшибки
        выбросить новый ИсключениеОтсутствуютОбязательныеПараметры("FAIL: parameters check")
    ;
    
;

метод ОбщиеЗначениеПараметраБулево(СоответствиеПараметров: Соответствие<Строка, Строка>, Ключ: Строка, ЗначениеПоумолчанию: Булево = Ложь): Булево

    пер Результат = ЗначениеПоумолчанию

    попытка
    
        пер Значение = СоответствиеПараметров[Ключ] 
        
        выбор Значение.ВНижнийРегистр()
        когда "истина"
            Результат = Истина
        когда "true"
            Результат = Истина
        когда "1"
            Результат = Истина
        когда "on"
            Результат = Истина
        когда "да"
            Результат = Истина
        когда "yes"
            Результат = Истина
        когда "вкл"
            Результат = Истина
        когда "вкл."
            Результат = Истина
        когда "включено"
            Результат = Истина
        иначе
            Результат = Ложь
        ;
        
    поймать Исключение: Исключение
        Результат = ЗначениеПоумолчанию
    ;
    
    возврат Результат

;

метод ОбщиеЗначениеПараметраЧисло(СоответствиеПараметров: Соответствие<Строка, Строка>, Ключ: Строка, ЗначениеПоУмолчанию: Число = 0): Число

    пер Результат = ЗначениеПоУмолчанию

    попытка
        пер Значение = СоответствиеПараметров[Ключ] 
        Результат = новый Число(Значение)
    поймать Исключение: Исключение
        Результат = ЗначениеПоУмолчанию
    ;
    
    возврат Результат

;

метод ОбщиеЗначениеПараметраСтрока(СоответствиеПараметров: Соответствие<Строка, Строка>, Ключ: Строка, ЗначениеПоУмолчанию: Строка = ""): Строка

    пер Результат = ЗначениеПоУмолчанию

    попытка
        пер Значение = СоответствиеПараметров[Ключ] 
        Результат = Значение.ВСтроку()

        если Результат.Сравнить("null", Истина) == 0
            Результат = ЗначениеПоУмолчанию
        ;
        
    поймать Исключение: Исключение
        Результат = ЗначениеПоУмолчанию
    ;
    
    возврат Результат

;

метод ОбщиеПауза(ПаузаСекунд: Число, Случайная: Булево = Ложь)

    пер ПаузаРеальная = ПаузаСекунд
    
    если Случайная
    
        пер ГСЧ = новый СлучайныйГенератор(ДатаВремя.Сейчас().Миллисекунда)
        ПаузаРеальная = ГСЧ.СлучайноеЦелое(0, ПаузаСекунд)

    ;
    
    ПаузаРеальная = ПаузаРеальная == 0 ? ПаузаСекунд : ПаузаРеальная

    если Случайная
        
        ЛогИнформация("Selected delay $ПаузаРеальная sec.")
        
    ;
    
    Пауза(новый Длительность(0, 0, ПаузаРеальная))
    
;

метод ОбщиеТипОС(УточнятьТипLinux: Булево = Ложь): ПеречислениеОперационнаяСистема

    пер ТипОС: ПеречислениеОперационнаяСистема = СредаИсполнения.ПолучитьПеременную("OS").Содержит("Windows", Истина) ? ПеречислениеОперационнаяСистема.WINDOWS : ПеречислениеОперационнаяСистема.LINUX
    
    если ТипОС == ПеречислениеОперационнаяСистема.LINUX и УточнятьТипLinux
        
        ТипОС = ПеречислениеОперационнаяСистема.LINUX_DEB
        
        пер Процесс: ПроцессОс = новый ПроцессОс("dpkg", ["--version"])
        
        попытка
            Процесс.Запустить()
            Процесс.ПолучитьПотокВывода().ПрочитатьКакСтроку()
        поймать Игнорировать: Исключение
            ТипОС = ПеречислениеОперационнаяСистема.LINUX_RPM
        ; 
        
    ;
    
    возврат ТипОС
    
;

метод ОбщиеАрхитектураОС(): Число
    если СредаИсполнения.ПолучитьСвойство("os.arch").Содержит("64")
        возврат 64
    иначе
        возврат 32
    ;
;

метод ОбщиеНайтиФайл(Путь: Строка|Файл, ИмяФайла: Строка): Файл?

    пер НайденныйФайл: Файл? = Неопределено
    
    пер НастройкиПоиска: НастройкиПоиска = новый НастройкиПоиска()
    НастройкиПоиска.ИмяСодержит(ИмяФайла)
    НастройкиПоиска.ИсключитьКаталоги(Истина)
    
    пер МассивФайлов: ЧитаемыйМассив<Файл> = Файлы.Найти(Путь, НастройкиПоиска)
    для Файл из МассивФайлов
        если Файл.Имя == ИмяФайла
            НайденныйФайл = Файл
            прервать
        ;
    ;

    возврат НайденныйФайл
;

метод ОбщиеФайлСкрипта(): Файл
    пер ФайлСкрипта: Файл = новый Файл(Скрипт.ПутьТекущегоСкрипта)
    возврат ФайлСкрипта
;

метод ОбщиеКаталогСкрипта(): Строка
    пер ФайлСкрипта: Файл? = ОбщиеФайлСкрипта()
    возврат (ФайлСкрипта != Неопределено ? ФайлСкрипта.Каталог.Путь : "")
;

метод ОбщиеЗапуститьПроцессОС(Процесс: ПроцессОс, ОбработкаОшибок: ((Число, Строка)->void)? = Неопределено, ЛимитВремени: Число = 0, Кодировка: Строка = "UTF-8", ОжидатьЗавершения: Булево = Истина): Строка

    пер Ошибка: Строка = ""
    пер ФайлПотокаВывода = Файлы.СоздатьВременныйФайл("ex_")
    пер ПотокВывода: Строка = ""
    
    Процесс.Запустить()
	если не ОжидатьЗавершения
		возврат ПотокВывода
	;
    
    пер ВсеОк: Булево = Истина
    
    если ЛимитВремени > 0  
        ВсеОк = Процесс.ОжидатьЗавершения(Длительность.ИзСекунд(ЛимитВремени))
    иначе если ЛимитВремени == -1
        ВсеОк = Истина
        возврат ""
    иначе
        ВсеОк = Процесс.ОжидатьЗавершения()
    ;
    
    если не ВсеОк
        Ошибка = "Timeout expired: " + ЛимитВремени
        ЛогОшибка(Ошибка)
        выбросить новый ИсключениеТаймаут(Ошибка, ЛимитВремени)
    ;        

    пер КодОшибки: Число? = Процесс.ПолучитьКодВозврата()
    если КодОшибки == Неопределено
        КодОшибки = 0
    ;

    ПотокВывода = Процесс.ПолучитьПотокВывода().ПрочитатьКакСтроку(Кодировка)
    Ошибка = Процесс.ПолучитьПотокОшибок().ПрочитатьКакСтроку()

    если КодОшибки != 0 или не Ошибка.Пусто()
        если ОбработкаОшибок == Неопределено
            пер ТекстОшибки: Строка = "Return code: $КодОшибки. $Ошибка" 
            ЛогОшибка(ПотокВывода + ТекстОшибки)
            выбросить новый ИсключениеВремениВыполнения(ТекстОшибки)
        иначе
            ОбработкаОшибок(КодОшибки, ПотокВывода + "\n" + Ошибка)
        ;
    ;
    
    возврат ПотокВывода
    
;

метод ОбщиеЗапуститьКаскадПроцессов(Параметры: ЧитаемыйМассив<ЧитаемыйМассив<Строка>>): Строка

    пер Вывод: Строка = ""
    пер Вход: Строка = ""

    для ОписаниеКоманды из Параметры
        
        пер Команда: Строка = ОписаниеКоманды[0]
        пер ПараметрыКоманды: ЧитаемыйМассив<Строка> = (Параметры.Размер() > 1 ? ОписаниеКоманды.ПодМассив(1) : [])
        
        пер Процесс: ПроцессОс = новый ПроцессОс(Команда , ПараметрыКоманды)
        Процесс.Запустить()
        Процесс.ПолучитьПотокВвода().Записать(Вход).Закрыть()
        Вывод = Процесс.ПолучитьПотокВывода().ПрочитатьКакСтроку()
        Вход = Вывод
    ;
        
    возврат Вывод
        
;


метод ОбщиеУбратьГраничныеСимволы(Текст: Строка, Символ: Строка): Строка

    если Текст.НачинаетсяС(Символ)
        Текст = Текст.Подстрока(1)
    ;
    
    если Текст.ЗаканчиваетсяНа(Символ)
        Текст = Текст.Подстрока(0, Текст.Длина() - Мин(1, Текст.Длина()))
    ;
    
    возврат Текст

;

метод ОбщиеКодироватьВURL(Данные: Строка): Строка

    пер ДанныеКодированные: Массив<Строка>

    пер КодируемыеСимволы: Строка = ":/?#[]@!$&'()*+,;=ёйцукенгшщзхъфывапролджэячсмитьбюЁЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮ"
    пер ДекодируемыеСимволы: Строка = "#3A#2F#3F#23#5B#5D#40#21#24#26#27#28#29#2A#2B#2C#3B#3D#D1#91#D0#B9#D1#86#D1#83#D0#BA#D0#B5#D0#BD#D0#B3#D1#88#D1#89#D0#B7#D1#85#D1#8A#D1#84#D1#8B#D0#B2#D0#B0#D0#BF#D1#80#D0#BE#D0#BB#D0#B4#D0#B6#D1#8D#D1#8F#D1#87#D1#81#D0#BC#D0#B8#D1#82#D1#8C#D0#B1#D1#8E#D0#81#D0#99#D0#A6#D0#A3#D0#9A#D0#95#D0#9D#D0#93#D0#A8#D0#A9#D0#97#D0#A5#D0#AA#D0#A4#D0#AB#D0#92#D0#90#D0#9F#D0#A0#D0#9E#D0#9B#D0#94#D0#96#D0#AD#D0#AF#D0#A7#D0#A1#D0#9C#D0#98#D0#A2#D0#AC#D0#91#D0#AE"
    пер ДекодируемыеСимволыМассив: Массив<Строка> = ДекодируемыеСимволы.Разделить("#")
    
    для Символ из Данные
        пер Позиция = КодируемыеСимволы.Найти(Символ)
        если Позиция >= 0
            ДанныеКодированные.Добавить("%" + ДекодируемыеСимволыМассив[Позиция])
        иначе
            ДанныеКодированные.Добавить(Символ)
        ;
    ;
    
    
    возврат Строки.Соединить(ДанныеКодированные, "")
    
;

метод ОбщиеАрхитектураEXE(ФайлEXE: Файл): Число

    исп ПотокЧтения: ПотокЧтения = ФайлEXE.ОткрытьПотокЧтения()
    пер ЧтениеДанных: ЧтениеДанных = новый ЧтениеДанных(ПотокЧтения)
    пер ПозицияPE: Число = ЧтениеДанных.ПропуститьДо("PE")
    если ПозицияPE < 200 или ПозицияPE > 400
        возврат 0
    ;
    
    ЧтениеДанных.Пропустить(2)
    пер Разрядность: Число? = ЧтениеДанных.ПрочитатьЦелое16()
    если Разрядность == 0x4c01
        возврат 32
    иначе если Разрядность == 0x6486
        возврат 64
    ;
    
    возврат 0

;

метод ОбщиеВерсияEXE(ФайлEXE: Файл): Строка

    пер Процесс: ПроцессОс = новый ПроцессОс("wmic" , ["datafile", "where", "Name=\"" + ФайлEXE.Путь.Заменить("\\", "\\\\")  + "\"", "get", "Version", "/value"])
    пер Данные: Строка = ОбщиеЗапуститьПроцессОС(Процесс, Неопределено,  0, "cp866")
    
    пер Версия: Строка = Данные
        .Заменить("\r", "")
        .Заменить("\n", "")
        .Сократить()
        .Разделить("=")[1]
    
    возврат Версия

;


метод ОбщиеТекстВМассив(Текст: Строка, ВключаяПустые: Булево = Ложь): Массив<Строка>
    возврат Текст.Заменить("\r\n", "\n").Заменить("\r", "\n").Разделить("\n", ВключаяПустые)
;

метод ОбщиеОчиститьКаталог(Каталог: Файл|Строка, СоздаватьЕслиОтсутствует: Булево = Истина)
    
    пер КаталогФайл: Файл = (Каталог это Строка) ? новый Файл(Каталог как Строка) : Каталог как Файл
    
    если КаталогФайл.Существует() и не КаталогФайл.ЯвляетсяКаталогом()
        выбросить новый ИсключениеКаталогОказалсяФайлом("Destination path exists and not a directory", КаталогФайл.Путь)
    ;
    
    если КаталогФайл.Существует()
    
        пер МассивФайлов = новый Массив(Файлы.Найти(КаталогФайл, новый НастройкиПоиска().МаксимальнаяГлубина(1)))
        для Файл из МассивФайлов
            Файлы.Удалить(Файл, Истина)
        ;
    
    иначе если СоздаватьЕслиОтсутствует
        Файлы.СоздатьКаталог(Каталог)
    ;
    
;

метод ОбщиеРаспаковатьАрхив(ФайлАрхива: Файл, Каталог: Файл|Строка, ЛимитВремени: Число = 0)

    пер КаталогПриемник: Файл = (Каталог это Строка) ? новый Файл(Каталог как Строка) : Каталог как Файл

    пер ФайлRAR: Файл = новый Файл(ОбщиеДобавитьРазделитель(ОбщиеКаталогСкрипта())
        + Файлы.СимволРазделителя + ".." + Файлы.СимволРазделителя   
        + "external_utils" + Файлы.СимволРазделителя 
        + "unrar" + Файлы.СимволРазделителя
        + "unrar" + (ОбщиеТипОС() == ПеречислениеОперационнаяСистема.WINDOWS ? ".exe" : ""))
    
    если ФайлАрхива.Расширение.ВНижнийРегистр() == "rar" и не ФайлRAR.Существует()
        пер Ошибка: Строка = "Cannot find unrar."
        ЛогОшибка(Ошибка)
        выбросить новый ИсключениеФайлНеНайден(Ошибка, ФайлRAR.Путь)        
    ;
    
    если ФайлАрхива.Расширение == "zip"
        
        пер ФайлZip = новый ФайлZip(ФайлАрхива.Путь)
        ФайлZip.ИзвлечьВсе(КаталогПриемник)
        
    иначе если ФайлАрхива.Расширение == "rar"

        пер ПараметрыЗапуска: ЧитаемыйМассив<Строка> = новый ЧитаемыйМассив<Строка>(["x", "\"" + ФайлАрхива.Путь + "\"", "\"" + КаталогПриемник + "\""])
        пер Процесс: ПроцессОс = новый ПроцессОс(ФайлRAR.Путь, ПараметрыЗапуска)
        
        ОбщиеЗапуститьПроцессОС(Процесс, 
            метод(КодОшибки: Число, ТекстОшибки: Строка) -> 
                если КодОшибки != 0 или не ТекстОшибки.Пусто()
                    пер Ошибка: Строка = "UnRAR error. Return code: $КодОшибки. $ТекстОшибки" + "\n" + ФайлRAR.Путь + " " + Строки.Соединить(ПараметрыЗапуска, " ")  
                    ЛогОшибка(Ошибка)
                    выбросить новый ИсключениеВремениВыполнения(Ошибка)
                ;
            ;
        , ЛимитВремени, "cp866")
    
    иначе если ФайлАрхива.Расширение == "gz"
        
        пер Процесс: ПроцессОс = новый ПроцессОс("tar" , ["-xzf", ФайлАрхива.Путь, "-C", КаталогПриемник])
        ОбщиеЗапуститьПроцессОС(Процесс, Неопределено,  ЛимитВремени)
        
    ;
    
;

метод ОбщееПолучитьИнтерактивнуюСессиюПользователя(Пользователь: Строка): Строка
    пер МассивПараметров: Массив<Строка> = []
    пер ИдентификаторСессии = "-1"
    
    пер ЧастиИмениПользователя = Пользователь.Разделить("\\")
    пер ИмяПользователя = ЧастиИмениПользователя[0]

    если ЧастиИмениПользователя.Размер() > 1
        ИмяПользователя = ЧастиИмениПользователя[1]
    ;

    МассивПараметров.Добавить("query")
    МассивПараметров.Добавить("session")
    МассивПараметров.Добавить(ИмяПользователя)
    МассивПараметров.Добавить("|")
    МассивПараметров.Добавить("select")
    МассивПараметров.Добавить("-skip")
    МассивПараметров.Добавить("1")
    МассивПараметров.Добавить("-first")
    МассивПараметров.Добавить("1")

    пер Процесс: ПроцессОс = новый ПроцессОс("powershell", МассивПараметров, Истина)

    попытка 
        ОбщиеЗапуститьПроцессОС(Процесс, Неопределено, 0, "cp866", Ложь)
        Процесс.ОжидатьЗавершения()

        пер ПотокВывода = Процесс.ПолучитьПотокВывода()

        пер ТекстВывода = ПотокВывода.ПрочитатьКакСтроку("cp866")
        пер СтрокиВывода = ОбщиеТекстВМассив(ТекстВывода)

        для ТекущаяСтрока из СтрокиВывода
            пер ДанныеСтрокиВывода = ТекущаяСтрока.Разделить(" ")

            если ДанныеСтрокиВывода.Размер() > 2
                ИдентификаторСессии = ДанныеСтрокиВывода[2]
            ;
        ;

        ЛогИнформация(ТекстВывода)

    поймать Исключение: Исключение
        выбросить Исключение
    ;

    возврат ИдентификаторСессии
;

метод ОбщееПолучитьАдресSOAPСервиса(АдресВебСервера: Строка, ИмяПубликации: Строка, Сервис: Строка): Строка
    возврат "%{АдресВебСервера}/%{ИмяПубликации}/ws/%{Сервис}.1cws"
;

метод ОбщееВыполнитьSOAPЗапрос(АдресSOAPСервиса: Строка, Запрос: Строка, Пользователь: Строка = "", Пароль: Строка = ""): Строка
    
    пер Аутентификация: АутентификацияHttp = новый АутентификацияHttp(Пользователь, Пароль)
    пер UserAgent = "1C+Enterprise/8.3"

    исп Ответ: ОтветHttp = КлиентHttp.САутентификацией(Аутентификация)
        .СБазовымUrl(АдресSOAPСервиса)
        .ЗапросPost("")
        .УстановитьТело(Запрос)
        .ДобавитьЗаголовок("User-Agent", UserAgent)
        .ДобавитьЗаголовок("Accept", "*/*")
        .УстановитьТипСодержимого("application/soap+xml")
        .УстановитьТаймаутЗапроса(60с)
        .УстановитьТаймаутСоединения(60с)
        .Выполнить()

    если Ответ.КодСостояния == 200
        возврат Ответ.Тело.ПрочитатьКакСтроку()
    иначе
        выбросить новый ИсключениеВремениВыполнения("Response was returned with status code: %{Ответ.КодСостояния}; Message: %{Ответ.Тело.ПрочитатьКакСтроку()}")
    ;

    возврат ""
;

метод ОбщееНайтиИсполняемыйФайлПлатформы(ПутьКПлатформе: Строка, ИмяИсполняемогоФайла: Строка): Строка
    пер ЭтоWindows = (ОбщиеТипОС() == ПеречислениеОперационнаяСистема.WINDOWS)
    пер НастройкиПоискаДиректорииBin = новый НастройкиПоиска()
        .ИмяСодержит("bin")
        .ИсключитьФайлы(Истина)
    пер ДиректорияBin = ""

    если не Файлы.Найти(ОбщиеУбратьПоследнийРазделитель(ПутьКПлатформе), НастройкиПоискаДиректорииBin).Пусто()
         ДиректорияBin = ОбщиеДобавитьРазделитель("bin")

    ;

    пер ПутьКДиректорииBin = "${ОбщиеДобавитьРазделитель(ПутьКПлатформе)}%{ДиректорияBin}"
    ПутьКДиректорииBin = ОбщиеУбратьПоследнийРазделитель(ПутьКДиректорииBin)

    пер Расширение = (ЭтоWindows ? ".exe" : "")
    пер ПутьКФайлу = "${ОбщиеДобавитьРазделитель(ПутьКДиректорииBin)}%{ИмяИсполняемогоФайла}%{Расширение}"

    возврат новый Файл(ПутьКФайлу).Путь
;
// #конец_импорта


// #импорт include/logger.sbsl 


///////////////////////////////////////////////////////////////////
// ЛОГГЕР
///////////////////////////////////////////////////////////////////

метод ЛогСтарт()

    пер КаталогЛога = новый Файл(ОбщиеДобавитьРазделитель(ОбщиеКаталогСкрипта()) + "script_logs")
    если не КаталогЛога.Существует()
        Файлы.СоздатьКаталог(КаталогЛога)
    ;

    пер PID = "7777"

    пер ЛогДатаВремя = ДатаВремя.Сейчас().Представление("ггММдд_ЧЧммсс_")
    пер ИмяФайлаЛога = ОбщиеФайлСкрипта().ИмяБезРасширения + "_" + ЛогДатаВремя + PID + ".log"

    пер ФайлЛога = новый Файл(ОбщиеДобавитьРазделитель(КаталогЛога.Путь) + ИмяФайлаЛога)
    если не ФайлЛога.Существует()
        исп ПотокЗаписи = ФайлЛога.ОткрытьПотокЗаписи()
        ПотокЗаписи.СброситьБуферы()
        ПотокЗаписи.Закрыть()
    ;

    ЛогИнформация("Started")
    
;

метод НайтиТекущийФайлЛога(): Файл?

    пер МассивНайденныхФайлов = новый Массив(Файлы.Найти(ОбщиеДобавитьРазделитель(ОбщиеКаталогСкрипта()) + "script_logs",
        новый НастройкиПоиска()
            .ИмяСодержит(ОбщиеФайлСкрипта().ИмяБезРасширения)
            .ИсключитьКаталоги(Истина)
            .МаксимальнаяГлубина(1)
        ))

    если МассивНайденныхФайлов.Размер() > 0 
        МассивНайденныхФайлов.Сортировать((о1:Файл,о2:Файл) -> (о1.ИмяБезРасширения>о2.ИмяБезРасширения ? -1 : 1))
        возврат МассивНайденныхФайлов[0]
    иначе
        возврат Неопределено
    ;

;

метод ЛогВывод(ЛогУровень: Строка, ДатаВремяНачала: ДатаВремя? = Неопределено, ЛогТекст: Строка, Ошибка: Булево = Ложь)
    
    пер ЛогДлительность: Число = (ДатаВремяНачала != Неопределено ? (ДатаВремя.Сейчас() - ДатаВремяНачала).ВМиллисекундах() : 0)
    пер ЛогДатаВремя = ДатаВремя.Сейчас().Представление("гггг-ММ-дд ЧЧ:мм:сс.ССС")

    пер СтрокаЛог = "$ЛогДатаВремя-$ЛогДлительность [$ЛогУровень] $ЛогТекст"
    
    если Ошибка
        Консоль.ЗаписатьОшибку(СтрокаЛог)
    иначе
        Консоль.Записать(СтрокаЛог)
    ;

    пер ФайлЛога = НайтиТекущийФайлЛога()
    если ФайлЛога != Неопределено
        исп ПотокЗаписи = ФайлЛога.ОткрытьПотокЗаписи(Истина)
        ПотокЗаписи.Записать(СтрокаЛог + "\r\n")
    ;
    
;

метод ЛогИнформация(ЛогТекст: Строка, ДатаВремяНачала: ДатаВремя? = Неопределено)
    
    пер ЛогУровень = "INFO"
    ЛогВывод(ЛогУровень, ДатаВремяНачала, ЛогТекст)
    
;

метод ЛогОшибка(ЛогТекст: Строка, ДатаВремяНачала: ДатаВремя? = Неопределено)
    
    пер ЛогУровень = "ERROR"
    ЛогВывод(ЛогУровень, ДатаВремяНачала, ЛогТекст, Истина)
    
;

// #конец_импорта



///////////////////////////////////////////////////////////////////
// ПРИВАТНАЯ ЧАСТЬ
///////////////////////////////////////////////////////////////////

структура СтркутураОписаниеДистрибутива
    пер ЕдиныйПакетLinux: Булево = Ложь
    пер РучноеУдаление: Булево = Ложь
    пер Имя: Строка = ""
    пер Версия: Строка = ""
    пер Путь: Строка = ""
    пер Пакеты: Массив<Строка> = []
;


структура СтруктураПараметров
    // общие
    пер Задержка: Число = 0
    пер ВремяСтарта: ДатаВремя = ДатаВремя{2000-01-01}
    пер ЛимитВремени: Число = 0

    // параметры скрипта
    пер Версия: Строка = ""
    пер КаталогУстановки: Строка = ""
;

метод ПолучитьПараметры(СоответствиеПараметров: Соответствие<Строка, Строка>): СтруктураПараметров

    пер Параметры = новый СтруктураПараметров()
    
    Параметры.ВремяСтарта = ДатаВремя.Сейчас()

    Параметры.Версия = ОбщиеЗначениеПараметраСтрока(СоответствиеПараметров, "version")
    Параметры.КаталогУстановки = ОбщиеУбратьПоследнийРазделитель(ОбщиеЗначениеПараметраСтрока(СоответствиеПараметров, "setup-folder"))
    
    Параметры.ЛимитВремени = ОбщиеЗначениеПараметраЧисло(СоответствиеПараметров, "time-limit")
    Параметры.Задержка = ОбщиеЗначениеПараметраЧисло(СоответствиеПараметров, "max-delay")
    
    возврат Параметры

;


метод НайтиУстановленнуюПлатформу(Параметры: СтруктураПараметров): Массив<СтркутураОписаниеДистрибутива>

    пер НайденныеДистрибутивы: Массив<СтркутураОписаниеДистрибутива> = новый Массив<СтркутураОписаниеДистрибутива>()

    пер ЛямбдаПеремножитьСпискиСложением: (ЧитаемыйМассив<Строка>, ЧитаемыйМассив<Строка>)->ЧитаемыйМассив<Строка> = метод(Список1: ЧитаемыйМассив<Строка>, Список2: ЧитаемыйМассив<Строка>) ->
        пер Результат: Массив<Строка> = новый Массив<Строка>()
        для Значение1 из Список1
            для Значение2 из Список2
                Результат.Добавить(Значение1 + Значение2)
            ;
        ;
        возврат новый ЧитаемыйМассив(Результат)
    ;
    
    пер ТипОС: ПеречислениеОперационнаяСистема = ОбщиеТипОС(Истина)

    если ТипОС == ПеречислениеОперационнаяСистема.WINDOWS
    
        пер ИскатьВКаталоге: Булево = Истина
    
        пер Процесс: ПроцессОс = новый ПроцессОс("cmd" , [
            "/c",
            "\"${ОбщиеДобавитьРазделитель(ОбщиеКаталогСкрипта())}get_installed_platform_versions.cmd\""
        ])
        
        пер ПотокВыводаСтрокой: Строка = ОбщиеЗапуститьПроцессОС(Процесс, Неопределено, Параметры.ЛимитВремени, "cp866")

        пер СписокУстановленныхПрограмм: Массив<Строка> = ПотокВыводаСтрокой.Заменить("\r", "\n").Заменить("\n\n", "\n").Разделить("\n")
        для СтрокаДанных из СписокУстановленныхПрограмм
        
            пер Данные: Массив<Строка> = СтрокаДанных.Разделить(",")
            пер Версия: Строка = Данные[3].Сократить()
            пер КаталогУстановки: Строка = ОбщиеУбратьПоследнийРазделитель(Данные[1].Сократить())
            
            если Версия == Параметры.Версия и (Параметры.КаталогУстановки.Пусто() или КаталогУстановки == Параметры.КаталогУстановки)
                
                пер ОписаниеДистрибутива: СтркутураОписаниеДистрибутива = новый СтркутураОписаниеДистрибутива()
                ОписаниеДистрибутива.Имя = Данные[2]
                ОписаниеДистрибутива.Версия = Версия
                ОписаниеДистрибутива.Путь = КаталогУстановки
                НайденныеДистрибутивы.Добавить(ОписаниеДистрибутива)
                ИскатьВКаталоге = Ложь
                
            иначе если Версия == Параметры.Версия и не Параметры.КаталогУстановки.Пусто() 
                и (КаталогУстановки.Содержит(Параметры.КаталогУстановки) или Параметры.КаталогУстановки.Содержит(КаталогУстановки))
                
                пер Ошибка: Строка = "InstallLocation doesn't match exactly, but there is version, which installed in parent or child folder.\n" + 
                "Expected: " + Параметры.КаталогУстановки + "\n" +
                "Actual: " + КаталогУстановки
                ЛогОшибка(Ошибка)
                выбросить новый ИсключениеВремениВыполнения(Ошибка) 
            ;
            
        ;
        
        если ИскатьВКаталоге
        
            для ИсполняемыйФайлПуть из ЛямбдаПеремножитьСпискиСложением([ОбщиеДобавитьРазделитель(Параметры.КаталогУстановки), ОбщиеДобавитьРазделитель(Параметры.КаталогУстановки) + ОбщиеДобавитьРазделитель("bin")], ["1cv8.exe", "1cv8c.exe", "ragent.exe"])

                пер ИсполняемыйФайл: Файл = новый Файл(ИсполняемыйФайлПуть)

                если ИсполняемыйФайл.Существует() и Параметры.Версия == ОбщиеВерсияEXE(ИсполняемыйФайл)
                    
                    пер ОписаниеДистрибутива: СтркутураОписаниеДистрибутива = новый СтркутураОписаниеДистрибутива()
                    ОписаниеДистрибутива.Версия = Параметры.Версия
                    ОписаниеДистрибутива.Путь = ОбщиеУбратьПоследнийРазделитель(ИсполняемыйФайл.Каталог.Путь.ЗаканчиваетсяНа("bin") ? ИсполняемыйФайл.Каталог.Путь.Заменить(Файлы.СимволРазделителя + "bin", "") : ИсполняемыйФайл.Каталог.Путь)
                    ОписаниеДистрибутива.РучноеУдаление = Истина
                    НайденныеДистрибутивы.Добавить(ОписаниеДистрибутива)
                    
                    прервать
                    
                ;
            ;
        
        ;
        
    иначе если (новый Число(Параметры.Версия.Разделить(".")[2].Сократить())) > 19 
        
            пер НастройкиПоиска = новый НастройкиПоиска()
                .ИмяСодержит(Параметры.Версия)
                .ИсключитьФайлы(Истина)
                .ИсключитьСсылки(Истина)
                .МаксимальнаяГлубина(1)
                
            для Файл из Файлы.Найти("/opt/1cv8/x86_64", НастройкиПоиска)
                если Файл.Имя == Параметры.Версия
                    пер ОписаниеДистрибутива: СтркутураОписаниеДистрибутива = новый СтркутураОписаниеДистрибутива()
                    ОписаниеДистрибутива.Версия = Параметры.Версия
                    ОписаниеДистрибутива.Путь = ОбщиеУбратьПоследнийРазделитель(Файл.Путь)
                    ОписаниеДистрибутива.ЕдиныйПакетLinux = Истина
                    НайденныеДистрибутивы.Добавить(ОписаниеДистрибутива)
                ;
            ;
    
    иначе если ТипОС == ПеречислениеОперационнаяСистема.LINUX_DEB
    
        пер Процесс: ПроцессОс = новый ПроцессОс("dpkg-query" , ["-W", "-f=\${binary:Package}\\t\${Architecture}\\t\${Version}\\t\\n", "1c-enterprise-" + Параметры.Версия + "-*"])
        пер ПотокВыводаСтрокой: Строка = ОбщиеЗапуститьПроцессОС(Процесс, (КодОшибки:Число, Ошибка:Строка)->Неопределено, Параметры.ЛимитВремени)

        пер ОписаниеДистрибутива: СтркутураОписаниеДистрибутива = новый СтркутураОписаниеДистрибутива()
        ОписаниеДистрибутива.Версия = Параметры.Версия
        
        для Пакет из ОбщиеТекстВМассив(ПотокВыводаСтрокой)
            если не Пакет.НачинаетсяС("1c-enterprise-" + Параметры.Версия + "-")
                продолжить
            ;
            ОписаниеДистрибутива.Пакеты.Добавить(Пакет.Разделить("\t")[0])
        ;
        
        если ОписаниеДистрибутива.Пакеты.Размер() > 0
            НайденныеДистрибутивы.Добавить(ОписаниеДистрибутива)
        ;
        
    иначе если ТипОС == ПеречислениеОперационнаяСистема.LINUX_RPM

        пер Процесс: ПроцессОс = новый ПроцессОс("rpm" , ["-qa", "--queryformat", "\%{n}\\t\%{arch}\\t\%{v}-\%{release}\\t\\n"])
        пер ПотокВыводаСтрокой: Строка = ОбщиеЗапуститьПроцессОС(Процесс, (КодОшибки:Число, Ошибка:Строка)->Неопределено, Параметры.ЛимитВремени)

        пер ОписаниеДистрибутива: СтркутураОписаниеДистрибутива = новый СтркутураОписаниеДистрибутива()
        ОписаниеДистрибутива.Версия = Параметры.Версия
        
        для Пакет из ОбщиеТекстВМассив(ПотокВыводаСтрокой)
            если не Пакет.НачинаетсяС("1c-enterprise-" + Параметры.Версия) 
                продолжить
            ;
            ОписаниеДистрибутива.Пакеты.Добавить(Пакет.Разделить("\t")[0])
        ;
        
        если ОписаниеДистрибутива.Пакеты.Размер() > 0
            НайденныеДистрибутивы.Добавить(ОписаниеДистрибутива)
        ;

    ;
    
    возврат НайденныеДистрибутивы

;

метод КластерЗапущен(КаталогУстановки: Строка, ЛимитВремени: Число)

    если ОбщиеТипОС() == ПеречислениеОперационнаяСистема.WINDOWS

        пер Процесс: ПроцессОс = новый ПроцессОс("cmd" , [
            "/c",
            "\"${ОбщиеДобавитьРазделитель(ОбщиеКаталогСкрипта())}is_cluster_started.cmd\""
        ])
        
        пер ПотокВыводаСтрокой: Строка = ОбщиеЗапуститьПроцессОС(Процесс, Неопределено, ЛимитВремени, "cp866")
        
        пер СписокЗапущенныхПрограмм = ОбщиеТекстВМассив(ПотокВыводаСтрокой)
        для СтрокаДанных из СписокЗапущенныхПрограмм
            
            пер Данные: Массив<Строка> = СтрокаДанных.Разделить(",")
            
            если Данные.Размер() < 2
                продолжить
            ;
            
            пер ПутьEXE: Строка = Данные[1].Сократить()
            
            если ПутьEXE.Содержит(КаталогУстановки, Истина)
                пер Ошибка: Строка = "cluster processes is running: " + ПутьEXE
                ЛогОшибка(Ошибка)
                выбросить новый ИсключениеВремениВыполнения(Ошибка) 
            ;
            
        ;
        
    иначе
        
        пер Вывод: Строка = ОбщиеЗапуститьКаскадПроцессов([
            ["ps", "-eo", "pid,command"],
            ["grep", "-i", "ragent"],
            ["grep", "-i", КаталогУстановки],
            ["grep", "-v", " sudo"],
            ["grep", "-v", "grep "]
        ])
        
        пер ВыводВМассив = ОбщиеТекстВМассив(Вывод)
        если ВыводВМассив.Размер() > 0
            пер Ошибка: Строка = "cluster processes is running: \n" + ВыводВМассив.ВСтроку()
            ЛогОшибка(Ошибка)
            выбросить новый ИсключениеВремениВыполнения(Ошибка) 
        ;

    ;

;



///////////////////////////////////////////////////////////////////
// ТОЧКА ВХОДА
///////////////////////////////////////////////////////////////////


метод Скрипт(СоответствиеПараметров: Соответствие<Строка, Строка>): Число

    // Тестовый режим.
    если ОбщиеЗначениеПараметраБулево(СоответствиеПараметров, "test-mode")
        ЛогИнформация("Test mode completed successfully")
        возврат 0
    ;

    ЛогСтарт()

    пер Параметры = ПолучитьПараметры(СоответствиеПараметров)
    
    ОбщиеПроверитьОбязательныеПараметры(Параметры, [
              новый СтруктураПроверкиПараметра("version", Параметры.Версия,  
                    метод() ->
                        
                        пер Результат: Булево = Истина
                        пер ЧастиВерсии: Массив<Строка> = Параметры.Версия.Разделить(".")
                        
                        попытка
                            Результат = (новый Число(ЧастиВерсии[0]) == 8 и (новый Число(ЧастиВерсии[1])) == 3 и ЧастиВерсии[2].ТолькоЦифры() и ЧастиВерсии[3].ТолькоЦифры())
                        поймать Исключение: Исключение
                            Результат = Ложь
                        ;

                        возврат Результат
                        
                    ;
              ),
              
              новый СтруктураПроверкиПараметра("setup-folder", Параметры.КаталогУстановки, () -> (не Параметры.КаталогУстановки.Пусто() или ОбщиеТипОС() == ПеречислениеОперационнаяСистема.LINUX))
        ]
    )

    // Случайная задержка перед выполнением операции
    если Параметры.Задержка > 0
        ОбщиеПауза(Параметры.Задержка, Истина)
    ;

    Параметры.ВремяСтарта = ДатаВремя.Сейчас()

    ЛогИнформация("Platform searching", Параметры.ВремяСтарта)
    
    пер ТипОС = ОбщиеТипОС(Истина)

    для Дистрибутив из НайтиУстановленнуюПлатформу(Параметры)
        
        ЛогИнформация("Is cluster started", Параметры.ВремяСтарта)
        КластерЗапущен(Дистрибутив.Путь, Параметры.ЛимитВремени)
        
        если Дистрибутив.РучноеУдаление

            ЛогИнформация("Old version installed via copy", Параметры.ВремяСтарта)
            
            для ИмяDLL из ["comcntr.dll", "radmin.dll", "bin\\comcntr.dll", "bin\\radmin.dll"]
                пер Процесс: ПроцессОс = новый ПроцессОс("regsvr32" , ["/s","/i", "/n", ОбщиеДобавитьРазделитель(Дистрибутив.Путь) + ИмяDLL])
                ОбщиеЗапуститьПроцессОС(Процесс, (КодОшибки: Число, ТекстОшибки: Строка) -> Неопределено)
            ;
            
            пер НастройкиПоиска: НастройкиПоиска = новый НастройкиПоиска()
            НастройкиПоиска.МаксимальнаяГлубина(1)
            для Файл из Файлы.Найти(Дистрибутив.Путь, НастройкиПоиска)
                Файлы.Удалить(Файл)
            ;
            
        иначе
        
            ЛогИнформация("Old version installed via setup", Параметры.ВремяСтарта)
            
            если ТипОС == ПеречислениеОперационнаяСистема.WINDOWS
            
                пер Процесс: ПроцессОс = новый ПроцессОс("wmic" , ["product","where", "Name='%{Дистрибутив.Имя}'", "call", "uninstall"])
                пер ПотокВыводаСтрокой: Строка = ОбщиеЗапуститьПроцессОС(Процесс, Неопределено, Параметры.ЛимитВремени, "cp866")
                если ПотокВыводаСтрокой.Содержит("ReturnValue =")
                    пер КодОшибкиСтрокой: Строка = ПотокВыводаСтрокой.Разделить("ReturnValue =")[1]
                    пер КодОшибки: Число = новый Число(КодОшибкиСтрокой.Подстрока(0, КодОшибкиСтрокой.Найти(";")).Сократить())
                    если КодОшибки != 0
                        выбросить новый ИсключениеВремениВыполнения(ПотокВыводаСтрокой)
                    ;
                ;
                
            иначе если Дистрибутив.ЕдиныйПакетLinux
            
                пер Процесс: ПроцессОс = новый ПроцессОс(ОбщиеДобавитьРазделитель(Дистрибутив.Путь) + "uninstaller-full" , ["--mode", "unattended"])
                пер ПотокВыводаСтрокой: Строка = ОбщиеЗапуститьПроцессОС(Процесс, Неопределено, Параметры.ЛимитВремени)
                
                если не ПотокВыводаСтрокой.Пусто()
                    ЛогИнформация(ПотокВыводаСтрокой)
                ;
            
            иначе если ТипОС == ПеречислениеОперационнаяСистема.LINUX_DEB

                пер ПараметрыКоманды = ["--purge"]
                ПараметрыКоманды.ДобавитьВсе(Дистрибутив.Пакеты)
        
                пер Процесс: ПроцессОс = новый ПроцессОс("dpkg" , новый ЧитаемыйМассив<Строка>(ПараметрыКоманды))
                пер ПотокВыводаСтрокой: Строка = ОбщиеЗапуститьПроцессОС(Процесс, Неопределено, Параметры.ЛимитВремени)
                
                если не ПотокВыводаСтрокой.Пусто()
                    ЛогИнформация(ПотокВыводаСтрокой)
                ;
                
            иначе если ТипОС == ПеречислениеОперационнаяСистема.LINUX_RPM

                пер ПараметрыКоманды = ["-evh", "--nodeps"]
                ПараметрыКоманды.ДобавитьВсе(Дистрибутив.Пакеты)
        
                пер Процесс: ПроцессОс = новый ПроцессОс("rpm" , новый ЧитаемыйМассив<Строка>(ПараметрыКоманды))
                пер ПотокВыводаСтрокой: Строка = ОбщиеЗапуститьПроцессОС(Процесс, Неопределено, Параметры.ЛимитВремени)
                
                если не ПотокВыводаСтрокой.Пусто()
                    ЛогИнформация(ПотокВыводаСтрокой)
                ;
                    
            ; 
        
        ;
    
        ОбщиеВремяИстекло(Параметры.ВремяСтарта, Параметры.ЛимитВремени)
        
    ;
    

    ОбщиеВремяИстекло(Параметры.ВремяСтарта, Параметры.ЛимитВремени)

    ЛогИнформация("Finished", Параметры.ВремяСтарта)
    возврат 0
  
;
