// #импорт include/common.sbsl

///////////////////////////////////////////////////////////////////
// ИСКЛЮЧЕНИЯ И СТРУКТУРЫ
///////////////////////////////////////////////////////////////////

исключение ИсключениеВремениВыполнения
;

исключение ИсключениеТаймаут
    пер Таймаут: Число
;

исключение ИсключениеФайлНеНайден
    пер КаталогПуть: Строка
;

исключение ИсключениеКаталогОказалсяФайлом
    пер КаталогПуть: Строка
;

исключение ИсключениеОтсутствуютОбязательныеПараметры
;

структура СтруктураПроверкиПараметра
    пер ИмяПараметра: Строка = "" 
    обз пер Значение: Строка|Число|ДатаВремя
    обз пер ФункцияПроверки: ()->Булево
;

перечисление ПеречислениеОперационнаяСистема
    WINDOWS
    LINUX
    LINUX_DEB
    LINUX_RPM
;


///////////////////////////////////////////////////////////////////
// ОБЩИЕ
///////////////////////////////////////////////////////////////////


метод ОбщиеВремяИстекло(ВремяСтарта: ДатаВремя, ЛимитВремени: Число)

    если ЛимитВремени == 0 или ВремяСтарта <= ДатаВремя{2000-01-01}
        возврат
    ;

    если (ДатаВремя.Сейчас() - ВремяСтарта).Секунды > ЛимитВремени
        пер Ошибка = "Time limit expired: $ЛимитВремени sec." 
        ЛогОшибка(Ошибка)
        выбросить новый ИсключениеТаймаут(Ошибка, ЛимитВремени)
    ;

;

метод ОбщиеПодходитПодШаблон(ПроверяемаяСтрока: Строка, Шаблон: Строка, ИнвертироватьШаблон: Булево): Булево

    пер Подходит = Ложь

    пер регВыражение = новый Образец(Шаблон)

    если ИнвертироватьШаблон
        Подходит = (регВыражение.НайтиСовпадения(ПроверяемаяСтрока).Размер() == 0)
    иначе
        Подходит = (регВыражение.НайтиСовпадения(ПроверяемаяСтрока).Размер() > 0)
    ;
    
    возврат Подходит

;

метод ОбщиеЭтоАрхив(Путь: Строка): Булево

    пер ЭтоАрхив: Булево = Путь.ВНижнийРегистр().ЗаканчиваетсяНа(".zip")
                            или Путь.ВНижнийРегистр().ЗаканчиваетсяНа(".rar")
                            или Путь.ВНижнийРегистр().ЗаканчиваетсяНа(".gz")
    
    возврат ЭтоАрхив

;

метод ОбщиеДобавитьРазделитель(Путь: Строка): Строка
  возврат Путь.ЗаканчиваетсяНа(Файлы.СимволРазделителя) ? Путь : Путь + Файлы.СимволРазделителя
;

метод ОбщиеУбратьПоследнийРазделитель(Путь: Строка): Строка
  возврат Путь.ЗаканчиваетсяНа(Файлы.СимволРазделителя) ? Путь.ПодстрокаСНачала(Путь.Длина() - 1) : Путь
;

метод ОбщиеПроверитьОбязательныеПараметры(Параметры: СтруктураПараметров, ПроверкиПараметров: ЧитаемыйМассив<СтруктураПроверкиПараметра>)

    пер ЕстьОшибки: Булево = Ложь
    
    для ПроверкаПараметра из ПроверкиПараметров
    
        если не ПроверкаПараметра.ФункцияПроверки()

            пер ИмяПараметра = ПроверкаПараметра.ИмяПараметра
            пер Значение = ПроверкаПараметра.Значение
            
            ЛогОшибка("Parameter error: $ИмяПараметра, value: $Значение")
            ЕстьОшибки = Истина
            
        ;
    
    ;
    
    если ЕстьОшибки
        выбросить новый ИсключениеОтсутствуютОбязательныеПараметры("FAIL: parameters check")
    ;
    
;

метод ОбщиеЗначениеПараметраБулево(СоответствиеПараметров: Соответствие<Строка, Строка>, Ключ: Строка, ЗначениеПоумолчанию: Булево = Ложь): Булево

    пер Результат = ЗначениеПоумолчанию

    попытка
    
        пер Значение = СоответствиеПараметров[Ключ] 
        
        выбор Значение.ВНижнийРегистр()
        когда "истина"
            Результат = Истина
        когда "true"
            Результат = Истина
        когда "1"
            Результат = Истина
        когда "on"
            Результат = Истина
        когда "да"
            Результат = Истина
        когда "yes"
            Результат = Истина
        когда "вкл"
            Результат = Истина
        когда "вкл."
            Результат = Истина
        когда "включено"
            Результат = Истина
        иначе
            Результат = Ложь
        ;
        
    поймать Исключение: Исключение
        Результат = ЗначениеПоумолчанию
    ;
    
    возврат Результат

;

метод ОбщиеЗначениеПараметраЧисло(СоответствиеПараметров: Соответствие<Строка, Строка>, Ключ: Строка, ЗначениеПоУмолчанию: Число = 0): Число

    пер Результат = ЗначениеПоУмолчанию

    попытка
        пер Значение = СоответствиеПараметров[Ключ] 
        Результат = новый Число(Значение)
    поймать Исключение: Исключение
        Результат = ЗначениеПоУмолчанию
    ;
    
    возврат Результат

;

метод ОбщиеЗначениеПараметраСтрока(СоответствиеПараметров: Соответствие<Строка, Строка>, Ключ: Строка, ЗначениеПоУмолчанию: Строка = ""): Строка

    пер Результат = ЗначениеПоУмолчанию

    попытка
        пер Значение = СоответствиеПараметров[Ключ] 
        Результат = Значение.ВСтроку()

        если Результат.Сравнить("null", Истина) == 0
            Результат = ЗначениеПоУмолчанию
        ;
        
    поймать Исключение: Исключение
        Результат = ЗначениеПоУмолчанию
    ;
    
    возврат Результат

;

метод ОбщиеПауза(ПаузаСекунд: Число, Случайная: Булево = Ложь)

    пер ПаузаРеальная = ПаузаСекунд
    
    если Случайная
    
        пер ГСЧ = новый СлучайныйГенератор(ДатаВремя.Сейчас().Миллисекунда)
        ПаузаРеальная = ГСЧ.СлучайноеЦелое(0, ПаузаСекунд)

    ;
    
    ПаузаРеальная = ПаузаРеальная == 0 ? ПаузаСекунд : ПаузаРеальная

    если Случайная
        
        ЛогИнформация("Selected delay $ПаузаРеальная sec.")
        
    ;
    
    Пауза(новый Длительность(0, 0, ПаузаРеальная))
    
;

метод ОбщиеТипОС(УточнятьТипLinux: Булево = Ложь): ПеречислениеОперационнаяСистема

    пер ТипОС: ПеречислениеОперационнаяСистема = СредаИсполнения.ПолучитьПеременную("OS").Содержит("Windows", Истина) ? ПеречислениеОперационнаяСистема.WINDOWS : ПеречислениеОперационнаяСистема.LINUX
    
    если ТипОС == ПеречислениеОперационнаяСистема.LINUX и УточнятьТипLinux
        
        ТипОС = ПеречислениеОперационнаяСистема.LINUX_DEB
        
        пер Процесс: ПроцессОс = новый ПроцессОс("dpkg", ["--version"])
        
        попытка
            Процесс.Запустить()
            Процесс.ПолучитьПотокВывода().ПрочитатьКакСтроку()
        поймать Игнорировать: Исключение
            ТипОС = ПеречислениеОперационнаяСистема.LINUX_RPM
        ; 
        
    ;
    
    возврат ТипОС
    
;

метод ОбщиеАрхитектураОС(): Число
    если СредаИсполнения.ПолучитьСвойство("os.arch").Содержит("64")
        возврат 64
    иначе
        возврат 32
    ;
;

метод ОбщиеНайтиФайл(Путь: Строка|Файл, ИмяФайла: Строка): Файл?

    пер НайденныйФайл: Файл? = Неопределено
    
    пер НастройкиПоиска: НастройкиПоиска = новый НастройкиПоиска()
    НастройкиПоиска.ИмяСодержит(ИмяФайла)
    НастройкиПоиска.ИсключитьКаталоги(Истина)
    
    пер МассивФайлов: ЧитаемыйМассив<Файл> = Файлы.Найти(Путь, НастройкиПоиска)
    для Файл из МассивФайлов
        если Файл.Имя == ИмяФайла
            НайденныйФайл = Файл
            прервать
        ;
    ;

    возврат НайденныйФайл
;

метод ОбщиеФайлСкрипта(): Файл
    пер ФайлСкрипта: Файл = новый Файл(Скрипт.ПутьТекущегоСкрипта)
    возврат ФайлСкрипта
;

метод ОбщиеКаталогСкрипта(): Строка
    пер ФайлСкрипта: Файл? = ОбщиеФайлСкрипта()
    возврат (ФайлСкрипта != Неопределено ? ФайлСкрипта.Каталог.Путь : "")
;

метод ОбщиеЗапуститьПроцессОС(Процесс: ПроцессОс, ОбработкаОшибок: ((Число, Строка)->void)? = Неопределено, ЛимитВремени: Число = 0, Кодировка: Строка = "UTF-8", ОжидатьЗавершения: Булево = Истина): Строка

    пер Ошибка: Строка = ""
    пер ФайлПотокаВывода = Файлы.СоздатьВременныйФайл("ex_")
    пер ПотокВывода: Строка = ""
    
    Процесс.Запустить()
	если не ОжидатьЗавершения
		возврат ПотокВывода
	;
    
    пер ВсеОк: Булево = Истина
    
    если ЛимитВремени > 0  
        ВсеОк = Процесс.ОжидатьЗавершения(Длительность.ИзСекунд(ЛимитВремени))
    иначе если ЛимитВремени == -1
        ВсеОк = Истина
        возврат ""
    иначе
        ВсеОк = Процесс.ОжидатьЗавершения()
    ;
    
    если не ВсеОк
        Ошибка = "Timeout expired: " + ЛимитВремени
        ЛогОшибка(Ошибка)
        выбросить новый ИсключениеТаймаут(Ошибка, ЛимитВремени)
    ;        

    пер КодОшибки: Число? = Процесс.ПолучитьКодВозврата()
    если КодОшибки == Неопределено
        КодОшибки = 0
    ;

    ПотокВывода = Процесс.ПолучитьПотокВывода().ПрочитатьКакСтроку(Кодировка)
    Ошибка = Процесс.ПолучитьПотокОшибок().ПрочитатьКакСтроку()

    если КодОшибки != 0 или не Ошибка.Пусто()
        если ОбработкаОшибок == Неопределено
            пер ТекстОшибки: Строка = "Return code: $КодОшибки. $Ошибка" 
            ЛогОшибка(ПотокВывода + ТекстОшибки)
            выбросить новый ИсключениеВремениВыполнения(ТекстОшибки)
        иначе
            ОбработкаОшибок(КодОшибки, ПотокВывода + "\n" + Ошибка)
        ;
    ;
    
    возврат ПотокВывода
    
;

метод ОбщиеЗапуститьКаскадПроцессов(Параметры: ЧитаемыйМассив<ЧитаемыйМассив<Строка>>): Строка

    пер Вывод: Строка = ""
    пер Вход: Строка = ""

    для ОписаниеКоманды из Параметры
        
        пер Команда: Строка = ОписаниеКоманды[0]
        пер ПараметрыКоманды: ЧитаемыйМассив<Строка> = (Параметры.Размер() > 1 ? ОписаниеКоманды.ПодМассив(1) : [])
        
        пер Процесс: ПроцессОс = новый ПроцессОс(Команда , ПараметрыКоманды)
        Процесс.Запустить()
        Процесс.ПолучитьПотокВвода().Записать(Вход).Закрыть()
        Вывод = Процесс.ПолучитьПотокВывода().ПрочитатьКакСтроку()
        Вход = Вывод
    ;
        
    возврат Вывод
        
;


метод ОбщиеУбратьГраничныеСимволы(Текст: Строка, Символ: Строка): Строка

    если Текст.НачинаетсяС(Символ)
        Текст = Текст.Подстрока(1)
    ;
    
    если Текст.ЗаканчиваетсяНа(Символ)
        Текст = Текст.Подстрока(0, Текст.Длина() - Мин(1, Текст.Длина()))
    ;
    
    возврат Текст

;

метод ОбщиеКодироватьВURL(Данные: Строка): Строка

    пер ДанныеКодированные: Массив<Строка>

    пер КодируемыеСимволы: Строка = ":/?#[]@!$&'()*+,;=ёйцукенгшщзхъфывапролджэячсмитьбюЁЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮ"
    пер ДекодируемыеСимволы: Строка = "#3A#2F#3F#23#5B#5D#40#21#24#26#27#28#29#2A#2B#2C#3B#3D#D1#91#D0#B9#D1#86#D1#83#D0#BA#D0#B5#D0#BD#D0#B3#D1#88#D1#89#D0#B7#D1#85#D1#8A#D1#84#D1#8B#D0#B2#D0#B0#D0#BF#D1#80#D0#BE#D0#BB#D0#B4#D0#B6#D1#8D#D1#8F#D1#87#D1#81#D0#BC#D0#B8#D1#82#D1#8C#D0#B1#D1#8E#D0#81#D0#99#D0#A6#D0#A3#D0#9A#D0#95#D0#9D#D0#93#D0#A8#D0#A9#D0#97#D0#A5#D0#AA#D0#A4#D0#AB#D0#92#D0#90#D0#9F#D0#A0#D0#9E#D0#9B#D0#94#D0#96#D0#AD#D0#AF#D0#A7#D0#A1#D0#9C#D0#98#D0#A2#D0#AC#D0#91#D0#AE"
    пер ДекодируемыеСимволыМассив: Массив<Строка> = ДекодируемыеСимволы.Разделить("#")
    
    для Символ из Данные
        пер Позиция = КодируемыеСимволы.Найти(Символ)
        если Позиция >= 0
            ДанныеКодированные.Добавить("%" + ДекодируемыеСимволыМассив[Позиция])
        иначе
            ДанныеКодированные.Добавить(Символ)
        ;
    ;
    
    
    возврат Строки.Соединить(ДанныеКодированные, "")
    
;

метод ОбщиеАрхитектураEXE(ФайлEXE: Файл): Число

    исп ПотокЧтения: ПотокЧтения = ФайлEXE.ОткрытьПотокЧтения()
    пер ЧтениеДанных: ЧтениеДанных = новый ЧтениеДанных(ПотокЧтения)
    пер ПозицияPE: Число = ЧтениеДанных.ПропуститьДо("PE")
    если ПозицияPE < 200 или ПозицияPE > 400
        возврат 0
    ;
    
    ЧтениеДанных.Пропустить(2)
    пер Разрядность: Число? = ЧтениеДанных.ПрочитатьЦелое16()
    если Разрядность == 0x4c01
        возврат 32
    иначе если Разрядность == 0x6486
        возврат 64
    ;
    
    возврат 0

;

метод ОбщиеВерсияEXE(ФайлEXE: Файл): Строка

    пер Процесс: ПроцессОс = новый ПроцессОс("wmic" , ["datafile", "where", "Name=\"" + ФайлEXE.Путь.Заменить("\\", "\\\\")  + "\"", "get", "Version", "/value"])
    пер Данные: Строка = ОбщиеЗапуститьПроцессОС(Процесс, Неопределено,  0, "cp866")
    
    пер Версия: Строка = Данные
        .Заменить("\r", "")
        .Заменить("\n", "")
        .Сократить()
        .Разделить("=")[1]
    
    возврат Версия

;


метод ОбщиеТекстВМассив(Текст: Строка, ВключаяПустые: Булево = Ложь): Массив<Строка>
    возврат Текст.Заменить("\r\n", "\n").Заменить("\r", "\n").Разделить("\n", ВключаяПустые)
;

метод ОбщиеОчиститьКаталог(Каталог: Файл|Строка, СоздаватьЕслиОтсутствует: Булево = Истина)
    
    пер КаталогФайл: Файл = (Каталог это Строка) ? новый Файл(Каталог как Строка) : Каталог как Файл
    
    если КаталогФайл.Существует() и не КаталогФайл.ЯвляетсяКаталогом()
        выбросить новый ИсключениеКаталогОказалсяФайлом("Destination path exists and not a directory", КаталогФайл.Путь)
    ;
    
    если КаталогФайл.Существует()
    
        пер МассивФайлов = новый Массив(Файлы.Найти(КаталогФайл, новый НастройкиПоиска().МаксимальнаяГлубина(1)))
        для Файл из МассивФайлов
            Файлы.Удалить(Файл, Истина)
        ;
    
    иначе если СоздаватьЕслиОтсутствует
        Файлы.СоздатьКаталог(Каталог)
    ;
    
;

метод ОбщиеРаспаковатьАрхив(ФайлАрхива: Файл, Каталог: Файл|Строка, ЛимитВремени: Число = 0)

    пер КаталогПриемник: Файл = (Каталог это Строка) ? новый Файл(Каталог как Строка) : Каталог как Файл

    пер ФайлRAR: Файл = новый Файл(ОбщиеДобавитьРазделитель(ОбщиеКаталогСкрипта())
        + Файлы.СимволРазделителя + ".." + Файлы.СимволРазделителя   
        + "external_utils" + Файлы.СимволРазделителя 
        + "unrar" + Файлы.СимволРазделителя
        + "unrar" + (ОбщиеТипОС() == ПеречислениеОперационнаяСистема.WINDOWS ? ".exe" : ""))
    
    если ФайлАрхива.Расширение.ВНижнийРегистр() == "rar" и не ФайлRAR.Существует()
        пер Ошибка: Строка = "Cannot find unrar."
        ЛогОшибка(Ошибка)
        выбросить новый ИсключениеФайлНеНайден(Ошибка, ФайлRAR.Путь)        
    ;
    
    если ФайлАрхива.Расширение == "zip"
        
        пер ФайлZip = новый ФайлZip(ФайлАрхива.Путь)
        ФайлZip.ИзвлечьВсе(КаталогПриемник)
        
    иначе если ФайлАрхива.Расширение == "rar"

        пер ПараметрыЗапуска: ЧитаемыйМассив<Строка> = новый ЧитаемыйМассив<Строка>(["x", "\"" + ФайлАрхива.Путь + "\"", "\"" + КаталогПриемник + "\""])
        пер Процесс: ПроцессОс = новый ПроцессОс(ФайлRAR.Путь, ПараметрыЗапуска)
        
        ОбщиеЗапуститьПроцессОС(Процесс, 
            метод(КодОшибки: Число, ТекстОшибки: Строка) -> 
                если КодОшибки != 0 или не ТекстОшибки.Пусто()
                    пер Ошибка: Строка = "UnRAR error. Return code: $КодОшибки. $ТекстОшибки" + "\n" + ФайлRAR.Путь + " " + Строки.Соединить(ПараметрыЗапуска, " ")  
                    ЛогОшибка(Ошибка)
                    выбросить новый ИсключениеВремениВыполнения(Ошибка)
                ;
            ;
        , ЛимитВремени, "cp866")
    
    иначе если ФайлАрхива.Расширение == "gz"
        
        пер Процесс: ПроцессОс = новый ПроцессОс("tar" , ["-xzf", ФайлАрхива.Путь, "-C", КаталогПриемник])
        ОбщиеЗапуститьПроцессОС(Процесс, Неопределено,  ЛимитВремени)
        
    ;
    
;

метод ОбщееПолучитьИнтерактивнуюСессиюПользователя(Пользователь: Строка): Строка
    пер МассивПараметров: Массив<Строка> = []
    пер ИдентификаторСессии = "-1"
    
    пер ЧастиИмениПользователя = Пользователь.Разделить("\\")
    пер ИмяПользователя = ЧастиИмениПользователя[0]

    если ЧастиИмениПользователя.Размер() > 1
        ИмяПользователя = ЧастиИмениПользователя[1]
    ;

    МассивПараметров.Добавить("query")
    МассивПараметров.Добавить("session")
    МассивПараметров.Добавить(ИмяПользователя)
    МассивПараметров.Добавить("|")
    МассивПараметров.Добавить("select")
    МассивПараметров.Добавить("-skip")
    МассивПараметров.Добавить("1")
    МассивПараметров.Добавить("-first")
    МассивПараметров.Добавить("1")

    пер Процесс: ПроцессОс = новый ПроцессОс("powershell", МассивПараметров, Истина)

    попытка 
        ОбщиеЗапуститьПроцессОС(Процесс, Неопределено, 0, "cp866", Ложь)
        Процесс.ОжидатьЗавершения()

        пер ПотокВывода = Процесс.ПолучитьПотокВывода()

        пер ТекстВывода = ПотокВывода.ПрочитатьКакСтроку("cp866")
        пер СтрокиВывода = ОбщиеТекстВМассив(ТекстВывода)

        для ТекущаяСтрока из СтрокиВывода
            пер ДанныеСтрокиВывода = ТекущаяСтрока.Разделить(" ")

            если ДанныеСтрокиВывода.Размер() > 2
                ИдентификаторСессии = ДанныеСтрокиВывода[2]
            ;
        ;

        ЛогИнформация(ТекстВывода)

    поймать Исключение: Исключение
        выбросить Исключение
    ;

    возврат ИдентификаторСессии
;

метод ОбщееПолучитьАдресSOAPСервиса(АдресВебСервера: Строка, ИмяПубликации: Строка, Сервис: Строка): Строка
    возврат "%{АдресВебСервера}/%{ИмяПубликации}/ws/%{Сервис}.1cws"
;

метод ОбщееВыполнитьSOAPЗапрос(АдресSOAPСервиса: Строка, Запрос: Строка, Пользователь: Строка = "", Пароль: Строка = ""): Строка
    
    пер Аутентификация: АутентификацияHttp = новый АутентификацияHttp(Пользователь, Пароль)
    пер UserAgent = "1C+Enterprise/8.3"

    исп Ответ: ОтветHttp = КлиентHttp.САутентификацией(Аутентификация)
        .СБазовымUrl(АдресSOAPСервиса)
        .ЗапросPost("")
        .УстановитьТело(Запрос)
        .ДобавитьЗаголовок("User-Agent", UserAgent)
        .ДобавитьЗаголовок("Accept", "*/*")
        .УстановитьТипСодержимого("application/soap+xml")
        .УстановитьТаймаутЗапроса(60с)
        .УстановитьТаймаутСоединения(60с)
        .Выполнить()

    если Ответ.КодСостояния == 200
        возврат Ответ.Тело.ПрочитатьКакСтроку()
    иначе
        выбросить новый ИсключениеВремениВыполнения("Response was returned with status code: %{Ответ.КодСостояния}; Message: %{Ответ.Тело.ПрочитатьКакСтроку()}")
    ;

    возврат ""
;

метод ОбщееНайтиИсполняемыйФайлПлатформы(ПутьКПлатформе: Строка, ИмяИсполняемогоФайла: Строка): Строка
    пер ЭтоWindows = (ОбщиеТипОС() == ПеречислениеОперационнаяСистема.WINDOWS)
    пер НастройкиПоискаДиректорииBin = новый НастройкиПоиска()
        .ИмяСодержит("bin")
        .ИсключитьФайлы(Истина)
    пер ДиректорияBin = ""

    если не Файлы.Найти(ОбщиеУбратьПоследнийРазделитель(ПутьКПлатформе), НастройкиПоискаДиректорииBin).Пусто()
         ДиректорияBin = ОбщиеДобавитьРазделитель("bin")

    ;

    пер ПутьКДиректорииBin = "${ОбщиеДобавитьРазделитель(ПутьКПлатформе)}%{ДиректорияBin}"
    ПутьКДиректорииBin = ОбщиеУбратьПоследнийРазделитель(ПутьКДиректорииBin)

    пер Расширение = (ЭтоWindows ? ".exe" : "")
    пер ПутьКФайлу = "${ОбщиеДобавитьРазделитель(ПутьКДиректорииBin)}%{ИмяИсполняемогоФайла}%{Расширение}"

    возврат новый Файл(ПутьКФайлу).Путь
;
// #конец_импорта


// #импорт include/logger.sbsl


///////////////////////////////////////////////////////////////////
// ЛОГГЕР
///////////////////////////////////////////////////////////////////

метод ЛогСтарт()

    пер КаталогЛога = новый Файл(ОбщиеДобавитьРазделитель(ОбщиеКаталогСкрипта()) + "script_logs")
    если не КаталогЛога.Существует()
        Файлы.СоздатьКаталог(КаталогЛога)
    ;

    пер PID = "7777"

    пер ЛогДатаВремя = ДатаВремя.Сейчас().Представление("ггММдд_ЧЧммсс_")
    пер ИмяФайлаЛога = ОбщиеФайлСкрипта().ИмяБезРасширения + "_" + ЛогДатаВремя + PID + ".log"

    пер ФайлЛога = новый Файл(ОбщиеДобавитьРазделитель(КаталогЛога.Путь) + ИмяФайлаЛога)
    если не ФайлЛога.Существует()
        исп ПотокЗаписи = ФайлЛога.ОткрытьПотокЗаписи()
        ПотокЗаписи.СброситьБуферы()
        ПотокЗаписи.Закрыть()
    ;

    ЛогИнформация("Started")
    
;

метод НайтиТекущийФайлЛога(): Файл?

    пер МассивНайденныхФайлов = новый Массив(Файлы.Найти(ОбщиеДобавитьРазделитель(ОбщиеКаталогСкрипта()) + "script_logs",
        новый НастройкиПоиска()
            .ИмяСодержит(ОбщиеФайлСкрипта().ИмяБезРасширения)
            .ИсключитьКаталоги(Истина)
            .МаксимальнаяГлубина(1)
        ))

    если МассивНайденныхФайлов.Размер() > 0 
        МассивНайденныхФайлов.Сортировать((о1:Файл,о2:Файл) -> (о1.ИмяБезРасширения>о2.ИмяБезРасширения ? -1 : 1))
        возврат МассивНайденныхФайлов[0]
    иначе
        возврат Неопределено
    ;

;

метод ЛогВывод(ЛогУровень: Строка, ДатаВремяНачала: ДатаВремя? = Неопределено, ЛогТекст: Строка, Ошибка: Булево = Ложь)
    
    пер ЛогДлительность: Число = (ДатаВремяНачала != Неопределено ? (ДатаВремя.Сейчас() - ДатаВремяНачала).ВМиллисекундах() : 0)
    пер ЛогДатаВремя = ДатаВремя.Сейчас().Представление("гггг-ММ-дд ЧЧ:мм:сс.ССС")

    пер СтрокаЛог = "$ЛогДатаВремя-$ЛогДлительность [$ЛогУровень] $ЛогТекст"
    
    если Ошибка
        Консоль.ЗаписатьОшибку(СтрокаЛог)
    иначе
        Консоль.Записать(СтрокаЛог)
    ;

    пер ФайлЛога = НайтиТекущийФайлЛога()
    если ФайлЛога != Неопределено
        исп ПотокЗаписи = ФайлЛога.ОткрытьПотокЗаписи(Истина)
        ПотокЗаписи.Записать(СтрокаЛог + "\r\n")
    ;
    
;

метод ЛогИнформация(ЛогТекст: Строка, ДатаВремяНачала: ДатаВремя? = Неопределено)
    
    пер ЛогУровень = "INFO"
    ЛогВывод(ЛогУровень, ДатаВремяНачала, ЛогТекст)
    
;

метод ЛогОшибка(ЛогТекст: Строка, ДатаВремяНачала: ДатаВремя? = Неопределено)
    
    пер ЛогУровень = "ERROR"
    ЛогВывод(ЛогУровень, ДатаВремяНачала, ЛогТекст, Истина)
    
;

// #конец_импорта


// #импорт include/platform.sbsl

///////////////////////////////////////////////////////////////////
// РАБОТА С ПЛАТФОРМОЙ
///////////////////////////////////////////////////////////////////

исключение ИсключениеОшибкаЗапускаПлатформы
; 


структура СтруктураПараметрыЗапускаПлатформы
    пер Конфигуратор: Булево = Ложь
    пер Сервер: Строка = "" 
    пер Порт: Число = 1541
    пер ИнформационнаяБаза: Строка = ""
    пер НеОтображатьДиалогиПриЗапуске: Булево = Истина
    пер НеОтображатьСообщенияПриЗапуске: Булево = Истина
    пер Пользователь: Строка = ""
    пер Пароль: Строка = ""
    пер КодДоступа: Строка = ""
    пер ФайлВывода: Файл? = Неопределено
;

метод ПлатформаЭтоКаталогПлатформы(ПутьКПлатформе: Строка, ЗапускаемыеФайлы: Массив<Строка> = ["1cv8", "1cv8с"]): Булево
    пер Результат: Булево = не ПутьКПлатформе.Пусто()
    
    если Результат
        пер КаталогПлатформыФайл: Файл = новый Файл(ПутьКПлатформе)
        
        если не КаталогПлатформыФайл.Существует() или не КаталогПлатформыФайл.ЯвляетсяКаталогом()
            Результат = Ложь
        иначе
            пер ЭтоWindows: Булево = (ОбщиеТипОС() == ПеречислениеОперационнаяСистема.WINDOWS)
            Результат = Ложь
            для ИмяФайла из ЗапускаемыеФайлы
                если ОбщиеНайтиФайл(КаталогПлатформыФайл.Путь, ИмяФайла + (ЭтоWindows ? ".exe" : "")) != Неопределено
                    Результат = Истина
                    прервать
                ;
            ;
        ;
        
    ;
    
    возврат Результат

;

метод ПлатформаПолучитьМассивПараметровЗапуска(Параметры: СтруктураПараметрыЗапускаПлатформы): Массив<Строка>

    пер МассивПараметров: Массив<Строка> = новый Массив<Строка>()
    
    если Параметры.Конфигуратор
        МассивПараметров.Добавить("DESIGNER")
    ;
        
    МассивПараметров.Добавить("/IBConnectionString")
    
    если не Параметры.Сервер.Пусто()
        МассивПараметров.Добавить("\"Srvr=" + Параметры.Сервер + ":" + Параметры.Порт + ";Ref=" + Параметры.ИнформационнаяБаза + ";\"")
    иначе
        МассивПараметров.Добавить("\"File=" + Параметры.ИнформационнаяБаза + ";\"")
    ;
    
    если Параметры.НеОтображатьДиалогиПриЗапуске
        МассивПараметров.Добавить("/DisableStartupDialogs")
    ;
    
    если Параметры.НеОтображатьСообщенияПриЗапуске
        МассивПараметров.Добавить("/DisableStartupMessages")
    ;
    
    если не Параметры.Пользователь.Пусто()
        МассивПараметров.Добавить("/N")
        МассивПараметров.Добавить("\"" + Параметры.Пользователь + "\"")
    ;
    
    если не Параметры.Пароль.Пусто()
        МассивПараметров.Добавить("/P")
        МассивПараметров.Добавить("\"" + Параметры.Пароль + "\"")
    ;
    
    если не Параметры.КодДоступа.Пусто()
        МассивПараметров.Добавить("/UC")
        МассивПараметров.Добавить("\"" + Параметры.КодДоступа + "\"")
    ;
    
    если Параметры.ФайлВывода != Неопределено
        МассивПараметров.Добавить("/Out")
        МассивПараметров.Добавить("\"" + Параметры.ФайлВывода.Путь + "\"")
    ;
    
    возврат МассивПараметров

;

метод ПлатформаПараметрыИзСтрокиВМассив(ПараметрыСтрокой: Строка): Массив<Строка>

    пер Параметры: Массив<Строка> = новый Массив<Строка>()
    
    если не ПараметрыСтрокой.Пусто()
        для Параметр из ПараметрыСтрокой.Разделить("/")
            если не Параметр.Сократить().Пусто()
                пер МассивДанныхПараметра: Массив<Строка> = ("/" + Параметр).Сократить().Разделить(" ") 
                если МассивДанныхПараметра.Размер() == 1
                    Параметры.Добавить(МассивДанныхПараметра[0])
                иначе если МассивДанныхПараметра.Размер() > 1
                    Параметры.Добавить(МассивДанныхПараметра[0])
                    МассивДанныхПараметра.УдалитьПоИндексу(0)
                    Параметры.Добавить(Строки.Соединить(МассивДанныхПараметра, " "))
                ; 
                             
            ;
        ;
    ;
    
    возврат Параметры  

;


метод ПлатформаПутьЗапускаПлатформы(ИзначальныйПутьКПлатформе: Строка, ПараметрыЗапуска: Массив<Строка>, ИмяПроцесса: Строка = "1cv8"): Строка

    пер ПутьКПлатформе: Строка = ""
    
    если ОбщиеТипОС() == ПеречислениеОперационнаяСистема.LINUX
        ПараметрыЗапуска.Вставить(0, ОбщиеДобавитьРазделитель(ИзначальныйПутьКПлатформе) + ИмяПроцесса)
        ПараметрыЗапуска.Вставить(0, "-a")
        ПутьКПлатформе = "xvfb-run"
        
        попытка
            пер Процесс: ПроцессОс = новый ПроцессОс("xvfb-run", ["-h"])
            ОбщиеЗапуститьПроцессОС(Процесс, 
                метод(КодОшибки: Число, ТекстОшибки: Строка) -> 
                    если КодОшибки != 0 или не ТекстОшибки.Пусто()
                        выбросить новый ИсключениеОшибкаЗапускаПлатформы("Xvbf not found. Install Xvbf!")
                    ;
                ;
            )
        поймать Исключение: Исключение
            выбросить новый ИсключениеОшибкаЗапускаПлатформы("Xvbf not found. Install Xvbf!" + "\n" + Исключение.ВСтроку())
        ;
        
    иначе
        ПутьКПлатформе = "\"" + ОбщиеДобавитьРазделитель(ИзначальныйПутьКПлатформе) + ИмяПроцесса + ".exe\""
    ;

    возврат ПутьКПлатформе
    
;

// #конец_импорта



///////////////////////////////////////////////////////////////////
// ПРИВАТНАЯ ЧАСТЬ
///////////////////////////////////////////////////////////////////

структура СтруктураПараметров

    // общие
    пер Задержка: Число = 0
    пер ВремяСтарта: ДатаВремя = ДатаВремя{2000-01-01}
    пер ЛимитВремени: Число = 0

    // параметры скрипта
    пер Пользователь: Строка = ""
    пер Пароль: Строка = ""
    пер Язык: Строка = "ru"
    пер ВремяОжиданияЗапуска: Число = 0
    пер Хвостик: Строка = ""
    пер ОжидатьЗавершения: Булево = Истина
    пер ИмяВебСервера: Строка = ""
    пер ИмяПубликации: Строка = ""
    пер НаименованиеСценария: Строка = ""
    пер НачальноеКоличествоПользователей: Число = 100
    пер НачальныйШагДозапускаПользователей: Число = 20
    пер КонечныйШагДозапускаПользователей: Число = 1
    пер ПороговыйAPDEX: Число = 0
    пер МаксимальноеКоличествоИтераций: Число = 1
    пер КритическоеКоличествоОшибокТеста: Число = 0
    пер КритическоеКоличествоОшибокИтерации: Число = 1
    пер ЭтоДинамическийТест: Булево = Ложь
    пер РаспределятьПоКомпьютерамРавномерно: Булево = Истина
    пер КоэффициентИнтенсивности: Число = 1
    пер АдресПубликации: Строка = ""
    пер ЕстьРазделение: Булево = Ложь
    пер ТаблицаРаспределения: Строка = "FillTable"
    пер ОбщееКоличествоОдновременноЗапускаемыхВРМ: Число = 0
    пер КоличествоОдновременноЗапускаемыхВРМАгента: Число = 10
;

метод ПолучитьПараметры(СоответствиеПараметров: Соответствие<Строка, Строка>): СтруктураПараметров

    пер Параметры = новый СтруктураПараметров()
    
    Параметры.ВремяСтарта = ДатаВремя.Сейчас()

    Параметры.Пользователь = ОбщиеЗначениеПараметраСтрока(СоответствиеПараметров, "username")
    Параметры.Пароль = ОбщиеЗначениеПараметраСтрока(СоответствиеПараметров, "password")
    Параметры.Язык = ОбщиеЗначениеПараметраСтрока(СоответствиеПараметров, "lang")
    Параметры.ВремяОжиданияЗапуска = ОбщиеЗначениеПараметраЧисло(СоответствиеПараметров, "check-ib-availability-time-limit")
    Параметры.Хвостик = ОбщиеЗначениеПараметраСтрока(СоответствиеПараметров, "tail")
    Параметры.ОжидатьЗавершения = ОбщиеЗначениеПараметраБулево(СоответствиеПараметров, "wait-for-completion")
    Параметры.НаименованиеСценария = ОбщиеЗначениеПараметраСтрока(СоответствиеПараметров, "scenario")
    Параметры.ЛимитВремени = ОбщиеЗначениеПараметраЧисло(СоответствиеПараметров, "time-limit")
    Параметры.Задержка = ОбщиеЗначениеПараметраЧисло(СоответствиеПараметров, "max-delay")

    Параметры.НачальноеКоличествоПользователей = ОбщиеЗначениеПараметраЧисло(СоответствиеПараметров, "initial-users-count")
    Параметры.НачальныйШагДозапускаПользователей = ОбщиеЗначениеПараметраЧисло(СоответствиеПараметров, "initial-users-addition-step")
    Параметры.КонечныйШагДозапускаПользователей = ОбщиеЗначениеПараметраЧисло(СоответствиеПараметров, "final-users-addition-step")
    Параметры.ПороговыйAPDEX = ОбщиеЗначениеПараметраЧисло(СоответствиеПараметров, "apdex-threshold")
    Параметры.МаксимальноеКоличествоИтераций = ОбщиеЗначениеПараметраЧисло(СоответствиеПараметров, "max-iterations-count")
    Параметры.КритическоеКоличествоОшибокТеста = ОбщиеЗначениеПараметраЧисло(СоответствиеПараметров, "max-errors-count")
    Параметры.КритическоеКоличествоОшибокИтерации = ОбщиеЗначениеПараметраЧисло(СоответствиеПараметров, "max-errors-count-per-iteration")
    Параметры.ЭтоДинамическийТест = ОбщиеЗначениеПараметраБулево(СоответствиеПараметров, "dynamic-user-addition")
    Параметры.РаспределятьПоКомпьютерамРавномерно = ОбщиеЗначениеПараметраБулево(СоответствиеПараметров, "lauch-on-running-agents")
    Параметры.КоэффициентИнтенсивности = ОбщиеЗначениеПараметраЧисло(СоответствиеПараметров, "intensity-factor")
    Параметры.АдресПубликации = ОбщиеЗначениеПараметраСтрока(СоответствиеПараметров, "publication-url")
    Параметры.ЕстьРазделение = ОбщиеЗначениеПараметраБулево(СоответствиеПараметров, "data-separation-used")
    Параметры.ОбщееКоличествоОдновременноЗапускаемыхВРМ = ОбщиеЗначениеПараметраЧисло(СоответствиеПараметров, "concurrently-launched-vwp")
    Параметры.КоличествоОдновременноЗапускаемыхВРМАгента = ОбщиеЗначениеПараметраЧисло(СоответствиеПараметров, "concurrently-launched-vwp-agent")

    Параметры.ИмяВебСервера = ОбщиеЗначениеПараметраСтрока(СоответствиеПараметров, "www-host")
    Параметры.ИмяПубликации = ОбщиеЗначениеПараметраСтрока(СоответствиеПараметров, "www-ib")
    
    возврат Параметры

;

структура УправляющийТест
    пер Ид: Строка = ""
    пер ИдентификаторСоединения: Число = -1
    пер Запущен: Булево = Ложь
;

метод ПолучитьУправляющийТест(АдресSOAPСервиса: Строка, Пользователь: Строка = "", Пароль: Строка = ""): УправляющийТест?
   
   пер ТекущийУправляющийТест: УправляющийТест?

    пер ТелоЗапроса: Строка = 
    "<soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:ns=\"http://v8.1c.ru/testcenter/RemoteManagement/1.0.0.2\">
        <soap:Header/>
        <soap:Body>
            <ns:GetTestManagementList/>
        </soap:Body>
     </soap:Envelope>"

    пер СтрокаОтвета = ОбщееВыполнитьSOAPЗапрос(АдресSOAPСервиса, ТелоЗапроса, Пользователь, Пароль)

    если СтрокаОтвета == ""
        выбросить новый ИсключениеВремениВыполнения("Can not find any test manager! Check your infobase for test manager entries")
    ;

    пер ЧтениеXML = новый ЧтениеXml(СтрокаОтвета)
    пер МаксимальныйИдентификатор = -1

    пока ЧтениеXML.СледующийДо("m:Items")
        пер ОписаниеТеста = новый УправляющийТест()

        если ЧтениеXML.ВидУзла == ВидУзлаXml.НачалоЭлемента
            пер ИмяТекущегоУзла = ""

            пока ЧтениеXML.Следующий() и ЧтениеXML.Имя != "m:Items"
                если ЧтениеXML.ВидУзла == ВидУзлаXml.НачалоЭлемента
                    ИмяТекущегоУзла = ЧтениеXML.Имя

                    если ИмяТекущегоУзла == "m:isExecuted"
                        ОписаниеТеста.Запущен = ЧтениеXML.ПрочитатьСодержимоеКакБулево()
                    ;

                    если ИмяТекущегоУзла == "m:ClientAppType"
                        ЧтениеXML.Следующий()

                        если ЧтениеXML.ВидУзла != ВидУзлаXml.КонецЭлемента
                            ТекущийУправляющийТест = новый УправляющийТест(ОписаниеТеста.Ид, 
                                ОписаниеТеста.ИдентификаторСоединения, 
                                ОписаниеТеста.Запущен)

                            ОписаниеТеста.Ид = ""
                            прервать
                        ;
                    ;
                ;

                если ЧтениеXML.ИмеетЗначение
                    если ИмяТекущегоУзла == "m:UUID" и ОписаниеТеста.Ид.Пусто()
                        ОписаниеТеста.Ид = ЧтениеXML.Значение
                    иначе если ИмяТекущегоУзла == "m:Name" и ОписаниеТеста.ИдентификаторСоединения == -1
                        если ЧтениеXML.Значение.ТолькоЦифры()
                            ОписаниеТеста.ИдентификаторСоединения = новый Число(ЧтениеXML.Значение)
                            МаксимальныйИдентификатор = ОписаниеТеста.ИдентификаторСоединения
                        ;
                    ;
                ;
            ;
        ;

        если не ОписаниеТеста.Ид.Пусто() и ОписаниеТеста.ИдентификаторСоединения < МаксимальныйИдентификатор
            ТекущийУправляющийТест = ОписаниеТеста

        ;

        ЧтениеXML.Следующий()
    ;

    возврат ТекущийУправляющийТест

;

метод ПолучитьИдентификаторСценария(АдресSOAPСервиса: Строка, НаименованиеСценария: Строка, Пользователь: Строка = "", Пароль: Строка = ""): Строка
   
   пер ИдентификаторСценария: Строка = ""

    пер ТелоЗапроса: Строка = 
    "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ns=\"http://v8.1c.ru/testcenter/RemoteManagement/1.0.0.2\">
    <soapenv:Header/>
    <soapenv:Body>
        <ns:GetScenarios/>
    </soapenv:Body>
    </soapenv:Envelope>"

    пер СтрокаОтвета = ОбщееВыполнитьSOAPЗапрос(АдресSOAPСервиса, ТелоЗапроса, Пользователь, Пароль)

    если СтрокаОтвета == ""
        выбросить новый ИсключениеВремениВыполнения("Can not find any scenario! Check your infobase for scenario exists")
    ;

    пер ЧтениеXML = новый ЧтениеXml(СтрокаОтвета)

    пока ЧтениеXML.СледующийДо("m:Items")
        если ЧтениеXML.ВидУзла == ВидУзлаXml.НачалоЭлемента
            пер ИмяТекущегоУзла = ""
            
            пока ЧтениеXML.Следующий() и ЧтениеXML.Имя != "m:Items"
                если ЧтениеXML.ВидУзла == ВидУзлаXml.НачалоЭлемента
                    ИмяТекущегоУзла = ЧтениеXML.Имя
                ;

                если ЧтениеXML.ИмеетЗначение
                    если ИмяТекущегоУзла == "m:UUID"
                        ИдентификаторСценария = ЧтениеXML.Значение
                    иначе если ИмяТекущегоУзла == "m:Name"
                        пер ИмяТекущегоТеста = ЧтениеXML.Значение

                        если ИмяТекущегоТеста.Сравнить(НаименованиеСценария.Сократить(), Истина) == 0
                            возврат ИдентификаторСценария
                        ;
                    ;
                ;
            ;
        ;

        ЧтениеXML.Следующий()
    ;

    возврат ИдентификаторСценария

;

метод ЗаполнитьПараметрыМенеджераТеста(АдресSOAPСервиса: Строка, ИдентификаторМенеджера: Строка, ИдентификаторСценария: Строка, Параметры: СтруктураПараметров)

    пер ТекущаяДата = ДатаВремя.Сейчас().ВСтроку()

    пер ТелоЗапроса: Строка = 
    "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ns=\"http://v8.1c.ru/testcenter/RemoteManagement/1.0.0.2\">
    <soapenv:Header/>
    <soapenv:Body>
        <ns:SetTestManagementByIDAdvanced>
            <ns:ClientUUID>%{ИдентификаторМенеджера}</ns:ClientUUID>
            <ns:TypeID>УправлениеТестом</ns:TypeID>
            <ns:StartDate>%{ТекущаяДата}</ns:StartDate>
            <ns:FinishDate>0001-01-01</ns:FinishDate>
            <ns:ScenarioUUID>%{ИдентификаторСценария}</ns:ScenarioUUID>
            <ns:ScenarioParameters>
                <ns:InitialUsersCount>%{Параметры.НачальноеКоличествоПользователей}</ns:InitialUsersCount>
                <ns:InitialUsersAdditionStep>%{Параметры.НачальныйШагДозапускаПользователей}</ns:InitialUsersAdditionStep>
                <ns:FinalUsersAdditionStep>%{Параметры.КонечныйШагДозапускаПользователей}</ns:FinalUsersAdditionStep>
                <ns:APDEXThreshold>%{Параметры.ПороговыйAPDEX}</ns:APDEXThreshold>
                <ns:MaxIterationsCount>%{Параметры.МаксимальноеКоличествоИтераций}</ns:MaxIterationsCount>
                <ns:MaxErrorsCount>%{Параметры.КритическоеКоличествоОшибокТеста}</ns:MaxErrorsCount>
                <ns:MaxErrorsCountPerIteration>%{Параметры.КритическоеКоличествоОшибокИтерации}</ns:MaxErrorsCountPerIteration>
                <ns:DynamicUserAddition>%{Параметры.ЭтоДинамическийТест}</ns:DynamicUserAddition>
                <ns:LauchOnRunningAgents>%{Параметры.РаспределятьПоКомпьютерамРавномерно}</ns:LauchOnRunningAgents>
                <ns:IntensityFactor>%{Параметры.КоэффициентИнтенсивности}</ns:IntensityFactor>
                <ns:PublicationURL>%{Параметры.АдресПубликации}</ns:PublicationURL>
                <ns:DataSeparationUsed>%{Параметры.ЕстьРазделение}</ns:DataSeparationUsed>
                <ns:ComputerWeightTableString>%{Параметры.ТаблицаРаспределения}</ns:ComputerWeightTableString>
                <ns:ConcurrentlyLaunchedVWP>%{Параметры.ОбщееКоличествоОдновременноЗапускаемыхВРМ}</ns:ConcurrentlyLaunchedVWP>
                <ns:ConcurrentlyLaunchedVWPAgent>%{Параметры.КоличествоОдновременноЗапускаемыхВРМАгента}</ns:ConcurrentlyLaunchedVWPAgent>
            </ns:ScenarioParameters>
        </ns:SetTestManagementByIDAdvanced>
    </soapenv:Body>
    </soapenv:Envelope>"

    пер СтрокаОтвета = ОбщееВыполнитьSOAPЗапрос(АдресSOAPСервиса, ТелоЗапроса, Параметры.Пользователь, Параметры.Пароль)

    если СтрокаОтвета == ""
        выбросить новый ИсключениеВремениВыполнения("Can not set test manager parameters! Check your infobase for test manager exists")
    ;

    пер ЧтениеXML = новый ЧтениеXml(СтрокаОтвета)

    если ЧтениеXML.СледующийДо("m:return")
        ЧтениеXML.Следующий()
        пер ОтветСервиса = ЧтениеXML.Значение

        если не ОтветСервиса.Пусто()
            выбросить новый ИсключениеВремениВыполнения("SOAP service has responsed: %{ОтветСервиса}")
        ;
    ;
;

перечисление СтатусВыполненияТеста
    Выполняется,
    Завершен,
    ЗавершенСОшибкой
;

структура СостояниеВыполненияТеста
    пер Состояние: СтатусВыполненияТеста = СтатусВыполненияТеста.Выполняется
    пер ЕстьОшибка: Булево = Ложь
    пер ТекстОшибки: Строка = ""
    пер Завершен: Булево = Ложь
;

метод ПрочитатьXMLВСоответствие(ЧтениеXML: ЧтениеXml, ТипПоследнегоЭлемента: ВидУзлаXml? = Неопределено): Соответствие<Строка, Объект?>|Строка
    пер ОбъектXML: Соответствие<Строка, Объект?>|Неопределено = новый Соответствие<Строка, Объект?>()
	пер Значение = ""
	
	пока ЧтениеXML.Следующий()
		пер ТипУзла = ЧтениеXML.ВидУзла

		если ТипУзла == ВидУзлаXml.НачалоЭлемента
			ТипПоследнегоЭлемента = ВидУзлаXml.НачалоЭлемента

            пер ЧастиИмени = ЧтениеXML.Имя.Разделить(":")
            пер ВГраницаИмени = ЧастиИмени.Граница()

			пер Имя = ЧастиИмени[ВГраницаИмени]
			пер ТекущаяВетка = ОбъектXML?.ПолучитьИлиУмолчание(Имя)

			если ТекущаяВетка == Неопределено
				ОбъектXML?.Вставить(Имя, ПрочитатьXMLВСоответствие(ЧтениеXML, ТипПоследнегоЭлемента))

			иначе если ТекущаяВетка?.ПолучитьТип() это Массив<Объект>
                пер ЗначениеЭлементаМассива: Массив<Объект>|Строка = новый Массив<Объект>()
                (ЗначениеЭлементаМассива как Массив<Объект>).Добавить(ТекущаяВетка умолчание новый Массив<Объект>())

                ТекущаяВетка = ЗначениеЭлементаМассива
                ЗначениеЭлементаМассива = ""

                ОбъектXML?.Удалить(Имя)
                ОбъектXML?.Вставить(Имя, ТекущаяВетка умолчание новый Массив<Объект>())

                (ТекущаяВетка как Массив<Объект>).Добавить(ПрочитатьXMLВСоответствие(ЧтениеXML, ТипПоследнегоЭлемента))
			;
			
		иначе если ТипУзла == ВидУзлаXml.КонецЭлемента
			ТипПоследнегоЭлемента = ВидУзлаXml.КонецЭлемента

			возврат (ОбъектXML == Неопределено) ? Значение : ОбъектXML!

		иначе если ТипУзла == ВидУзлаXml.Текст и не ТипПоследнегоЭлемента == ВидУзлаXml.Текст
			ТипПоследнегоЭлемента = ВидУзлаXml.Текст
			Значение = Значение + ЧтениеXML.Значение

			ЧтениеXML.Следующий()
			возврат Значение	
		;
	;
	
	возврат ОбъектXML
;

метод ПолучитьРезультатВыполненияТеста(АдресSOAPСервиса: Строка, ИдентификаторМенеджера: Строка, Параметры: СтруктураПараметров): СостояниеВыполненияТеста

    пер СостояниеТеста = новый СостояниеВыполненияТеста()
    пер ТелоЗапроса: Строка = 
    "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ns=\"http://v8.1c.ru/testcenter/RemoteManagement/1.0.0.2\">
    <soapenv:Header/>
    <soapenv:Body>
        <ns:GetResultsByID>
            <ns:ClientUUID>%{ИдентификаторМенеджера}</ns:ClientUUID>
        </ns:GetResultsByID>
    </soapenv:Body>
    </soapenv:Envelope>"

    пер СтрокаОтвета = ОбщееВыполнитьSOAPЗапрос(АдресSOAPСервиса, ТелоЗапроса, Параметры.Пользователь, Параметры.Пароль)

    если СтрокаОтвета == ""
        выбросить новый ИсключениеВремениВыполнения("Can not set test manager parameters! Check your infobase for test manager exists")
    ;

    пер ЧтениеXML = новый ЧтениеXml(СтрокаОтвета)
    ЧтениеXML.СледующийДо("m:return")
    пер ОтветСервиса = ПрочитатьXMLВСоответствие(ЧтениеXML)

    если ОтветСервиса это Строка
        возврат СостояниеТеста
    ;

    пер ДанныеТеста = (ОтветСервиса как Соответствие<Строка, Объект?>)
    пер РезультатТеста = ДанныеТеста.ПолучитьИлиУмолчание("Result")
    пер ЗначениеРезультатаТеста = (РезультатТеста?.ВСтроку() умолчание "")

    если ЗначениеРезультатаТеста.Сравнить("Выполнено успешно") == 0
        СостояниеТеста.Состояние = СтатусВыполненияТеста.Завершен
    иначе если ЗначениеРезультатаТеста.Сравнить("Выполнено с ошибкой") == 0
        СостояниеТеста.Состояние = СтатусВыполненияТеста.ЗавершенСОшибкой
        
        пер СекцияОшибок = ДанныеТеста.ПолучитьИлиУмолчание("Errors")
        пер ЭлементыОшибок: Объект?

        если СекцияОшибок != Неопределено
            ЭлементыОшибок = (СекцияОшибок как Соответствие<Строка, Объект?>).ПолучитьИлиУмолчание("Items")
        ;

        если ЭлементыОшибок это Соответствие<Строка, Объект?>
            пер СтрокаОшибки = (ЭлементыОшибок как Соответствие<Строка, Объект?>).ПолучитьИлиУмолчание("Text") умолчание "Не удалось получить текст ошибки"

            СостояниеТеста.ТекстОшибки = СтрокаОшибки.ВСтроку()
        ;

        СостояниеТеста.ЕстьОшибка = Истина
    ;

    возврат СостояниеТеста
;

///////////////////////////////////////////////////////////////////
// ТОЧКА ВХОДА
///////////////////////////////////////////////////////////////////


метод Скрипт(СоответствиеПараметров: Соответствие<Строка, Строка>): Число
    если ОбщиеЗначениеПараметраБулево(СоответствиеПараметров, "test-mode")
        ЛогИнформация("Test mode completed successfully")
        возврат 0
    ;

    ЛогСтарт()

    пер Параметры = ПолучитьПараметры(СоответствиеПараметров)

    ОбщиеПроверитьОбязательныеПараметры(Параметры, [
        новый СтруктураПроверкиПараметра("www-host", Параметры.ИмяВебСервера, () -> не Параметры.ИмяВебСервера.Пусто()),
        новый СтруктураПроверкиПараметра("www-ib", Параметры.ИмяПубликации, () -> не Параметры.ИмяПубликации.Пусто()),
        новый СтруктураПроверкиПараметра("scenario", Параметры.НаименованиеСценария, () -> не Параметры.НаименованиеСценария.Пусто()) 
        ]
        
    )

    // Случайная задержка перед выполнением операции
    если Параметры.Задержка > 0
        ОбщиеПауза(Параметры.Задержка, Истина)
    ;

    Параметры.ВремяСтарта = ДатаВремя.Сейчас()

    пер АдресSOAPСервиса = ОбщееПолучитьАдресSOAPСервиса(Параметры.ИмяВебСервера, Параметры.ИмяПубликации, "RemoteManagement")
    пер ОписаниеУправляющегоСервиса = ПолучитьУправляющийТест(АдресSOAPСервиса, Параметры.Пользователь, Параметры.Пароль)

    пер ИдентификаторСценария = ПолучитьИдентификаторСценария(АдресSOAPСервиса, Параметры.НаименованиеСценария, Параметры.Пользователь, Параметры.Пароль)
    ЗаполнитьПараметрыМенеджераТеста(АдресSOAPСервиса, ОписаниеУправляющегоСервиса?.Ид умолчание 
        "00000000-0000-0000-0000-000000000000", 
        ИдентификаторСценария, 
        Параметры)

    пер ВремяИстекло = Ложь

    пока не ВремяИстекло
        если Параметры.ЛимитВремени == 0 или Параметры.ВремяСтарта <= ДатаВремя{2000-01-01}
            прервать
        ;

        пер РезультатВыполненияТеста = ПолучитьРезультатВыполненияТеста(АдресSOAPСервиса, ОписаниеУправляющегоСервиса.Ид, Параметры)

        если РезультатВыполненияТеста.Состояние == СтатусВыполненияТеста.Завершен
            прервать
        иначе если РезультатВыполненияТеста.Состояние == СтатусВыполненияТеста.ЗавершенСОшибкой
            ЛогОшибка(РезультатВыполненияТеста.ТекстОшибки)
            выбросить новый ИсключениеВремениВыполнения(РезультатВыполненияТеста.ТекстОшибки)
        ;

        ОбщиеПауза(5, Истина)

        если (ДатаВремя.Сейчас() - Параметры.ВремяСтарта).Секунды > Параметры.ЛимитВремени
            пер Ошибка = "Time limit expired: $Параметры.ЛимитВремени sec." 
            ЛогОшибка(Ошибка)
            выбросить новый ИсключениеТаймаут(Ошибка, Параметры.ЛимитВремени)
        ;
    ;

    ЛогИнформация("Finished", Параметры.ВремяСтарта)
    возврат 0
  
;
