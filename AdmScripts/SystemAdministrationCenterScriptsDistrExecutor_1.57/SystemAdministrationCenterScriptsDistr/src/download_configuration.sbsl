// #импорт include/common.sbsl

///////////////////////////////////////////////////////////////////
// ИСКЛЮЧЕНИЯ И СТРУКТУРЫ
///////////////////////////////////////////////////////////////////

исключение ИсключениеВремениВыполнения
;

исключение ИсключениеТаймаут
    пер Таймаут: Число
;

исключение ИсключениеФайлНеНайден
    пер КаталогПуть: Строка
;

исключение ИсключениеКаталогОказалсяФайлом
    пер КаталогПуть: Строка
;

исключение ИсключениеОтсутствуютОбязательныеПараметры
;

структура СтруктураПроверкиПараметра
    пер ИмяПараметра: Строка = "" 
    обз пер Значение: Строка|Число|ДатаВремя
    обз пер ФункцияПроверки: ()->Булево
;

перечисление ПеречислениеОперационнаяСистема
    WINDOWS
    LINUX
    LINUX_DEB
    LINUX_RPM
;


///////////////////////////////////////////////////////////////////
// ОБЩИЕ
///////////////////////////////////////////////////////////////////


метод ОбщиеВремяИстекло(ВремяСтарта: ДатаВремя, ЛимитВремени: Число)

    если ЛимитВремени == 0 или ВремяСтарта <= ДатаВремя{2000-01-01}
        возврат
    ;

    если (ДатаВремя.Сейчас() - ВремяСтарта).Секунды > ЛимитВремени
        пер Ошибка = "Time limit expired: $ЛимитВремени sec." 
        ЛогОшибка(Ошибка)
        выбросить новый ИсключениеТаймаут(Ошибка, ЛимитВремени)
    ;

;

метод ОбщиеПодходитПодШаблон(ПроверяемаяСтрока: Строка, Шаблон: Строка, ИнвертироватьШаблон: Булево): Булево

    пер Подходит = Ложь

    пер регВыражение = новый Образец(Шаблон)

    если ИнвертироватьШаблон
        Подходит = (регВыражение.НайтиСовпадения(ПроверяемаяСтрока).Размер() == 0)
    иначе
        Подходит = (регВыражение.НайтиСовпадения(ПроверяемаяСтрока).Размер() > 0)
    ;
    
    возврат Подходит

;

метод ОбщиеЭтоАрхив(Путь: Строка): Булево

    пер ЭтоАрхив: Булево = Путь.ВНижнийРегистр().ЗаканчиваетсяНа(".zip")
                            или Путь.ВНижнийРегистр().ЗаканчиваетсяНа(".rar")
                            или Путь.ВНижнийРегистр().ЗаканчиваетсяНа(".gz")
    
    возврат ЭтоАрхив

;

метод ОбщиеДобавитьРазделитель(Путь: Строка): Строка
  возврат Путь.ЗаканчиваетсяНа(Файлы.СимволРазделителя) ? Путь : Путь + Файлы.СимволРазделителя
;

метод ОбщиеУбратьПоследнийРазделитель(Путь: Строка): Строка
  возврат Путь.ЗаканчиваетсяНа(Файлы.СимволРазделителя) ? Путь.ПодстрокаСНачала(Путь.Длина() - 1) : Путь
;

метод ОбщиеПроверитьОбязательныеПараметры(Параметры: СтруктураПараметров, ПроверкиПараметров: ЧитаемыйМассив<СтруктураПроверкиПараметра>)

    пер ЕстьОшибки: Булево = Ложь
    
    для ПроверкаПараметра из ПроверкиПараметров
    
        если не ПроверкаПараметра.ФункцияПроверки()

            пер ИмяПараметра = ПроверкаПараметра.ИмяПараметра
            пер Значение = ПроверкаПараметра.Значение
            
            ЛогОшибка("Parameter error: $ИмяПараметра, value: $Значение")
            ЕстьОшибки = Истина
            
        ;
    
    ;
    
    если ЕстьОшибки
        выбросить новый ИсключениеОтсутствуютОбязательныеПараметры("FAIL: parameters check")
    ;
    
;

метод ОбщиеЗначениеПараметраБулево(СоответствиеПараметров: Соответствие<Строка, Строка>, Ключ: Строка, ЗначениеПоумолчанию: Булево = Ложь): Булево

    пер Результат = ЗначениеПоумолчанию

    попытка
    
        пер Значение = СоответствиеПараметров[Ключ] 
        
        выбор Значение.ВНижнийРегистр()
        когда "истина"
            Результат = Истина
        когда "true"
            Результат = Истина
        когда "1"
            Результат = Истина
        когда "on"
            Результат = Истина
        когда "да"
            Результат = Истина
        когда "yes"
            Результат = Истина
        когда "вкл"
            Результат = Истина
        когда "вкл."
            Результат = Истина
        когда "включено"
            Результат = Истина
        иначе
            Результат = Ложь
        ;
        
    поймать Исключение: Исключение
        Результат = ЗначениеПоумолчанию
    ;
    
    возврат Результат

;

метод ОбщиеЗначениеПараметраЧисло(СоответствиеПараметров: Соответствие<Строка, Строка>, Ключ: Строка, ЗначениеПоУмолчанию: Число = 0): Число

    пер Результат = ЗначениеПоУмолчанию

    попытка
        пер Значение = СоответствиеПараметров[Ключ] 
        Результат = новый Число(Значение)
    поймать Исключение: Исключение
        Результат = ЗначениеПоУмолчанию
    ;
    
    возврат Результат

;

метод ОбщиеЗначениеПараметраСтрока(СоответствиеПараметров: Соответствие<Строка, Строка>, Ключ: Строка, ЗначениеПоУмолчанию: Строка = ""): Строка

    пер Результат = ЗначениеПоУмолчанию

    попытка
        пер Значение = СоответствиеПараметров[Ключ] 
        Результат = Значение.ВСтроку()

        если Результат.Сравнить("null", Истина) == 0
            Результат = ЗначениеПоУмолчанию
        ;
        
    поймать Исключение: Исключение
        Результат = ЗначениеПоУмолчанию
    ;
    
    возврат Результат

;

метод ОбщиеПауза(ПаузаСекунд: Число, Случайная: Булево = Ложь)

    пер ПаузаРеальная = ПаузаСекунд
    
    если Случайная
    
        пер ГСЧ = новый СлучайныйГенератор(ДатаВремя.Сейчас().Миллисекунда)
        ПаузаРеальная = ГСЧ.СлучайноеЦелое(0, ПаузаСекунд)

    ;
    
    ПаузаРеальная = ПаузаРеальная == 0 ? ПаузаСекунд : ПаузаРеальная

    если Случайная
        
        ЛогИнформация("Selected delay $ПаузаРеальная sec.")
        
    ;
    
    Пауза(новый Длительность(0, 0, ПаузаРеальная))
    
;

метод ОбщиеТипОС(УточнятьТипLinux: Булево = Ложь): ПеречислениеОперационнаяСистема

    пер ТипОС: ПеречислениеОперационнаяСистема = СредаИсполнения.ПолучитьПеременную("OS").Содержит("Windows", Истина) ? ПеречислениеОперационнаяСистема.WINDOWS : ПеречислениеОперационнаяСистема.LINUX
    
    если ТипОС == ПеречислениеОперационнаяСистема.LINUX и УточнятьТипLinux
        
        ТипОС = ПеречислениеОперационнаяСистема.LINUX_DEB
        
        пер Процесс: ПроцессОс = новый ПроцессОс("dpkg", ["--version"])
        
        попытка
            Процесс.Запустить()
            Процесс.ПолучитьПотокВывода().ПрочитатьКакСтроку()
        поймать Игнорировать: Исключение
            ТипОС = ПеречислениеОперационнаяСистема.LINUX_RPM
        ; 
        
    ;
    
    возврат ТипОС
    
;

метод ОбщиеАрхитектураОС(): Число
    если СредаИсполнения.ПолучитьСвойство("os.arch").Содержит("64")
        возврат 64
    иначе
        возврат 32
    ;
;

метод ОбщиеНайтиФайл(Путь: Строка|Файл, ИмяФайла: Строка): Файл?

    пер НайденныйФайл: Файл? = Неопределено
    
    пер НастройкиПоиска: НастройкиПоиска = новый НастройкиПоиска()
    НастройкиПоиска.ИмяСодержит(ИмяФайла)
    НастройкиПоиска.ИсключитьКаталоги(Истина)
    
    пер МассивФайлов: ЧитаемыйМассив<Файл> = Файлы.Найти(Путь, НастройкиПоиска)
    для Файл из МассивФайлов
        если Файл.Имя == ИмяФайла
            НайденныйФайл = Файл
            прервать
        ;
    ;

    возврат НайденныйФайл
;

метод ОбщиеФайлСкрипта(): Файл
    пер ФайлСкрипта: Файл = новый Файл(Скрипт.ПутьТекущегоСкрипта)
    возврат ФайлСкрипта
;

метод ОбщиеКаталогСкрипта(): Строка
    пер ФайлСкрипта: Файл? = ОбщиеФайлСкрипта()
    возврат (ФайлСкрипта != Неопределено ? ФайлСкрипта.Каталог.Путь : "")
;

метод ОбщиеЗапуститьПроцессОС(Процесс: ПроцессОс, ОбработкаОшибок: ((Число, Строка)->void)? = Неопределено, ЛимитВремени: Число = 0, Кодировка: Строка = "UTF-8", ОжидатьЗавершения: Булево = Истина): Строка

    пер Ошибка: Строка = ""
    пер ФайлПотокаВывода = Файлы.СоздатьВременныйФайл("ex_")
    пер ПотокВывода: Строка = ""
    
    Процесс.Запустить()
	если не ОжидатьЗавершения
		возврат ПотокВывода
	;
    
    пер ВсеОк: Булево = Истина
    
    если ЛимитВремени > 0  
        ВсеОк = Процесс.ОжидатьЗавершения(Длительность.ИзСекунд(ЛимитВремени))
    иначе если ЛимитВремени == -1
        ВсеОк = Истина
        возврат ""
    иначе
        ВсеОк = Процесс.ОжидатьЗавершения()
    ;
    
    если не ВсеОк
        Ошибка = "Timeout expired: " + ЛимитВремени
        ЛогОшибка(Ошибка)
        выбросить новый ИсключениеТаймаут(Ошибка, ЛимитВремени)
    ;        

    пер КодОшибки: Число? = Процесс.ПолучитьКодВозврата()
    если КодОшибки == Неопределено
        КодОшибки = 0
    ;

    ПотокВывода = Процесс.ПолучитьПотокВывода().ПрочитатьКакСтроку(Кодировка)
    Ошибка = Процесс.ПолучитьПотокОшибок().ПрочитатьКакСтроку()

    если КодОшибки != 0 или не Ошибка.Пусто()
        если ОбработкаОшибок == Неопределено
            пер ТекстОшибки: Строка = "Return code: $КодОшибки. $Ошибка" 
            ЛогОшибка(ПотокВывода + ТекстОшибки)
            выбросить новый ИсключениеВремениВыполнения(ТекстОшибки)
        иначе
            ОбработкаОшибок(КодОшибки, ПотокВывода + "\n" + Ошибка)
        ;
    ;
    
    возврат ПотокВывода
    
;

метод ОбщиеЗапуститьКаскадПроцессов(Параметры: ЧитаемыйМассив<ЧитаемыйМассив<Строка>>): Строка

    пер Вывод: Строка = ""
    пер Вход: Строка = ""

    для ОписаниеКоманды из Параметры
        
        пер Команда: Строка = ОписаниеКоманды[0]
        пер ПараметрыКоманды: ЧитаемыйМассив<Строка> = (Параметры.Размер() > 1 ? ОписаниеКоманды.ПодМассив(1) : [])
        
        пер Процесс: ПроцессОс = новый ПроцессОс(Команда , ПараметрыКоманды)
        Процесс.Запустить()
        Процесс.ПолучитьПотокВвода().Записать(Вход).Закрыть()
        Вывод = Процесс.ПолучитьПотокВывода().ПрочитатьКакСтроку()
        Вход = Вывод
    ;
        
    возврат Вывод
        
;


метод ОбщиеУбратьГраничныеСимволы(Текст: Строка, Символ: Строка): Строка

    если Текст.НачинаетсяС(Символ)
        Текст = Текст.Подстрока(1)
    ;
    
    если Текст.ЗаканчиваетсяНа(Символ)
        Текст = Текст.Подстрока(0, Текст.Длина() - Мин(1, Текст.Длина()))
    ;
    
    возврат Текст

;

метод ОбщиеКодироватьВURL(Данные: Строка): Строка

    пер ДанныеКодированные: Массив<Строка>

    пер КодируемыеСимволы: Строка = ":/?#[]@!$&'()*+,;=ёйцукенгшщзхъфывапролджэячсмитьбюЁЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮ"
    пер ДекодируемыеСимволы: Строка = "#3A#2F#3F#23#5B#5D#40#21#24#26#27#28#29#2A#2B#2C#3B#3D#D1#91#D0#B9#D1#86#D1#83#D0#BA#D0#B5#D0#BD#D0#B3#D1#88#D1#89#D0#B7#D1#85#D1#8A#D1#84#D1#8B#D0#B2#D0#B0#D0#BF#D1#80#D0#BE#D0#BB#D0#B4#D0#B6#D1#8D#D1#8F#D1#87#D1#81#D0#BC#D0#B8#D1#82#D1#8C#D0#B1#D1#8E#D0#81#D0#99#D0#A6#D0#A3#D0#9A#D0#95#D0#9D#D0#93#D0#A8#D0#A9#D0#97#D0#A5#D0#AA#D0#A4#D0#AB#D0#92#D0#90#D0#9F#D0#A0#D0#9E#D0#9B#D0#94#D0#96#D0#AD#D0#AF#D0#A7#D0#A1#D0#9C#D0#98#D0#A2#D0#AC#D0#91#D0#AE"
    пер ДекодируемыеСимволыМассив: Массив<Строка> = ДекодируемыеСимволы.Разделить("#")
    
    для Символ из Данные
        пер Позиция = КодируемыеСимволы.Найти(Символ)
        если Позиция >= 0
            ДанныеКодированные.Добавить("%" + ДекодируемыеСимволыМассив[Позиция])
        иначе
            ДанныеКодированные.Добавить(Символ)
        ;
    ;
    
    
    возврат Строки.Соединить(ДанныеКодированные, "")
    
;

метод ОбщиеАрхитектураEXE(ФайлEXE: Файл): Число

    исп ПотокЧтения: ПотокЧтения = ФайлEXE.ОткрытьПотокЧтения()
    пер ЧтениеДанных: ЧтениеДанных = новый ЧтениеДанных(ПотокЧтения)
    пер ПозицияPE: Число = ЧтениеДанных.ПропуститьДо("PE")
    если ПозицияPE < 200 или ПозицияPE > 400
        возврат 0
    ;
    
    ЧтениеДанных.Пропустить(2)
    пер Разрядность: Число? = ЧтениеДанных.ПрочитатьЦелое16()
    если Разрядность == 0x4c01
        возврат 32
    иначе если Разрядность == 0x6486
        возврат 64
    ;
    
    возврат 0

;

метод ОбщиеВерсияEXE(ФайлEXE: Файл): Строка

    пер Процесс: ПроцессОс = новый ПроцессОс("wmic" , ["datafile", "where", "Name=\"" + ФайлEXE.Путь.Заменить("\\", "\\\\")  + "\"", "get", "Version", "/value"])
    пер Данные: Строка = ОбщиеЗапуститьПроцессОС(Процесс, Неопределено,  0, "cp866")
    
    пер Версия: Строка = Данные
        .Заменить("\r", "")
        .Заменить("\n", "")
        .Сократить()
        .Разделить("=")[1]
    
    возврат Версия

;


метод ОбщиеТекстВМассив(Текст: Строка, ВключаяПустые: Булево = Ложь): Массив<Строка>
    возврат Текст.Заменить("\r\n", "\n").Заменить("\r", "\n").Разделить("\n", ВключаяПустые)
;

метод ОбщиеОчиститьКаталог(Каталог: Файл|Строка, СоздаватьЕслиОтсутствует: Булево = Истина)
    
    пер КаталогФайл: Файл = (Каталог это Строка) ? новый Файл(Каталог как Строка) : Каталог как Файл
    
    если КаталогФайл.Существует() и не КаталогФайл.ЯвляетсяКаталогом()
        выбросить новый ИсключениеКаталогОказалсяФайлом("Destination path exists and not a directory", КаталогФайл.Путь)
    ;
    
    если КаталогФайл.Существует()
    
        пер МассивФайлов = новый Массив(Файлы.Найти(КаталогФайл, новый НастройкиПоиска().МаксимальнаяГлубина(1)))
        для Файл из МассивФайлов
            Файлы.Удалить(Файл, Истина)
        ;
    
    иначе если СоздаватьЕслиОтсутствует
        Файлы.СоздатьКаталог(Каталог)
    ;
    
;

метод ОбщиеРаспаковатьАрхив(ФайлАрхива: Файл, Каталог: Файл|Строка, ЛимитВремени: Число = 0)

    пер КаталогПриемник: Файл = (Каталог это Строка) ? новый Файл(Каталог как Строка) : Каталог как Файл

    пер ФайлRAR: Файл = новый Файл(ОбщиеДобавитьРазделитель(ОбщиеКаталогСкрипта())
        + Файлы.СимволРазделителя + ".." + Файлы.СимволРазделителя   
        + "external_utils" + Файлы.СимволРазделителя 
        + "unrar" + Файлы.СимволРазделителя
        + "unrar" + (ОбщиеТипОС() == ПеречислениеОперационнаяСистема.WINDOWS ? ".exe" : ""))
    
    если ФайлАрхива.Расширение.ВНижнийРегистр() == "rar" и не ФайлRAR.Существует()
        пер Ошибка: Строка = "Cannot find unrar."
        ЛогОшибка(Ошибка)
        выбросить новый ИсключениеФайлНеНайден(Ошибка, ФайлRAR.Путь)        
    ;
    
    если ФайлАрхива.Расширение == "zip"
        
        пер ФайлZip = новый ФайлZip(ФайлАрхива.Путь)
        ФайлZip.ИзвлечьВсе(КаталогПриемник)
        
    иначе если ФайлАрхива.Расширение == "rar"

        пер ПараметрыЗапуска: ЧитаемыйМассив<Строка> = новый ЧитаемыйМассив<Строка>(["x", "\"" + ФайлАрхива.Путь + "\"", "\"" + КаталогПриемник + "\""])
        пер Процесс: ПроцессОс = новый ПроцессОс(ФайлRAR.Путь, ПараметрыЗапуска)
        
        ОбщиеЗапуститьПроцессОС(Процесс, 
            метод(КодОшибки: Число, ТекстОшибки: Строка) -> 
                если КодОшибки != 0 или не ТекстОшибки.Пусто()
                    пер Ошибка: Строка = "UnRAR error. Return code: $КодОшибки. $ТекстОшибки" + "\n" + ФайлRAR.Путь + " " + Строки.Соединить(ПараметрыЗапуска, " ")  
                    ЛогОшибка(Ошибка)
                    выбросить новый ИсключениеВремениВыполнения(Ошибка)
                ;
            ;
        , ЛимитВремени, "cp866")
    
    иначе если ФайлАрхива.Расширение == "gz"
        
        пер Процесс: ПроцессОс = новый ПроцессОс("tar" , ["-xzf", ФайлАрхива.Путь, "-C", КаталогПриемник])
        ОбщиеЗапуститьПроцессОС(Процесс, Неопределено,  ЛимитВремени)
        
    ;
    
;

метод ОбщееПолучитьИнтерактивнуюСессиюПользователя(Пользователь: Строка): Строка
    пер МассивПараметров: Массив<Строка> = []
    пер ИдентификаторСессии = "-1"
    
    пер ЧастиИмениПользователя = Пользователь.Разделить("\\")
    пер ИмяПользователя = ЧастиИмениПользователя[0]

    если ЧастиИмениПользователя.Размер() > 1
        ИмяПользователя = ЧастиИмениПользователя[1]
    ;

    МассивПараметров.Добавить("query")
    МассивПараметров.Добавить("session")
    МассивПараметров.Добавить(ИмяПользователя)
    МассивПараметров.Добавить("|")
    МассивПараметров.Добавить("select")
    МассивПараметров.Добавить("-skip")
    МассивПараметров.Добавить("1")
    МассивПараметров.Добавить("-first")
    МассивПараметров.Добавить("1")

    пер Процесс: ПроцессОс = новый ПроцессОс("powershell", МассивПараметров, Истина)

    попытка 
        ОбщиеЗапуститьПроцессОС(Процесс, Неопределено, 0, "cp866", Ложь)
        Процесс.ОжидатьЗавершения()

        пер ПотокВывода = Процесс.ПолучитьПотокВывода()

        пер ТекстВывода = ПотокВывода.ПрочитатьКакСтроку("cp866")
        пер СтрокиВывода = ОбщиеТекстВМассив(ТекстВывода)

        для ТекущаяСтрока из СтрокиВывода
            пер ДанныеСтрокиВывода = ТекущаяСтрока.Разделить(" ")

            если ДанныеСтрокиВывода.Размер() > 2
                ИдентификаторСессии = ДанныеСтрокиВывода[2]
            ;
        ;

        ЛогИнформация(ТекстВывода)

    поймать Исключение: Исключение
        выбросить Исключение
    ;

    возврат ИдентификаторСессии
;

метод ОбщееПолучитьАдресSOAPСервиса(АдресВебСервера: Строка, ИмяПубликации: Строка, Сервис: Строка): Строка
    возврат "%{АдресВебСервера}/%{ИмяПубликации}/ws/%{Сервис}.1cws"
;

метод ОбщееВыполнитьSOAPЗапрос(АдресSOAPСервиса: Строка, Запрос: Строка, Пользователь: Строка = "", Пароль: Строка = ""): Строка
    
    пер Аутентификация: АутентификацияHttp = новый АутентификацияHttp(Пользователь, Пароль)
    пер UserAgent = "1C+Enterprise/8.3"

    исп Ответ: ОтветHttp = КлиентHttp.САутентификацией(Аутентификация)
        .СБазовымUrl(АдресSOAPСервиса)
        .ЗапросPost("")
        .УстановитьТело(Запрос)
        .ДобавитьЗаголовок("User-Agent", UserAgent)
        .ДобавитьЗаголовок("Accept", "*/*")
        .УстановитьТипСодержимого("application/soap+xml")
        .УстановитьТаймаутЗапроса(60с)
        .УстановитьТаймаутСоединения(60с)
        .Выполнить()

    если Ответ.КодСостояния == 200
        возврат Ответ.Тело.ПрочитатьКакСтроку()
    иначе
        выбросить новый ИсключениеВремениВыполнения("Response was returned with status code: %{Ответ.КодСостояния}; Message: %{Ответ.Тело.ПрочитатьКакСтроку()}")
    ;

    возврат ""
;

метод ОбщееНайтиИсполняемыйФайлПлатформы(ПутьКПлатформе: Строка, ИмяИсполняемогоФайла: Строка): Строка
    пер ЭтоWindows = (ОбщиеТипОС() == ПеречислениеОперационнаяСистема.WINDOWS)
    пер НастройкиПоискаДиректорииBin = новый НастройкиПоиска()
        .ИмяСодержит("bin")
        .ИсключитьФайлы(Истина)
    пер ДиректорияBin = ""

    если не Файлы.Найти(ОбщиеУбратьПоследнийРазделитель(ПутьКПлатформе), НастройкиПоискаДиректорииBin).Пусто()
         ДиректорияBin = ОбщиеДобавитьРазделитель("bin")

    ;

    пер ПутьКДиректорииBin = "${ОбщиеДобавитьРазделитель(ПутьКПлатформе)}%{ДиректорияBin}"
    ПутьКДиректорииBin = ОбщиеУбратьПоследнийРазделитель(ПутьКДиректорииBin)

    пер Расширение = (ЭтоWindows ? ".exe" : "")
    пер ПутьКФайлу = "${ОбщиеДобавитьРазделитель(ПутьКДиректорииBin)}%{ИмяИсполняемогоФайла}%{Расширение}"

    возврат новый Файл(ПутьКФайлу).Путь
;
// #конец_импорта


// #импорт include/logger.sbsl 


///////////////////////////////////////////////////////////////////
// ЛОГГЕР
///////////////////////////////////////////////////////////////////

метод ЛогСтарт()

    пер КаталогЛога = новый Файл(ОбщиеДобавитьРазделитель(ОбщиеКаталогСкрипта()) + "script_logs")
    если не КаталогЛога.Существует()
        Файлы.СоздатьКаталог(КаталогЛога)
    ;

    пер PID = "7777"

    пер ЛогДатаВремя = ДатаВремя.Сейчас().Представление("ггММдд_ЧЧммсс_")
    пер ИмяФайлаЛога = ОбщиеФайлСкрипта().ИмяБезРасширения + "_" + ЛогДатаВремя + PID + ".log"

    пер ФайлЛога = новый Файл(ОбщиеДобавитьРазделитель(КаталогЛога.Путь) + ИмяФайлаЛога)
    если не ФайлЛога.Существует()
        исп ПотокЗаписи = ФайлЛога.ОткрытьПотокЗаписи()
        ПотокЗаписи.СброситьБуферы()
        ПотокЗаписи.Закрыть()
    ;

    ЛогИнформация("Started")
    
;

метод НайтиТекущийФайлЛога(): Файл?

    пер МассивНайденныхФайлов = новый Массив(Файлы.Найти(ОбщиеДобавитьРазделитель(ОбщиеКаталогСкрипта()) + "script_logs",
        новый НастройкиПоиска()
            .ИмяСодержит(ОбщиеФайлСкрипта().ИмяБезРасширения)
            .ИсключитьКаталоги(Истина)
            .МаксимальнаяГлубина(1)
        ))

    если МассивНайденныхФайлов.Размер() > 0 
        МассивНайденныхФайлов.Сортировать((о1:Файл,о2:Файл) -> (о1.ИмяБезРасширения>о2.ИмяБезРасширения ? -1 : 1))
        возврат МассивНайденныхФайлов[0]
    иначе
        возврат Неопределено
    ;

;

метод ЛогВывод(ЛогУровень: Строка, ДатаВремяНачала: ДатаВремя? = Неопределено, ЛогТекст: Строка, Ошибка: Булево = Ложь)
    
    пер ЛогДлительность: Число = (ДатаВремяНачала != Неопределено ? (ДатаВремя.Сейчас() - ДатаВремяНачала).ВМиллисекундах() : 0)
    пер ЛогДатаВремя = ДатаВремя.Сейчас().Представление("гггг-ММ-дд ЧЧ:мм:сс.ССС")

    пер СтрокаЛог = "$ЛогДатаВремя-$ЛогДлительность [$ЛогУровень] $ЛогТекст"
    
    если Ошибка
        Консоль.ЗаписатьОшибку(СтрокаЛог)
    иначе
        Консоль.Записать(СтрокаЛог)
    ;

    пер ФайлЛога = НайтиТекущийФайлЛога()
    если ФайлЛога != Неопределено
        исп ПотокЗаписи = ФайлЛога.ОткрытьПотокЗаписи(Истина)
        ПотокЗаписи.Записать(СтрокаЛог + "\r\n")
    ;
    
;

метод ЛогИнформация(ЛогТекст: Строка, ДатаВремяНачала: ДатаВремя? = Неопределено)
    
    пер ЛогУровень = "INFO"
    ЛогВывод(ЛогУровень, ДатаВремяНачала, ЛогТекст)
    
;

метод ЛогОшибка(ЛогТекст: Строка, ДатаВремяНачала: ДатаВремя? = Неопределено)
    
    пер ЛогУровень = "ERROR"
    ЛогВывод(ЛогУровень, ДатаВремяНачала, ЛогТекст, Истина)
    
;

// #конец_импорта


// #импорт include/releases.sbsl 


///////////////////////////////////////////////////////////////////
// РАБОТА С RELEASES
///////////////////////////////////////////////////////////////////


исключение ИсключениеОшибкаВыполненияОперацииReleases
    пер Адрес: Строка
;

исключение ИсключениеОшибкаАвторизацииReleases
    пер Адрес: Строка
    пер ИмяПользователя: Строка
;

структура СтруктураДистрибутиваReleases
    пер ВерсияДистрибутива: Строка = "0"
    пер ОС: Строка = ""
    пер Архитектура: Число = 64
    пер ТипДистрибутива: Строка = ""
;

метод ReleasesОписаниеФайлаДистрибутива(СтруктураДистрибутива: СтруктураДистрибутиваReleases): Соответствие<Строка, Строка>?

    пер ОписаниеФайлаДистрибутива: Соответствие<Строка, Строка>? = Неопределено

    пер СоответсвиеДистрибутива: Соответствие<СтруктураДистрибутиваReleases, Соответствие<Строка, Строка>> = новый Соответствие<СтруктураДистрибутиваReleases, Соответствие<Строка, Строка>>()
    
    // до платформы 8.3.20
    СоответсвиеДистрибутива.Вставить(новый СтруктураДистрибутиваReleases("0", "windows", 32, "thin-client"), {"Имя": "Тонкий клиент 1С:Предприятия для Windows", "Файл": "setuptc.rar"})
    СоответсвиеДистрибутива.Вставить(новый СтруктураДистрибутиваReleases("0", "windows", 64, "thin-client"), {"Имя": "Тонкий клиент 1С:Предприятие (64-bit) для Windows", "Файл": "setuptc64.rar"})
    СоответсвиеДистрибутива.Вставить(новый СтруктураДистрибутиваReleases("0", "linux-deb", 32, "thin-client"), {"Имя": "Тонкий клиент 1С:Предприятия для DEB-based Linux-систем", "Файл": "setuptc.tar.gz"})
    СоответсвиеДистрибутива.Вставить(новый СтруктураДистрибутиваReleases("0", "linux-rpm", 32, "thin-client"), {"Имя": "Тонкий клиент 1С:Предприятия для RPM-based Linux-систем", "Файл": "setuptc.tar.gz"})
    СоответсвиеДистрибутива.Вставить(новый СтруктураДистрибутиваReleases("0", "linux-deb", 64, "thin-client"), {"Имя": "Тонкий клиент 1С:Предприятия (64-bit) для DEB-based Linux-систем", "Файл": "setup64tc.tar.gz"})
    СоответсвиеДистрибутива.Вставить(новый СтруктураДистрибутиваReleases("0", "linux-rpm", 64, "thin-client"), {"Имя": "Тонкий клиент 1С:Предприятия (64-bit) для RPM-based Linux-систем", "Файл": "setup64tc.tar.gz"})
    СоответсвиеДистрибутива.Вставить(новый СтруктураДистрибутиваReleases("0", "windows", 32, "full"), {"Имя": "Технологическая платформа 1С:Предприятия для Windows", "Файл": "setup.rar"})
    СоответсвиеДистрибутива.Вставить(новый СтруктураДистрибутиваReleases("0", "windows", 64, "full"), {"Имя": "Технологическая платформа 1С:Предприятия (64-bit) для Windows", "Файл": "setup64full.rar"})
    СоответсвиеДистрибутива.Вставить(новый СтруктураДистрибутиваReleases("0", "linux-deb", 32, "client"), {"Имя": "Клиент 1С:Предприятия для DEB-based Linux-систем", "Файл": "setupclient.tar.gz"})
    СоответсвиеДистрибутива.Вставить(новый СтруктураДистрибутиваReleases("0", "linux-rpm", 32, "client"), {"Имя": "Клиент 1С:Предприятия для RPM-based Linux-систем", "Файл": "setupclient.tar.gz"})
    СоответсвиеДистрибутива.Вставить(новый СтруктураДистрибутиваReleases("0", "linux-deb", 64, "client"), {"Имя": "Клиент 1С:Предприятия (64-bit) для DEB-based Linux-систем", "Файл": "setup64client.tar.gz"})
    СоответсвиеДистрибутива.Вставить(новый СтруктураДистрибутиваReleases("0", "linux-rpm", 64, "client"), {"Имя": "Клиент 1С:Предприятия (64-bit) для RPM-based Linux-систем", "Файл": "setup64client.tar.gz"})
    СоответсвиеДистрибутива.Вставить(новый СтруктураДистрибутиваReleases("0", "linux-deb", 32, "server"), {"Имя": "Cервер 1С:Предприятия для DEB-based Linux-систем", "Файл": "setupserver.tar.gz"})
    СоответсвиеДистрибутива.Вставить(новый СтруктураДистрибутиваReleases("0", "linux-rpm", 32, "server"), {"Имя": "Cервер 1С:Предприятия для RPM-based Linux-систем", "Файл": "setupserver.tar.gz"})
    СоответсвиеДистрибутива.Вставить(новый СтруктураДистрибутиваReleases("0", "windows", 64, "server"), {"Имя": "Cервер 1С:Предприятия (64-bit) для Windows", "Файл": "setup64server.rar"})
    СоответсвиеДистрибутива.Вставить(новый СтруктураДистрибутиваReleases("0", "linux-deb", 64, "server"), {"Имя": "Cервер 1С:Предприятия (64-bit) для DEB-based Linux-систем", "Файл": "setup64server.tar.gz"})
    СоответсвиеДистрибутива.Вставить(новый СтруктураДистрибутиваReleases("0", "linux-rpm", 64, "server"), {"Имя": "Cервер 1С:Предприятия (64-bit) для RPM-based Linux-систем", "Файл": "setup64server.tar.gz"})

    // начиная с платформы 8.3.20
    СоответсвиеДистрибутива.Вставить(новый СтруктураДистрибутиваReleases("20", "windows", 32, "thin-client"), {"Имя": "Тонкий клиент 1С:Предприятия для Windows", "Файл": "setuptc.rar"})
    СоответсвиеДистрибутива.Вставить(новый СтруктураДистрибутиваReleases("20", "windows", 64, "thin-client"), {"Имя": "Тонкий клиент 1С:Предприятие (64-bit) для Windows", "Файл": "setuptc64.rar"})
    СоответсвиеДистрибутива.Вставить(новый СтруктураДистрибутиваReleases("20", "windows", 32, "full"), {"Имя": "Технологическая платформа 1С:Предприятия для Windows", "Файл": "setup.rar"})
    СоответсвиеДистрибутива.Вставить(новый СтруктураДистрибутиваReleases("20", "windows", 64, "full"), {"Имя": "Технологическая платформа 1С:Предприятия (64-bit) для Windows", "Файл": "setup64full.rar"})
    СоответсвиеДистрибутива.Вставить(новый СтруктураДистрибутиваReleases("20", "windows", 64, "server"), {"Имя": "Cервер 1С:Предприятия (64-bit) для Windows", "Файл": "setup64server.rar"})
    СоответсвиеДистрибутива.Вставить(новый СтруктураДистрибутиваReleases("20", "linux-deb", 32, "thin-client"), {"Имя": "Тонкий клиент 1С:Предприятия для Linux", "Файл": "setuptc.tar.gz"})
    СоответсвиеДистрибутива.Вставить(новый СтруктураДистрибутиваReleases("20", "linux-rpm", 32, "thin-client"), {"Имя": "Тонкий клиент 1С:Предприятия для Linux", "Файл": "setuptc.tar.gz"})
    СоответсвиеДистрибутива.Вставить(новый СтруктураДистрибутиваReleases("20", "linux-deb", 64, "thin-client"), {"Имя": "Тонкий клиент 1С:Предприятия (64-bit) для Linux", "Файл": "setup64tc.tar.gz"})
    СоответсвиеДистрибутива.Вставить(новый СтруктураДистрибутиваReleases("20", "linux-rpm", 64, "thin-client"), {"Имя": "Тонкий клиент 1С:Предприятия (64-bit) для Linux", "Файл": "setup64tc.tar.gz"})
    СоответсвиеДистрибутива.Вставить(новый СтруктураДистрибутиваReleases("20", "linux-deb", 32, "client"), {"Имя": "Технологическая платформа 1С:Предприятия для Linux", "Файл": "setupclient.tar.gz"})
    СоответсвиеДистрибутива.Вставить(новый СтруктураДистрибутиваReleases("20", "linux-rpm", 32, "client"), {"Имя": "Технологическая платформа 1С:Предприятия для Linux", "Файл": "setupclient.tar.gz"})
    СоответсвиеДистрибутива.Вставить(новый СтруктураДистрибутиваReleases("20", "linux-deb", 64, "client"), {"Имя": "Технологическая платформа 1С:Предприятия (64-bit) для Linux", "Файл": "setup64client.tar.gz"})
    СоответсвиеДистрибутива.Вставить(новый СтруктураДистрибутиваReleases("20", "linux-rpm", 64, "client"), {"Имя": "Технологическая платформа 1С:Предприятия (64-bit) для Linux", "Файл": "setup64client.tar.gz"})
    СоответсвиеДистрибутива.Вставить(новый СтруктураДистрибутиваReleases("20", "linux-deb", 32, "server"), {"Имя": "Технологическая платформа 1С:Предприятия для Linux", "Файл": "setupserver.tar.gz"})
    СоответсвиеДистрибутива.Вставить(новый СтруктураДистрибутиваReleases("20", "linux-rpm", 32, "server"), {"Имя": "Технологическая платформа 1С:Предприятия для Linux", "Файл": "setupserver.tar.gz"})
    СоответсвиеДистрибутива.Вставить(новый СтруктураДистрибутиваReleases("20", "linux-deb", 64, "server"), {"Имя": "Технологическая платформа 1С:Предприятия (64-bit) для Linux", "Файл": "setup64server.tar.gz"})
    СоответсвиеДистрибутива.Вставить(новый СтруктураДистрибутиваReleases("20", "linux-rpm", 64, "server"), {"Имя": "Технологическая платформа 1С:Предприятия (64-bit) для Linux", "Файл": "setup64server.tar.gz"})
    
    // postgres
    СоответсвиеДистрибутива.Вставить(новый СтруктураДистрибутиваReleases("PG", "windows", 32, ""), {"Имя": "Дистрибутив СУБД PostgreSQL для Windows одним архивом", "Файл": ""})
    СоответсвиеДистрибутива.Вставить(новый СтруктураДистрибутиваReleases("PG", "windows", 64, ""), {"Имя": "Дистрибутив СУБД PostgreSQL для Windows (64-bit) одним архивом", "Файл": ""})
    СоответсвиеДистрибутива.Вставить(новый СтруктураДистрибутиваReleases("PG", "linux-rpm", 32, ""), {"Имя": "Дистрибутив СУБД PostgreSQL для Linux x86 одним архивом (RPM)", "Файл": ""})
    СоответсвиеДистрибутива.Вставить(новый СтруктураДистрибутиваReleases("PG", "linux-rpm", 64, ""), {"Имя": "Дистрибутив СУБД PostgreSQL для Linux x86 (64-bit) одним архивом (RPM)", "Файл": ""})
    СоответсвиеДистрибутива.Вставить(новый СтруктураДистрибутиваReleases("PG", "linux-deb", 32, ""), {"Имя": "Дистрибутив СУБД PostgreSQL для Linux x86 одним архивом (DEB)", "Файл": ""})
    СоответсвиеДистрибутива.Вставить(новый СтруктураДистрибутиваReleases("PG", "linux-deb", 64, ""), {"Имя": "Дистрибутив СУБД PostgreSQL для Linux x86 (64-bit) одним архивом (DEB)", "Файл": ""})
    
    если СоответсвиеДистрибутива.СодержитКлюч(СтруктураДистрибутива)
        ОписаниеФайлаДистрибутива = СоответсвиеДистрибутива[СтруктураДистрибутива]
    ;
    
    возврат ОписаниеФайлаДистрибутива

;

метод ReleasesПолучитьЭлементыСтраницы(ТекстHTML: Строка, ТипЭлемента:Строка, ПолеОтбора: Строка = "", ЗначениеОтбора: Строка = "", ПоЧастиСтроки: Булево = Истина): ЧитаемыйМассив<Соответствие<Строка, Строка>>
    
    пер МассивЭлементов: Массив<Соответствие<Строка, Строка>> = новый Массив<Соответствие<Строка, Строка>>()
    ТекстHTML = ТекстHTML.Заменить("\r", "").Заменить("\n", "").Заменить("  ", "").Заменить("\t", "")

    пер НачалоЭлемента: Число = ТекстHTML.ВНижнийРегистр().Найти("<" + ТипЭлемента.ВНижнийРегистр() + " ")
    ТекстHTML = ТекстHTML.Подстрока(НачалоЭлемента)
    НачалоЭлемента = 0
    
    пока НачалоЭлемента >= 0
        
        пер ЭтоТэгСДанными = Ложь
        пер КонецЭлемента: Число = ТекстHTML.Найти("/>")
        пер КонецЭлемента2: Число = ТекстHTML.ВНижнийРегистр().Найти("</" + ТипЭлемента.ВНижнийРегистр() + ">")
        пер Данные: Строка = ""

        пер Элемент: Строка = ""

        если КонецЭлемента2 > 0 и (КонецЭлемента2 < КонецЭлемента или КонецЭлемента < 0)
            ЭтоТэгСДанными = Истина
            КонецЭлемента = КонецЭлемента2
            Элемент = ТекстHTML.Подстрока(ТипЭлемента.Длина() + 1, КонецЭлемента)
        иначе
            Элемент = ТекстHTML.Подстрока(ТипЭлемента.Длина() + 1, КонецЭлемента)
        ;
        
        если не ЭтоТэгСДанными и Элемент.ЗаканчиваетсяНа(">")
            Элемент = Элемент.Подстрока(0, Элемент.Длина() - 1)
        иначе если ЭтоТэгСДанными
            Данные = Элемент.Подстрока(Элемент.Найти(">") + 1)
            Элемент = Элемент.Подстрока(0, Элемент.Найти(">"))
        ;
        
        пер МассивАтрибутов: Массив<Строка> = Элемент.Разделить(" ")
        пер СоответствиеДанных: Соответствие<Строка, Строка> = новый Соответствие<Строка, Строка>()
        
        для Атрибут из МассивАтрибутов

            пер МассивДанныхАтрибута = Атрибут.Разделить("=")        
            если МассивДанныхАтрибута.Размер() > 1
            
                попытка
                    СоответствиеДанных.Вставить(МассивДанныхАтрибута[0], Атрибут.Подстрока(МассивДанныхАтрибута[0].Длина() + 1))
                поймать Исключение: Исключение
                ;
            
            ;
        
        ;

        если ЭтоТэгСДанными
            СоответствиеДанных.Вставить("__data__", Данные)
        ;
        
        пер ПодходитПодОтбор: Булево = Истина
        если не ПолеОтбора.Пусто() 
            если не СоответствиеДанных.СодержитКлюч(ПолеОтбора)
                ПодходитПодОтбор = Ложь
            иначе если не ПоЧастиСтроки и СоответствиеДанных[ПолеОтбора] != ЗначениеОтбора
                ПодходитПодОтбор = Ложь
            иначе если ПоЧастиСтроки и не СоответствиеДанных[ПолеОтбора].Содержит(ЗначениеОтбора, Истина)
                ПодходитПодОтбор = Ложь
            ;
        ;   
        
        если СоответствиеДанных.Размер() > 0 и ПодходитПодОтбор
            МассивЭлементов.Добавить(СоответствиеДанных)
        ;

        ТекстHTML = ТекстHTML.Подстрока(КонецЭлемента + 2)
        НачалоЭлемента = ТекстHTML.ВНижнийРегистр().Найти("<" + ТипЭлемента.ВНижнийРегистр() + " ")

        если НачалоЭлемента >= 0
            ТекстHTML = ТекстHTML.Подстрока(НачалоЭлемента)
        ;
        
    ;
    
    возврат новый ЧитаемыйМассив<Соответствие<Строка, Строка>>(МассивЭлементов)

;

метод ReleasesПодключиться(Параметры: СтруктураПараметров): КлиентHttp

    ЛогИнформация("Authorization " + Параметры.АдресАвторизации + "...")
    
    пер Адрес: Строка = Параметры.АдресАвторизации + "/login?service=https\%3A\%2F\%2Freleases.1c.ru\%2Fpublic\%2Fsecurity_check"
    исп ОтветФорма = КлиентHttp.СМаксимумомПеренаправлений(7)
        .ЗапросGet(Адрес)
        .УстановитьЗаголовок("Connection", "keep-alive")
        .УстановитьЗаголовок("Upgrade-Insecure-Requests", "1")
        .УстановитьЗаголовок("User-Agent", "Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36")
        .УстановитьЗаголовок("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9")
        .УстановитьЗаголовок("Accept-Encoding", "gzip, deflate, br")
        .УстановитьЗаголовок("Accept-Language", "ru,en;q=0.9,ru-RU;q=0.8,en-US;q=0.7")
        .УстановитьТаймаутСоединения(60с)
        .УстановитьТаймаутЗапроса(60с)
        .Выполнить()
        
    если ОтветФорма.КодСостояния != 200
        пер Ошибка: Строка = "Authorization failed: " + ОтветФорма.КодСостояния.ВСтроку() + ". " + ОтветФорма.Причина
        ЛогОшибка(Ошибка)
        выбросить новый ИсключениеОшибкаАвторизацииReleases(Ошибка + "\n" + Адрес, Адрес, Параметры.ИмяПользователя)
    ;

    пер МассивПолейInput: ЧитаемыйМассив<Соответствие<Строка, Строка>> = ReleasesПолучитьЭлементыСтраницы(ОтветФорма.Тело.ПрочитатьКакСтроку(), "input")
    пер МассивПараметровЗапроса: Массив<Строка> = новый Массив<Строка>()
    для ПолеInput из МассивПолейInput
    
        если не ПолеInput.СодержитКлюч("name") или не ПолеInput.СодержитКлюч("value")
            продолжить
        ;
        
        пер Ключ = ПолеInput["name"].Заменить("\"", "")
        если не ["username", "password", "execution", "_eventId", "inviteCode", "inviteType", "rememberMe", "geolocation", "submit"].Содержит(Ключ)
            продолжить
        ;
         
        если  Ключ == "username"
            ПолеInput["value"] = ОбщиеКодироватьВURL(Параметры.ИмяПользователя)
        ;
        
        если Ключ == "password"
            ПолеInput["value"] = ОбщиеКодироватьВURL(Параметры.Пароль)
        ;
        
        если Ключ == "execution"
            ПолеInput["value"] = ОбщиеКодироватьВURL(ОбщиеУбратьГраничныеСимволы(ПолеInput["value"].Сократить(), "\""))
        ;
        
        МассивПараметровЗапроса.Добавить(Ключ + "=" + ОбщиеКодироватьВURL(ОбщиеУбратьГраничныеСимволы(ПолеInput["value"], "\"")))
    
    ;
    
    пер ReleasesКлиентHttp: КлиентHttp = КлиентHttp.СБазовымUrl(Параметры.АдресАвторизации)
    
    исп ОтветЛогин = ReleasesКлиентHttp
        .ЗапросPost("/login")
        .УстановитьТипСодержимого("application/x-www-form-urlencoded")
        .УстановитьТело(Строки.Соединить(МассивПараметровЗапроса, "&"))
        .УстановитьМаксимумПеренаправлений(0)
        .УстановитьТаймаутСоединения(60с)
        .УстановитьТаймаутЗапроса(60с)
        .Выполнить()

    если ОтветЛогин.КодСостояния != 200 и ОтветЛогин.КодСостояния != 302
        пер Ошибка: Строка = "Authorization failed: " + ОтветЛогин.КодСостояния.ВСтроку() + ". " + ОтветЛогин.Причина
        ЛогОшибка(Ошибка)
        выбросить новый ИсключениеОшибкаАвторизацииReleases(Ошибка + "\n" + Адрес, Адрес, Параметры.ИмяПользователя)
    ;

    если ОтветЛогин.КодСостояния == 302 и не ОтветЛогин.Заголовки.ПолучитьПервый("location").НачинаетсяС("https://releases.1c.")
        Адрес = ОтветЛогин.Заголовки.ПолучитьПервый("location")
        пер Ошибка: Строка = "Authorization failed: wrong redirect location. " + Адрес
        ЛогОшибка(Ошибка)
        выбросить новый ИсключениеОшибкаАвторизацииReleases(Ошибка + "\n" + Адрес, Адрес, Параметры.ИмяПользователя)
    ;

    ЛогИнформация("Authorization - SUCCESS")
    
    возврат ReleasesКлиентHttp

;

метод ReleasesНайтиСсылкуНаПлатформу(ReleasesКлиентHttp: КлиентHttp, 
    БазовыйАдрес:Строка, 
    ТребуемаяВерсия: Строка,
    ОС: Строка, 
    Архитектура: Число, 
    ТипДистрибутива: Строка): Соответствие<Строка, Строка>
    
    пер СсылкаИВерсия: Соответствие<Строка, Строка> = {"Ссылка": "", "ВерсияДистрибутива": ""}
    пер Ссылка: Строка = ""
    
    ЛогИнформация("Get platform link")

    пер Адрес: Строка = БазовыйАдрес + "/project/Platform83"
    исп Ответ = ReleasesКлиентHttp.СМаксимумомПеренаправлений(7)
        .ЗапросGet(Адрес)
        .УстановитьТаймаутСоединения(60с)
        .УстановитьТаймаутЗапроса(60с)
        .Выполнить()
                    
    если Ответ.КодСостояния != 200
        пер Ошибка: Строка = "Error: " + Ответ.КодСостояния.ВСтроку() + ". " + Ответ.Причина
        ЛогОшибка(Ошибка)
        выбросить новый ИсключениеОшибкаВыполненияОперацииReleases(Ошибка + "\n" + Адрес, Адрес)
    ;
    
    пер НачалоСсылки: Строка = "/version_files?nick=Platform83&ver="
    пер МассивСсылок: ЧитаемыйМассив<Соответствие<Строка, Строка>> = ReleasesПолучитьЭлементыСтраницы(
        ТекстHTML = Ответ.Тело.ПрочитатьКакСтроку(), 
        ТипЭлемента = "a", 
        ПолеОтбора = "href", 
        ЗначениеОтбора = НачалоСсылки + ТребуемаяВерсия
    )
    
    пер МаксимальнаяВерсия: Число = 0
    пер ВерсияДистрибутива = ""
    пер ВерсияСтрокой = ""
    для ЭлементСсылка из МассивСсылок
        
        пер МассивЧастейСсылки: Массив<Строка> = ЭлементСсылка["href"].Разделить("=")
        если МассивЧастейСсылки.Размер() == 0
            продолжить
        ;
        
        пер Версия = МассивЧастейСсылки[МассивЧастейСсылки.Размер() - 1].Заменить("\"", "")
        пер МассивЧастейВерсии = Версия.Разделить(".")
        если МассивЧастейВерсии.Размер() != 4
            продолжить
        ;
        
        пер ВерсияЧислом: Число = 8300000 + новый Число(МассивЧастейВерсии[2]) * 10000 + новый Число(МассивЧастейВерсии[3])
        если ВерсияЧислом > МаксимальнаяВерсия
            МаксимальнаяВерсия = ВерсияЧислом
            Ссылка = БазовыйАдрес + НачалоСсылки + Версия
            ВерсияДистрибутива = ((новый Число(МассивЧастейВерсии[2])) >= 20 ? "20" : "0")
            ВерсияСтрокой = Версия
        ;
        
    ;
    
    исп ОтветТип = ReleasesКлиентHttp.СМаксимумомПеренаправлений(7)
        .ЗапросGet(Ссылка)
        .УстановитьТаймаутСоединения(60с)
        .УстановитьТаймаутЗапроса(60с)
        .Выполнить()
                    
    если ОтветТип.КодСостояния != 200
        пер Ошибка: Строка = "Error: " + ОтветТип.КодСостояния.ВСтроку() + ". " + ОтветТип.Причина
        ЛогОшибка(Ошибка)
        выбросить новый ИсключениеОшибкаВыполненияОперацииReleases(Ошибка + "\n" + Ссылка, Ссылка)
    ;
    
    МассивСсылок = ReleasesПолучитьЭлементыСтраницы(
        ТекстHTML = ОтветТип.Тело.ПрочитатьКакСтроку(), 
        ТипЭлемента = "a" 
    )

    Ссылка = ""
    
    пер ОписаниеДистрибутива: Соответствие<Строка, Строка>? = ReleasesОписаниеФайлаДистрибутива(новый СтруктураДистрибутиваReleases(ВерсияДистрибутива, ОС, Архитектура, ТипДистрибутива))
    
    для ЭлементСсылка из МассивСсылок
    
        если не ЭлементСсылка.СодержитКлюч("__data__") 
            или ОписаниеДистрибутива == Неопределено
            или (ЭлементСсылка["__data__"] != ОписаниеДистрибутива["Имя"])
            продолжить
        ;
        
        Ссылка = БазовыйАдрес + ОбщиеУбратьГраничныеСимволы(ЭлементСсылка["href"], "\"")
        прервать
        
    ;
    
    если не Ссылка.Пусто()
    
        исп ОтветДистрибутив = ReleasesКлиентHttp.СМаксимумомПеренаправлений(7)
            .ЗапросGet(Ссылка)
            .УстановитьТаймаутСоединения(60с)
            .УстановитьТаймаутЗапроса(60с)
            .Выполнить()
                        
        если ОтветДистрибутив.КодСостояния != 200
            пер Ошибка: Строка = "Error: " + ОтветДистрибутив.КодСостояния.ВСтроку() + ". " + ОтветДистрибутив.Причина
            ЛогОшибка(Ошибка)
            выбросить новый ИсключениеОшибкаВыполненияОперацииReleases(Ошибка + "\n" + Ссылка, Ссылка)
        ;
        
        МассивСсылок = ReleasesПолучитьЭлементыСтраницы(
            ТекстHTML = ОтветДистрибутив.Тело.ПрочитатьКакСтроку(), 
            ТипЭлемента = "a" 
        )
        
        Ссылка = ""
        для ЭлементСсылка из МассивСсылок
            если ЭлементСсылка.СодержитКлюч("__data__") и ЭлементСсылка["__data__"] == "Скачать дистрибутив"
                Ссылка = ОбщиеУбратьГраничныеСимволы(ЭлементСсылка["href"], "\"")
                прервать
            ; 
        ;
    
    ;
    
    СсылкаИВерсия["Ссылка"] = Ссылка
    СсылкаИВерсия["ВерсияДистрибутива"] = ВерсияДистрибутива
    СсылкаИВерсия["Версия"] = ВерсияСтрокой
    
    возврат СсылкаИВерсия
    
;

метод ReleasesНайтиСсылкуНаКонфигурацию(ReleasesКлиентHttp: КлиентHttp, 
    БазовыйАдрес:Строка, 
    ТребуемаяВерсия: Строка,
    ИмяКонфигурации: Строка,
    ТипДистрибутива: Строка): Соответствие<Строка, Строка>
    
    пер СсылкаИВерсия: Соответствие<Строка, Строка> = {"Ссылка": "", "ВерсияДистрибутива": ""}
    пер Ссылка: Строка = ""
    
    ЛогИнформация("Get configuration link")

    // Список программ
    пер Адрес: Строка = БазовыйАдрес + "/total"
    исп Ответ = ReleasesКлиентHttp.СМаксимумомПеренаправлений(7)
        .ЗапросGet(Адрес)
        .УстановитьТаймаутСоединения(60с)
        .УстановитьТаймаутЗапроса(60с)
        .Выполнить()
                    
    если Ответ.КодСостояния != 200
        пер Ошибка: Строка = "Error: " + Ответ.КодСостояния.ВСтроку() + ". " + Ответ.Причина
        ЛогОшибка(Ошибка)
        выбросить новый ИсключениеОшибкаВыполненияОперацииReleases(Ошибка + "\n" + Адрес, Адрес)
    ;
    
    пер МассивСсылок: ЧитаемыйМассив<Соответствие<Строка, Строка>> = ReleasesПолучитьЭлементыСтраницы(
        ТекстHTML = Ответ.Тело.ПрочитатьКакСтроку(), 
        ТипЭлемента = "a",
        ПолеОтбора = "__data__",
        ЗначениеОтбора = ИмяКонфигурации
    )
    
    если МассивСсылок.Размер() == 0
        возврат СсылкаИВерсия
    ;

    // Список версий
    Ссылка = БазовыйАдрес + ОбщиеУбратьГраничныеСимволы(МассивСсылок[0]["href"].Сократить(), "\"")    
    исп ОтветВерсии = ReleasesКлиентHttp.СМаксимумомПеренаправлений(7)
        .ЗапросGet(Ссылка)
        .УстановитьТаймаутСоединения(60с)
        .УстановитьТаймаутЗапроса(60с)
        .Выполнить()
                    
    если ОтветВерсии.КодСостояния != 200
        пер Ошибка: Строка = "Error: " + ОтветВерсии.КодСостояния.ВСтроку() + ". " + ОтветВерсии.Причина
        ЛогОшибка(Ошибка)
        выбросить новый ИсключениеОшибкаВыполненияОперацииReleases(Ошибка + "\n" + Ссылка, Ссылка)
    ;
    
    МассивСсылок = ReleasesПолучитьЭлементыСтраницы(
        ТекстHTML = ОтветВерсии.Тело.ПрочитатьКакСтроку(), 
        ТипЭлемента = "a",
        ПолеОтбора = "__data__",
        ЗначениеОтбора = ТребуемаяВерсия
    )
    
    если МассивСсылок.Размер() == 0
        возврат СсылкаИВерсия
    ;
    
    // Тип дистрибутива
    Ссылка = БазовыйАдрес + ОбщиеУбратьГраничныеСимволы(МассивСсылок[0]["href"].Сократить(), "\"")    
    исп ОтветТип = ReleasesКлиентHttp.СМаксимумомПеренаправлений(7)
        .ЗапросGet(Ссылка)
        .УстановитьТаймаутСоединения(60с)
        .УстановитьТаймаутЗапроса(60с)
        .Выполнить()
                    
    если ОтветТип.КодСостояния != 200
        пер Ошибка: Строка = "Error: " + ОтветТип.КодСостояния.ВСтроку() + ". " + ОтветТип.Причина
        ЛогОшибка(Ошибка)
        выбросить новый ИсключениеОшибкаВыполненияОперацииReleases(Ошибка + "\n" + Ссылка, Ссылка)
    ;
    
    МассивСсылок = ReleasesПолучитьЭлементыСтраницы(
        ТекстHTML = ОтветТип.Тело.ПрочитатьКакСтроку(), 
        ТипЭлемента = "a",
        ПолеОтбора = "__data__",
        ЗначениеОтбора = (ТипДистрибутива.Сравнить("full", Истина) == 0 ? "Полный дистрибутив" : "Дистрибутив обновления")
    )
    
    если МассивСсылок.Размер() == 0
        возврат СсылкаИВерсия
    ;

    Ссылка = БазовыйАдрес + ОбщиеУбратьГраничныеСимволы(МассивСсылок[0]["href"].Сократить(), "\"")
    исп ОтветДистрибутив = ReleasesКлиентHttp.СМаксимумомПеренаправлений(7)
        .ЗапросGet(Ссылка)
        .УстановитьТаймаутСоединения(60с)
        .УстановитьТаймаутЗапроса(60с)
        .Выполнить()
                    
    если ОтветДистрибутив.КодСостояния != 200
        пер Ошибка: Строка = "Error: " + ОтветДистрибутив.КодСостояния.ВСтроку() + ". " + ОтветДистрибутив.Причина
        ЛогОшибка(Ошибка)
        выбросить новый ИсключениеОшибкаВыполненияОперацииReleases(Ошибка + "\n" + Ссылка, Ссылка)
    ;
    
    МассивСсылок = ReleasesПолучитьЭлементыСтраницы(
        ТекстHTML = ОтветДистрибутив.Тело.ПрочитатьКакСтроку(), 
        ТипЭлемента = "a", 
        ПолеОтбора = "__data__",
        ЗначениеОтбора = "Скачать дистрибутив"
    )
    
    если МассивСсылок.Размер() == 0
        возврат СсылкаИВерсия
    ;

    СсылкаИВерсия["Ссылка"] = ОбщиеУбратьГраничныеСимволы(МассивСсылок[0]["href"], "\"")
    СсылкаИВерсия["ВерсияДистрибутива"] = ТребуемаяВерсия
    СсылкаИВерсия["Версия"] = ТребуемаяВерсия
    
    возврат СсылкаИВерсия
    
;

метод ReleasesНайтиСсылкуНаPostgres(ReleasesКлиентHttp: КлиентHttp, 
    БазовыйАдрес:Строка, 
    ТребуемаяВерсия: Строка,
    ОС: Строка, 
    Архитектура: Число): Соответствие<Строка, Строка>
    
    пер СсылкаИВерсия: Соответствие<Строка, Строка> = {"Ссылка": "", "ВерсияДистрибутива": ""}
    пер Ссылка: Строка = ""
    
    ЛогИнформация("Get postgres link")

    пер Адрес: Строка = БазовыйАдрес + "/project/AddCompPostgre"
    исп Ответ = ReleasesКлиентHttp.СМаксимумомПеренаправлений(7)
        .ЗапросGet(Адрес)
        .УстановитьТаймаутСоединения(60с)
        .УстановитьТаймаутЗапроса(60с)
        .Выполнить()
                    
    если Ответ.КодСостояния != 200
        пер Ошибка: Строка = "Error: " + Ответ.КодСостояния.ВСтроку() + ". " + Ответ.Причина
        ЛогОшибка(Ошибка)
        выбросить новый ИсключениеОшибкаВыполненияОперацииReleases(Ошибка + "\n" + Адрес, Адрес)
    ;
    
    пер НачалоСсылки: Строка = "/version_files?nick=AddCompPostgre&ver="
    пер МассивСсылок: ЧитаемыйМассив<Соответствие<Строка, Строка>> = ReleasesПолучитьЭлементыСтраницы(
        ТекстHTML = Ответ.Тело.ПрочитатьКакСтроку(), 
        ТипЭлемента = "a", 
        ПолеОтбора = "href", 
        ЗначениеОтбора = НачалоСсылки + (ТребуемаяВерсия == "current" ? "" : ТребуемаяВерсия)
    )
    
    пер МаксимальнаяВерсия: Число = 0
    пер ВерсияДистрибутива = ""
    пер ВерсияСтрокой = ""
    для ЭлементСсылка из МассивСсылок
        
        пер МассивЧастейСсылки: Массив<Строка> = ЭлементСсылка["href"].Разделить("=")
        если МассивЧастейСсылки.Размер() == 0
            продолжить
        ;
        
        пер Версия = МассивЧастейСсылки[МассивЧастейСсылки.Размер() - 1]
            .Заменить("\"", "")
            .Заменить(".1C", "") // eng
            .Заменить(".1С", "") // rus
            .Заменить(".1\%d0\%a1", "") // rus url
            .Заменить("-", ".")
            .Заменить("'", "")

        пер МассивЧастейВерсии = Версия.Разделить(".")
        если не (новый Диапазон(3, 4)).Содержит(МассивЧастейВерсии.Размер()) 
            продолжить
        ;
        
        пер ВерсияЧислом: Число = новый Число(МассивЧастейВерсии[0]) * 10000 
                                + новый Число(МассивЧастейВерсии[1]) * 100
                                + новый Число(МассивЧастейВерсии[2])
                                
        если ВерсияЧислом > МаксимальнаяВерсия
            ВерсияСтрокой = МассивЧастейВерсии[0] + "." + МассивЧастейВерсии[1] + "-" + МассивЧастейВерсии[2] + ".1C"
            МаксимальнаяВерсия = ВерсияЧислом
            Ссылка = БазовыйАдрес + НачалоСсылки + ВерсияСтрокой
        ;
        
    ;
    
    исп ОтветТип = ReleasesКлиентHttp.СМаксимумомПеренаправлений(7)
        .ЗапросGet(Ссылка)
        .УстановитьТаймаутСоединения(60с)
        .УстановитьТаймаутЗапроса(60с)
        .Выполнить()
                    
    если ОтветТип.КодСостояния != 200
        пер Ошибка: Строка = "Error: " + ОтветТип.КодСостояния.ВСтроку() + ". " + ОтветТип.Причина
        ЛогОшибка(Ошибка)
        выбросить новый ИсключениеОшибкаВыполненияОперацииReleases(Ошибка + "\n" + Ссылка, Ссылка)
    ;
    
    пер ОписаниеДистрибутива: Соответствие<Строка, Строка>? = ReleasesОписаниеФайлаДистрибутива(новый СтруктураДистрибутиваReleases("PG", ОС, Архитектура, ""))
    
    МассивСсылок = ReleasesПолучитьЭлементыСтраницы(
        ТекстHTML = ОтветТип.Тело.ПрочитатьКакСтроку(), 
        ТипЭлемента = "a", 
        ПолеОтбора = "__data__", 
        ЗначениеОтбора = (ОписаниеДистрибутива == Неопределено ? "-=#=-" : ОписаниеДистрибутива["Имя"]),
        ПоЧастиСтроки = (ОписаниеДистрибутива != Неопределено)
    )
    
    Ссылка = ""
    если МассивСсылок.Размер() > 0
    
        Ссылка = БазовыйАдрес + ОбщиеУбратьГраничныеСимволы(МассивСсылок[0]["href"].Сократить(), "\"")
    
        исп ОтветДистрибутив = ReleasesКлиентHttp.СМаксимумомПеренаправлений(7)
            .ЗапросGet(Ссылка)
            .УстановитьТаймаутСоединения(60с)
            .УстановитьТаймаутЗапроса(60с)
            .Выполнить()
                        
        если ОтветДистрибутив.КодСостояния != 200
            пер Ошибка: Строка = "Error: " + ОтветДистрибутив.КодСостояния.ВСтроку() + ". " + ОтветДистрибутив.Причина
            ЛогОшибка(Ошибка)
            выбросить новый ИсключениеОшибкаВыполненияОперацииReleases(Ошибка + "\n" + Ссылка, Ссылка)
        ;
        
        МассивСсылок = ReleasesПолучитьЭлементыСтраницы(
            ТекстHTML = ОтветДистрибутив.Тело.ПрочитатьКакСтроку(), 
            ТипЭлемента = "a", 
            ПолеОтбора = "__data__", 
            ЗначениеОтбора = "Скачать дистрибутив",
            ПоЧастиСтроки = Ложь
        )

        Ссылка = ""
        если МассивСсылок.Размер() > 0
            Ссылка = ОбщиеУбратьГраничныеСимволы(МассивСсылок[0]["href"].Сократить(), "\"")
        ;
    
    ;
    
    СсылкаИВерсия["Ссылка"] = Ссылка
    СсылкаИВерсия["ВерсияДистрибутива"] = ВерсияДистрибутива
    СсылкаИВерсия["Версия"] = ВерсияСтрокой
    
    возврат СсылкаИВерсия
    
;


метод ReleasesИмяФайлаИзЗаголовкаОтвета(Ответ: ОтветHttp): Строка

    пер ИмяФайла: Строка = ""

    если не Ответ.Заголовки.Содержит("content-disposition")
        или не Ответ.Заголовки.ПолучитьПервый("content-disposition").Содержит("filename=")
        
        возврат ИмяФайла
        
    ;
    
    ИмяФайла = Ответ.Заголовки.ПолучитьПервый("content-disposition").Разделить("filename=")[1]
    ИмяФайла = ОбщиеУбратьГраничныеСимволы(ИмяФайла, "\"")
    
    возврат ИмяФайла
    
;

метод ReleasesСкачатьДистрибутив(ReleasesКлиентHttp: КлиентHttp, Ссылка: Строка): Файл

    ЛогИнформация("Downloading file - start")
    пер ВремяНачалаОперации = ДатаВремя.Сейчас()

    исп Ответ = ReleasesКлиентHttp.СМаксимумомПеренаправлений(7)
        .ЗапросGet(Ссылка)
        .УстановитьТаймаутСоединения(60с)
        .УстановитьТаймаутЗапроса(60с)
        .Выполнить()
        
    пер ИмяАрхива: Строка = ReleasesИмяФайлаИзЗаголовкаОтвета(Ответ)
    если ИмяАрхива.Пусто()
        ИмяАрхива = "setup.zip"
    ;

    пер ВременныйКаталогПриемник: Файл = Файлы.СоздатьВременныйКаталог("ex_")    
    пер ФайлАрхива: Файл = новый Файл(ОбщиеДобавитьРазделитель(ВременныйКаталогПриемник.Путь) + ИмяАрхива)
    
    если Ответ.КодСостояния != 200
        пер Ошибка: Строка = "Error: " + Ответ.КодСостояния.ВСтроку() + ". " + Ответ.Причина
        ЛогОшибка(Ошибка)
        выбросить новый ИсключениеОшибкаВыполненияОперацииReleases(Ошибка + "\n" + Ссылка, Ссылка)
    ;
    
    исп ПотокЗаписиАрхива: ПотокЗаписи = ФайлАрхива.ОткрытьПотокЗаписи() 
    Ответ.Тело.КопироватьВ(ПотокЗаписиАрхива)
        
    ЛогИнформация("Downloading file - complete", ВремяНачалаОперации)
    
    возврат ФайлАрхива
    
;


// #конец_импорта


///////////////////////////////////////////////////////////////////
// ПРИВАТНАЯ ЧАСТЬ
///////////////////////////////////////////////////////////////////


структура СтруктураПараметров
    // общие
    пер Задержка: Число = 0
    пер ВремяСтарта: ДатаВремя = ДатаВремя{2000-01-01}
    пер ЛимитВремени: Число = 0
    
    // параметры скрипта
    пер БазовыйАдрес: Строка = "https://releases.1c."
    пер АдресАвторизации: Строка = "https://login.1c."
    пер ИмяПользователя: Строка = ""
    пер Пароль: Строка = ""
    пер КаталогПриемник: Строка = ""
    пер Версия: Строка = ""
    пер ТипДистрибутива: Строка = ""
    пер ИмяКонфигурации: Строка = ""
    
    пер ИспользоватьАнглийскуюВерсию: Булево = Ложь
    пер СохранятьКакЕсть: Булево = Ложь
;

метод ПолучитьПараметры(СоответствиеПараметров: Соответствие<Строка, Строка>): СтруктураПараметров

    пер Параметры = новый СтруктураПараметров()
    
    Параметры.ВремяСтарта = ДатаВремя.Сейчас()

    Параметры.ИмяПользователя = ОбщиеЗначениеПараметраСтрока(СоответствиеПараметров, "username")
    Параметры.Пароль = ОбщиеЗначениеПараметраСтрока(СоответствиеПараметров, "password")
    Параметры.КаталогПриемник = ОбщиеЗначениеПараметраСтрока(СоответствиеПараметров, "download-folder")
    Параметры.Версия = ОбщиеЗначениеПараметраСтрока(СоответствиеПараметров, "version")
    Параметры.ИмяКонфигурации = ОбщиеЗначениеПараметраСтрока(СоответствиеПараметров, "name")
    Параметры.ТипДистрибутива = ОбщиеЗначениеПараметраСтрока(СоответствиеПараметров, "distr-type").ВНижнийРегистр()
    
    Параметры.ИспользоватьАнглийскуюВерсию = ОбщиеЗначениеПараметраБулево(СоответствиеПараметров, "use-eu-site")
    Параметры.СохранятьКакЕсть = ОбщиеЗначениеПараметраБулево(СоответствиеПараметров, "save-accurately")
    
    Параметры.ЛимитВремени = ОбщиеЗначениеПараметраЧисло(СоответствиеПараметров, "time-limit")
    Параметры.Задержка = ОбщиеЗначениеПараметраЧисло(СоответствиеПараметров, "max-delay")
    
    если Параметры.ИспользоватьАнглийскуюВерсию
        Параметры.БазовыйАдрес += "eu"
        Параметры.АдресАвторизации += "eu"
    иначе
        Параметры.БазовыйАдрес += "ru"
        Параметры.АдресАвторизации += "ru"
    ;
    
    возврат Параметры

;

метод ПодменитьКаталогШаблонов(): Файл

    пер КаталогШаблонов: Файл = новый Файл("---")
    
    если ОбщиеТипОС() == ПеречислениеОперационнаяСистема.WINDOWS
    
        пер ПутьAppData: Строка = ОбщиеУбратьПоследнийРазделитель(СредаИсполнения.ПолучитьПеременную("APPDATA"))
    
        КаталогШаблонов = новый Файл(ПутьAppData + "\\1C\\1cv8")
        
        пер ФайлСтартер: Файл = новый Файл(ПутьAppData + "\\1C\\1CEStart\\1CEStart.cfg")
        если ФайлСтартер.Существует()
            для СтрокаДанных из ОбщиеТекстВМассив(ФайлСтартер.ОткрытьПотокЧтения().ПрочитатьКакСтроку("UTF-16"))
                пер Данные = СтрокаДанных.Разделить("=")
                если Данные.Размер() == 2 и Данные[0] == "ConfigurationTemplatesLocation"
                    КаталогШаблонов = новый Файл(Данные[1])
                    прервать
                ;
            ;
        ;
        
        если КаталогШаблонов.Существует()
            Файлы.Переименовать(КаталогШаблонов, КаталогШаблонов.Имя + "_bak")
            Файлы.СоздатьКаталог(КаталогШаблонов)
        ;
    
    иначе

        КаталогШаблонов = новый Файл(ОбщиеДобавитьРазделитель(Файлы.ПолучитьДомашнийКаталог().Путь) + ".1cv8/1C/1cv8/tmplts")
        если КаталогШаблонов.Существует()
            Файлы.Переименовать(КаталогШаблонов, КаталогШаблонов.Имя + "_bak")
            Файлы.СоздатьКаталог(КаталогШаблонов)
        ;
        
    ;
    
    возврат КаталогШаблонов 

;

метод ИзвлечьФайлыКонфигурации(ФайлSetup: Файл)

    если ОбщиеТипОС() == ПеречислениеОперационнаяСистема.LINUX

        пер Процесс: ПроцессОс = новый ПроцессОс("xvfb-run", ["-h"])

        попытка
            ОбщиеЗапуститьПроцессОС(Процесс, 
                метод(КодОшибки: Число, ТекстОшибки: Строка) -> 
                    если КодОшибки != 0 или не ТекстОшибки.Пусто()
                        выбросить новый ИсключениеВремениВыполнения("Xvbf not found. Install Xvbf!")
                    ;
                ;
            )
        поймать Исключение: Исключение
            выбросить новый ИсключениеВремениВыполнения("Xvbf not found. Install Xvbf!" + "\n" + Исключение.ВСтроку())
        ;

        Процесс = новый ПроцессОс(ФайлSetup.Путь, ["--noexec", "--keep", "--target", ФайлSetup.Каталог.Путь])
        ОбщиеЗапуститьПроцессОС(Процесс)

        пер ФайлSetupLinux = новый Файл(ФайлSetup.Путь + "." + (ОбщиеАрхитектураОС() == 64 ? "x86_64" : "i386"))

        Процесс = новый ПроцессОс("xvfb-run", ["-a", ФайлSetupLinux.Путь, "/s"])
        ОбщиеЗапуститьПроцессОС(Процесс)

    иначе
        пер Процесс: ПроцессОс = новый ПроцессОс(ФайлSetup.Путь, ["/s"])
        ОбщиеЗапуститьПроцессОС(Процесс)
    ;

;

метод ПолучитьПараметрыКонфигурации(КаталогШаблонов: Файл): ЧитаемыйМассив<Строка>

    пер МассивПараметров: ЧитаемыйМассив<Строка> = []
    
    пер МассивКаталогов = новый Массив(Файлы.Найти(КаталогШаблонов, 
            новый НастройкиПоиска()
            .ИсключитьФайлы(Истина)
            .МаксимальнаяГлубина(3)))
            
    МассивКаталогов.Сортировать((о1:Файл,о2:Файл) -> (о1.Путь>о2.Путь ? 1 : -1))
    
    если МассивКаталогов.Размер() > 0
        пер МассивДанных = МассивКаталогов[МассивКаталогов.Размер() - 1].Путь.Разделить(Файлы.СимволРазделителя)
        МассивДанных.Развернуть()
        попытка
            МассивПараметров = [МассивДанных[1], МассивДанных[0].Заменить("_", ".")]
        поймать Исключение: Исключение
            МассивПараметров = []
        ;
    ;
    
    возврат МассивПараметров

;

метод ВернутьКаталогШаблонов(КаталогШаблонов: Файл)

    пер СтароеИмя = КаталогШаблонов.Имя
    Файлы.Удалить(КаталогШаблонов)
    
    КаталогШаблонов = новый Файл(КаталогШаблонов.Путь + "_bak")
    если КаталогШаблонов.Существует()
        Файлы.Переименовать(КаталогШаблонов, СтароеИмя)
    ;

;


///////////////////////////////////////////////////////////////////
// ТОЧКА ВХОДА
///////////////////////////////////////////////////////////////////


метод Скрипт(СоответствиеПараметров: Соответствие<Строка, Строка>): Число

    // Тестовый режим.
    если ОбщиеЗначениеПараметраБулево(СоответствиеПараметров, "test-mode")
        ЛогИнформация("Test mode completed successfully")
        возврат 0
    ;

    ЛогСтарт()

    пер Параметры = ПолучитьПараметры(СоответствиеПараметров)
    
    ОбщиеПроверитьОбязательныеПараметры(Параметры, [
              новый СтруктураПроверкиПараметра("username", Параметры.ИмяПользователя, () -> (не Параметры.ИмяПользователя.Пусто())),  
              новый СтруктураПроверкиПараметра("password", Параметры.Пароль, () -> (не Параметры.Пароль.Пусто())),
              новый СтруктураПроверкиПараметра("name", Параметры.ИмяКонфигурации, () -> (не Параметры.ИмяКонфигурации.Пусто())),  
              новый СтруктураПроверкиПараметра("download-folder", Параметры.КаталогПриемник, () -> (не Параметры.КаталогПриемник.Пусто())),
              новый СтруктураПроверкиПараметра("version", Параметры.Версия, () -> (не Параметры.Версия.Пусто())),
              новый СтруктураПроверкиПараметра("distr-type", Параметры.ТипДистрибутива, () -> (["full", "update"].Содержит(Параметры.ТипДистрибутива)))
        ]
    )
    
    // Случайная задержка перед выполнением операции
    если Параметры.Задержка > 0
        ОбщиеПауза(Параметры.Задержка, Истина)
    ;

    Параметры.ВремяСтарта = ДатаВремя.Сейчас()
    
    пер ReleasesКлиентHttp: КлиентHttp = ReleasesПодключиться(Параметры)
    
    
    пер СсылкаИВерсия: Соответствие<Строка, Строка> = ReleasesНайтиСсылкуНаКонфигурацию(ReleasesКлиентHttp, 
        Параметры.БазовыйАдрес,
        Параметры.Версия,
        Параметры.ИмяКонфигурации,
        Параметры.ТипДистрибутива)
        
    ОбщиеВремяИстекло(Параметры.ВремяСтарта, Параметры.ЛимитВремени)

    если СсылкаИВерсия["Ссылка"].Пусто()
        пер Ошибка: Строка = "Cannot find specified product. " + Параметры.ИмяКонфигурации + ", " + Параметры.Версия
        ЛогОшибка(Ошибка)
        выбросить новый ИсключениеОшибкаВыполненияОперацииReleases(Ошибка, СсылкаИВерсия["Ссылка"])        
    ;
    
    пер ФайлАрхиваВременный: Файл = ReleasesСкачатьДистрибутив(ReleasesКлиентHttp, СсылкаИВерсия["Ссылка"])
    
    пер ВременныйКаталог: Файл = Файлы.СоздатьВременныйКаталог("ex_", Ложь)

    пер ВремяНачалаОперации: ДатаВремя = ДатаВремя.Сейчас()
    ЛогИнформация("Extract files - started")    
    
    пер ФайлZip = новый ФайлZip(ФайлАрхиваВременный.Путь)
    ФайлZip.ИзвлечьВсе(ВременныйКаталог)
    
    ЛогИнформация("Extract files - completed", ВремяНачалаОперации)

    если ФайлАрхиваВременный.Существует()
        Файлы.Удалить(ФайлАрхиваВременный)
    ;
    
    пер РасширениеSetup: Строка = ОбщиеТипОС() == ПеречислениеОперационнаяСистема.LINUX ? "" : ".exe"
    
    пер ФайлSetup = новый Файл(ОбщиеДобавитьРазделитель(ВременныйКаталог.Путь) + "setup" + РасширениеSetup)
    если не ФайлSetup.Существует()

        ФайлSetup = новый Файл(Строки.Соединить(
            [ОбщиеУбратьПоследнийРазделитель(ОбщиеКаталогСкрипта()), "..", "external_utils", "efd_utils", "setup" + РасширениеSetup], 
            Файлы.СимволРазделителя))

        Файлы.Скопировать(ФайлSetup, ОбщиеДобавитьРазделитель(ВременныйКаталог.Путь) + ФайлSetup.Имя)

        ФайлSetup = новый Файл(ОбщиеДобавитьРазделитель(ВременныйКаталог.Путь) + ФайлSetup.Имя)

    ;
    
    если не ФайлSetup.Существует()
        выбросить новый ИсключениеФайлНеНайден("File not found: " + ФайлSetup.Путь, ФайлSetup.Путь)
    ;

    если ОбщиеТипОС() == ПеречислениеОперационнаяСистема.LINUX
        пер Процесс: ПроцессОс = новый ПроцессОс("chmod", ["+x", "-R", ВременныйКаталог])
        ОбщиеЗапуститьПроцессОС(Процесс)
        Процесс = новый ПроцессОс("chmod", ["+x", ФайлSetup.Путь])
        ОбщиеЗапуститьПроцессОС(Процесс)
    ;

    пер КаталогПриемникПуть: Строка = ОбщиеУбратьПоследнийРазделитель(Параметры.КаталогПриемник)
    пер КаталогПриемник: Файл = новый Файл(КаталогПриемникПуть)
    
    если КаталогПриемник.Существует() и не КаталогПриемник.ЯвляетсяКаталогом()
        выбросить новый ИсключениеКаталогОказалсяФайлом("Destination path exists and not a directory", КаталогПриемникПуть)
    иначе если не КаталогПриемник.Существует()
        Файлы.СоздатьКаталог(КаталогПриемник.Путь)
    ;

    пер КаталогШаблонов: Файл = ПодменитьКаталогШаблонов()

    ЛогИнформация("Run setup", ВремяНачалаОперации)
    
    ИзвлечьФайлыКонфигурации(ФайлSetup)
    пер ПараметрыКонфигурации = ПолучитьПараметрыКонфигурации(КаталогШаблонов)
    
    ЛогИнформация("Copy files", ВремяНачалаОперации)
    
    если Параметры.СохранятьКакЕсть
    
        ОбщиеОчиститьКаталог(КаталогПриемник)
        
        пер МассивНайденныхФайлов = Файлы.Найти(КаталогШаблонов, новый НастройкиПоиска().МаксимальнаяГлубина(1))
        для Файл из МассивНайденныхФайлов
            Файлы.Переместить(Файл, ОбщиеДобавитьРазделитель(КаталогПриемник.Путь) + Файл.Имя)
        ;
    
    иначе
    
        пер КаталогПоПараметрам = новый Файл(Строки.Соединить(
            [
                КаталогПриемник.Путь, 
                "1c-confs",
                ПараметрыКонфигурации[0], 
                ПараметрыКонфигурации[1], 
                Параметры.ТипДистрибутива
            ], Файлы.СимволРазделителя))
            
        если КаталогПоПараметрам.Существует()
            ОбщиеОчиститьКаталог(КаталогПоПараметрам)
        иначе
            Файлы.СоздатьКаталог(КаталогПоПараметрам)
        ;
        
        пер Файл1cv8 = ОбщиеНайтиФайл(КаталогШаблонов, "1cv8" + (Параметры.ТипДистрибутива == "update" ? ".cfu" : ".cf")) 
            
        если Файл1cv8 != Неопределено
            пер МассивНайденныхФайлов = Файлы.Найти(Файл1cv8.Каталог)
            для Файл из МассивНайденныхФайлов
                Файлы.Переместить(Файл, ОбщиеДобавитьРазделитель(КаталогПоПараметрам.Путь) + Файл.Имя)
            ;
        ;
    
    ;

    ВернутьКаталогШаблонов(КаталогШаблонов) 

    ЛогИнформация("Finished", Параметры.ВремяСтарта)
    
    возврат 0
  
;
