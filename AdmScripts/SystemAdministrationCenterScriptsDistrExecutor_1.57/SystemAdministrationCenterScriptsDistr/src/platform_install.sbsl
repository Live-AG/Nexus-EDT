// #импорт include/common.sbsl

///////////////////////////////////////////////////////////////////
// ИСКЛЮЧЕНИЯ И СТРУКТУРЫ
///////////////////////////////////////////////////////////////////

исключение ИсключениеВремениВыполнения
;

исключение ИсключениеТаймаут
    пер Таймаут: Число
;

исключение ИсключениеФайлНеНайден
    пер КаталогПуть: Строка
;

исключение ИсключениеКаталогОказалсяФайлом
    пер КаталогПуть: Строка
;

исключение ИсключениеОтсутствуютОбязательныеПараметры
;

структура СтруктураПроверкиПараметра
    пер ИмяПараметра: Строка = "" 
    обз пер Значение: Строка|Число|ДатаВремя
    обз пер ФункцияПроверки: ()->Булево
;

перечисление ПеречислениеОперационнаяСистема
    WINDOWS
    LINUX
    LINUX_DEB
    LINUX_RPM
;


///////////////////////////////////////////////////////////////////
// ОБЩИЕ
///////////////////////////////////////////////////////////////////


метод ОбщиеВремяИстекло(ВремяСтарта: ДатаВремя, ЛимитВремени: Число)

    если ЛимитВремени == 0 или ВремяСтарта <= ДатаВремя{2000-01-01}
        возврат
    ;

    если (ДатаВремя.Сейчас() - ВремяСтарта).Секунды > ЛимитВремени
        пер Ошибка = "Time limit expired: $ЛимитВремени sec." 
        ЛогОшибка(Ошибка)
        выбросить новый ИсключениеТаймаут(Ошибка, ЛимитВремени)
    ;

;

метод ОбщиеПодходитПодШаблон(ПроверяемаяСтрока: Строка, Шаблон: Строка, ИнвертироватьШаблон: Булево): Булево

    пер Подходит = Ложь

    пер регВыражение = новый Образец(Шаблон)

    если ИнвертироватьШаблон
        Подходит = (регВыражение.НайтиСовпадения(ПроверяемаяСтрока).Размер() == 0)
    иначе
        Подходит = (регВыражение.НайтиСовпадения(ПроверяемаяСтрока).Размер() > 0)
    ;
    
    возврат Подходит

;

метод ОбщиеЭтоАрхив(Путь: Строка): Булево

    пер ЭтоАрхив: Булево = Путь.ВНижнийРегистр().ЗаканчиваетсяНа(".zip")
                            или Путь.ВНижнийРегистр().ЗаканчиваетсяНа(".rar")
                            или Путь.ВНижнийРегистр().ЗаканчиваетсяНа(".gz")
    
    возврат ЭтоАрхив

;

метод ОбщиеДобавитьРазделитель(Путь: Строка): Строка
  возврат Путь.ЗаканчиваетсяНа(Файлы.СимволРазделителя) ? Путь : Путь + Файлы.СимволРазделителя
;

метод ОбщиеУбратьПоследнийРазделитель(Путь: Строка): Строка
  возврат Путь.ЗаканчиваетсяНа(Файлы.СимволРазделителя) ? Путь.ПодстрокаСНачала(Путь.Длина() - 1) : Путь
;

метод ОбщиеПроверитьОбязательныеПараметры(Параметры: СтруктураПараметров, ПроверкиПараметров: ЧитаемыйМассив<СтруктураПроверкиПараметра>)

    пер ЕстьОшибки: Булево = Ложь
    
    для ПроверкаПараметра из ПроверкиПараметров
    
        если не ПроверкаПараметра.ФункцияПроверки()

            пер ИмяПараметра = ПроверкаПараметра.ИмяПараметра
            пер Значение = ПроверкаПараметра.Значение
            
            ЛогОшибка("Parameter error: $ИмяПараметра, value: $Значение")
            ЕстьОшибки = Истина
            
        ;
    
    ;
    
    если ЕстьОшибки
        выбросить новый ИсключениеОтсутствуютОбязательныеПараметры("FAIL: parameters check")
    ;
    
;

метод ОбщиеЗначениеПараметраБулево(СоответствиеПараметров: Соответствие<Строка, Строка>, Ключ: Строка, ЗначениеПоумолчанию: Булево = Ложь): Булево

    пер Результат = ЗначениеПоумолчанию

    попытка
    
        пер Значение = СоответствиеПараметров[Ключ] 
        
        выбор Значение.ВНижнийРегистр()
        когда "истина"
            Результат = Истина
        когда "true"
            Результат = Истина
        когда "1"
            Результат = Истина
        когда "on"
            Результат = Истина
        когда "да"
            Результат = Истина
        когда "yes"
            Результат = Истина
        когда "вкл"
            Результат = Истина
        когда "вкл."
            Результат = Истина
        когда "включено"
            Результат = Истина
        иначе
            Результат = Ложь
        ;
        
    поймать Исключение: Исключение
        Результат = ЗначениеПоумолчанию
    ;
    
    возврат Результат

;

метод ОбщиеЗначениеПараметраЧисло(СоответствиеПараметров: Соответствие<Строка, Строка>, Ключ: Строка, ЗначениеПоУмолчанию: Число = 0): Число

    пер Результат = ЗначениеПоУмолчанию

    попытка
        пер Значение = СоответствиеПараметров[Ключ] 
        Результат = новый Число(Значение)
    поймать Исключение: Исключение
        Результат = ЗначениеПоУмолчанию
    ;
    
    возврат Результат

;

метод ОбщиеЗначениеПараметраСтрока(СоответствиеПараметров: Соответствие<Строка, Строка>, Ключ: Строка, ЗначениеПоУмолчанию: Строка = ""): Строка

    пер Результат = ЗначениеПоУмолчанию

    попытка
        пер Значение = СоответствиеПараметров[Ключ] 
        Результат = Значение.ВСтроку()

        если Результат.Сравнить("null", Истина) == 0
            Результат = ЗначениеПоУмолчанию
        ;
        
    поймать Исключение: Исключение
        Результат = ЗначениеПоУмолчанию
    ;
    
    возврат Результат

;

метод ОбщиеПауза(ПаузаСекунд: Число, Случайная: Булево = Ложь)

    пер ПаузаРеальная = ПаузаСекунд
    
    если Случайная
    
        пер ГСЧ = новый СлучайныйГенератор(ДатаВремя.Сейчас().Миллисекунда)
        ПаузаРеальная = ГСЧ.СлучайноеЦелое(0, ПаузаСекунд)

    ;
    
    ПаузаРеальная = ПаузаРеальная == 0 ? ПаузаСекунд : ПаузаРеальная

    если Случайная
        
        ЛогИнформация("Selected delay $ПаузаРеальная sec.")
        
    ;
    
    Пауза(новый Длительность(0, 0, ПаузаРеальная))
    
;

метод ОбщиеТипОС(УточнятьТипLinux: Булево = Ложь): ПеречислениеОперационнаяСистема

    пер ТипОС: ПеречислениеОперационнаяСистема = СредаИсполнения.ПолучитьПеременную("OS").Содержит("Windows", Истина) ? ПеречислениеОперационнаяСистема.WINDOWS : ПеречислениеОперационнаяСистема.LINUX
    
    если ТипОС == ПеречислениеОперационнаяСистема.LINUX и УточнятьТипLinux
        
        ТипОС = ПеречислениеОперационнаяСистема.LINUX_DEB
        
        пер Процесс: ПроцессОс = новый ПроцессОс("dpkg", ["--version"])
        
        попытка
            Процесс.Запустить()
            Процесс.ПолучитьПотокВывода().ПрочитатьКакСтроку()
        поймать Игнорировать: Исключение
            ТипОС = ПеречислениеОперационнаяСистема.LINUX_RPM
        ; 
        
    ;
    
    возврат ТипОС
    
;

метод ОбщиеАрхитектураОС(): Число
    если СредаИсполнения.ПолучитьСвойство("os.arch").Содержит("64")
        возврат 64
    иначе
        возврат 32
    ;
;

метод ОбщиеНайтиФайл(Путь: Строка|Файл, ИмяФайла: Строка): Файл?

    пер НайденныйФайл: Файл? = Неопределено
    
    пер НастройкиПоиска: НастройкиПоиска = новый НастройкиПоиска()
    НастройкиПоиска.ИмяСодержит(ИмяФайла)
    НастройкиПоиска.ИсключитьКаталоги(Истина)
    
    пер МассивФайлов: ЧитаемыйМассив<Файл> = Файлы.Найти(Путь, НастройкиПоиска)
    для Файл из МассивФайлов
        если Файл.Имя == ИмяФайла
            НайденныйФайл = Файл
            прервать
        ;
    ;

    возврат НайденныйФайл
;

метод ОбщиеФайлСкрипта(): Файл
    пер ФайлСкрипта: Файл = новый Файл(Скрипт.ПутьТекущегоСкрипта)
    возврат ФайлСкрипта
;

метод ОбщиеКаталогСкрипта(): Строка
    пер ФайлСкрипта: Файл? = ОбщиеФайлСкрипта()
    возврат (ФайлСкрипта != Неопределено ? ФайлСкрипта.Каталог.Путь : "")
;

метод ОбщиеЗапуститьПроцессОС(Процесс: ПроцессОс, ОбработкаОшибок: ((Число, Строка)->void)? = Неопределено, ЛимитВремени: Число = 0, Кодировка: Строка = "UTF-8", ОжидатьЗавершения: Булево = Истина): Строка

    пер Ошибка: Строка = ""
    пер ФайлПотокаВывода = Файлы.СоздатьВременныйФайл("ex_")
    пер ПотокВывода: Строка = ""
    
    Процесс.Запустить()
	если не ОжидатьЗавершения
		возврат ПотокВывода
	;
    
    пер ВсеОк: Булево = Истина
    
    если ЛимитВремени > 0  
        ВсеОк = Процесс.ОжидатьЗавершения(Длительность.ИзСекунд(ЛимитВремени))
    иначе если ЛимитВремени == -1
        ВсеОк = Истина
        возврат ""
    иначе
        ВсеОк = Процесс.ОжидатьЗавершения()
    ;
    
    если не ВсеОк
        Ошибка = "Timeout expired: " + ЛимитВремени
        ЛогОшибка(Ошибка)
        выбросить новый ИсключениеТаймаут(Ошибка, ЛимитВремени)
    ;        

    пер КодОшибки: Число? = Процесс.ПолучитьКодВозврата()
    если КодОшибки == Неопределено
        КодОшибки = 0
    ;

    ПотокВывода = Процесс.ПолучитьПотокВывода().ПрочитатьКакСтроку(Кодировка)
    Ошибка = Процесс.ПолучитьПотокОшибок().ПрочитатьКакСтроку()

    если КодОшибки != 0 или не Ошибка.Пусто()
        если ОбработкаОшибок == Неопределено
            пер ТекстОшибки: Строка = "Return code: $КодОшибки. $Ошибка" 
            ЛогОшибка(ПотокВывода + ТекстОшибки)
            выбросить новый ИсключениеВремениВыполнения(ТекстОшибки)
        иначе
            ОбработкаОшибок(КодОшибки, ПотокВывода + "\n" + Ошибка)
        ;
    ;
    
    возврат ПотокВывода
    
;

метод ОбщиеЗапуститьКаскадПроцессов(Параметры: ЧитаемыйМассив<ЧитаемыйМассив<Строка>>): Строка

    пер Вывод: Строка = ""
    пер Вход: Строка = ""

    для ОписаниеКоманды из Параметры
        
        пер Команда: Строка = ОписаниеКоманды[0]
        пер ПараметрыКоманды: ЧитаемыйМассив<Строка> = (Параметры.Размер() > 1 ? ОписаниеКоманды.ПодМассив(1) : [])
        
        пер Процесс: ПроцессОс = новый ПроцессОс(Команда , ПараметрыКоманды)
        Процесс.Запустить()
        Процесс.ПолучитьПотокВвода().Записать(Вход).Закрыть()
        Вывод = Процесс.ПолучитьПотокВывода().ПрочитатьКакСтроку()
        Вход = Вывод
    ;
        
    возврат Вывод
        
;


метод ОбщиеУбратьГраничныеСимволы(Текст: Строка, Символ: Строка): Строка

    если Текст.НачинаетсяС(Символ)
        Текст = Текст.Подстрока(1)
    ;
    
    если Текст.ЗаканчиваетсяНа(Символ)
        Текст = Текст.Подстрока(0, Текст.Длина() - Мин(1, Текст.Длина()))
    ;
    
    возврат Текст

;

метод ОбщиеКодироватьВURL(Данные: Строка): Строка

    пер ДанныеКодированные: Массив<Строка>

    пер КодируемыеСимволы: Строка = ":/?#[]@!$&'()*+,;=ёйцукенгшщзхъфывапролджэячсмитьбюЁЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮ"
    пер ДекодируемыеСимволы: Строка = "#3A#2F#3F#23#5B#5D#40#21#24#26#27#28#29#2A#2B#2C#3B#3D#D1#91#D0#B9#D1#86#D1#83#D0#BA#D0#B5#D0#BD#D0#B3#D1#88#D1#89#D0#B7#D1#85#D1#8A#D1#84#D1#8B#D0#B2#D0#B0#D0#BF#D1#80#D0#BE#D0#BB#D0#B4#D0#B6#D1#8D#D1#8F#D1#87#D1#81#D0#BC#D0#B8#D1#82#D1#8C#D0#B1#D1#8E#D0#81#D0#99#D0#A6#D0#A3#D0#9A#D0#95#D0#9D#D0#93#D0#A8#D0#A9#D0#97#D0#A5#D0#AA#D0#A4#D0#AB#D0#92#D0#90#D0#9F#D0#A0#D0#9E#D0#9B#D0#94#D0#96#D0#AD#D0#AF#D0#A7#D0#A1#D0#9C#D0#98#D0#A2#D0#AC#D0#91#D0#AE"
    пер ДекодируемыеСимволыМассив: Массив<Строка> = ДекодируемыеСимволы.Разделить("#")
    
    для Символ из Данные
        пер Позиция = КодируемыеСимволы.Найти(Символ)
        если Позиция >= 0
            ДанныеКодированные.Добавить("%" + ДекодируемыеСимволыМассив[Позиция])
        иначе
            ДанныеКодированные.Добавить(Символ)
        ;
    ;
    
    
    возврат Строки.Соединить(ДанныеКодированные, "")
    
;

метод ОбщиеАрхитектураEXE(ФайлEXE: Файл): Число

    исп ПотокЧтения: ПотокЧтения = ФайлEXE.ОткрытьПотокЧтения()
    пер ЧтениеДанных: ЧтениеДанных = новый ЧтениеДанных(ПотокЧтения)
    пер ПозицияPE: Число = ЧтениеДанных.ПропуститьДо("PE")
    если ПозицияPE < 200 или ПозицияPE > 400
        возврат 0
    ;
    
    ЧтениеДанных.Пропустить(2)
    пер Разрядность: Число? = ЧтениеДанных.ПрочитатьЦелое16()
    если Разрядность == 0x4c01
        возврат 32
    иначе если Разрядность == 0x6486
        возврат 64
    ;
    
    возврат 0

;

метод ОбщиеВерсияEXE(ФайлEXE: Файл): Строка

    пер Процесс: ПроцессОс = новый ПроцессОс("wmic" , ["datafile", "where", "Name=\"" + ФайлEXE.Путь.Заменить("\\", "\\\\")  + "\"", "get", "Version", "/value"])
    пер Данные: Строка = ОбщиеЗапуститьПроцессОС(Процесс, Неопределено,  0, "cp866")
    
    пер Версия: Строка = Данные
        .Заменить("\r", "")
        .Заменить("\n", "")
        .Сократить()
        .Разделить("=")[1]
    
    возврат Версия

;


метод ОбщиеТекстВМассив(Текст: Строка, ВключаяПустые: Булево = Ложь): Массив<Строка>
    возврат Текст.Заменить("\r\n", "\n").Заменить("\r", "\n").Разделить("\n", ВключаяПустые)
;

метод ОбщиеОчиститьКаталог(Каталог: Файл|Строка, СоздаватьЕслиОтсутствует: Булево = Истина)
    
    пер КаталогФайл: Файл = (Каталог это Строка) ? новый Файл(Каталог как Строка) : Каталог как Файл
    
    если КаталогФайл.Существует() и не КаталогФайл.ЯвляетсяКаталогом()
        выбросить новый ИсключениеКаталогОказалсяФайлом("Destination path exists and not a directory", КаталогФайл.Путь)
    ;
    
    если КаталогФайл.Существует()
    
        пер МассивФайлов = новый Массив(Файлы.Найти(КаталогФайл, новый НастройкиПоиска().МаксимальнаяГлубина(1)))
        для Файл из МассивФайлов
            Файлы.Удалить(Файл, Истина)
        ;
    
    иначе если СоздаватьЕслиОтсутствует
        Файлы.СоздатьКаталог(Каталог)
    ;
    
;

метод ОбщиеРаспаковатьАрхив(ФайлАрхива: Файл, Каталог: Файл|Строка, ЛимитВремени: Число = 0)

    пер КаталогПриемник: Файл = (Каталог это Строка) ? новый Файл(Каталог как Строка) : Каталог как Файл

    пер ФайлRAR: Файл = новый Файл(ОбщиеДобавитьРазделитель(ОбщиеКаталогСкрипта())
        + Файлы.СимволРазделителя + ".." + Файлы.СимволРазделителя   
        + "external_utils" + Файлы.СимволРазделителя 
        + "unrar" + Файлы.СимволРазделителя
        + "unrar" + (ОбщиеТипОС() == ПеречислениеОперационнаяСистема.WINDOWS ? ".exe" : ""))
    
    если ФайлАрхива.Расширение.ВНижнийРегистр() == "rar" и не ФайлRAR.Существует()
        пер Ошибка: Строка = "Cannot find unrar."
        ЛогОшибка(Ошибка)
        выбросить новый ИсключениеФайлНеНайден(Ошибка, ФайлRAR.Путь)        
    ;
    
    если ФайлАрхива.Расширение == "zip"
        
        пер ФайлZip = новый ФайлZip(ФайлАрхива.Путь)
        ФайлZip.ИзвлечьВсе(КаталогПриемник)
        
    иначе если ФайлАрхива.Расширение == "rar"

        пер ПараметрыЗапуска: ЧитаемыйМассив<Строка> = новый ЧитаемыйМассив<Строка>(["x", "\"" + ФайлАрхива.Путь + "\"", "\"" + КаталогПриемник + "\""])
        пер Процесс: ПроцессОс = новый ПроцессОс(ФайлRAR.Путь, ПараметрыЗапуска)
        
        ОбщиеЗапуститьПроцессОС(Процесс, 
            метод(КодОшибки: Число, ТекстОшибки: Строка) -> 
                если КодОшибки != 0 или не ТекстОшибки.Пусто()
                    пер Ошибка: Строка = "UnRAR error. Return code: $КодОшибки. $ТекстОшибки" + "\n" + ФайлRAR.Путь + " " + Строки.Соединить(ПараметрыЗапуска, " ")  
                    ЛогОшибка(Ошибка)
                    выбросить новый ИсключениеВремениВыполнения(Ошибка)
                ;
            ;
        , ЛимитВремени, "cp866")
    
    иначе если ФайлАрхива.Расширение == "gz"
        
        пер Процесс: ПроцессОс = новый ПроцессОс("tar" , ["-xzf", ФайлАрхива.Путь, "-C", КаталогПриемник])
        ОбщиеЗапуститьПроцессОС(Процесс, Неопределено,  ЛимитВремени)
        
    ;
    
;

метод ОбщееПолучитьИнтерактивнуюСессиюПользователя(Пользователь: Строка): Строка
    пер МассивПараметров: Массив<Строка> = []
    пер ИдентификаторСессии = "-1"
    
    пер ЧастиИмениПользователя = Пользователь.Разделить("\\")
    пер ИмяПользователя = ЧастиИмениПользователя[0]

    если ЧастиИмениПользователя.Размер() > 1
        ИмяПользователя = ЧастиИмениПользователя[1]
    ;

    МассивПараметров.Добавить("query")
    МассивПараметров.Добавить("session")
    МассивПараметров.Добавить(ИмяПользователя)
    МассивПараметров.Добавить("|")
    МассивПараметров.Добавить("select")
    МассивПараметров.Добавить("-skip")
    МассивПараметров.Добавить("1")
    МассивПараметров.Добавить("-first")
    МассивПараметров.Добавить("1")

    пер Процесс: ПроцессОс = новый ПроцессОс("powershell", МассивПараметров, Истина)

    попытка 
        ОбщиеЗапуститьПроцессОС(Процесс, Неопределено, 0, "cp866", Ложь)
        Процесс.ОжидатьЗавершения()

        пер ПотокВывода = Процесс.ПолучитьПотокВывода()

        пер ТекстВывода = ПотокВывода.ПрочитатьКакСтроку("cp866")
        пер СтрокиВывода = ОбщиеТекстВМассив(ТекстВывода)

        для ТекущаяСтрока из СтрокиВывода
            пер ДанныеСтрокиВывода = ТекущаяСтрока.Разделить(" ")

            если ДанныеСтрокиВывода.Размер() > 2
                ИдентификаторСессии = ДанныеСтрокиВывода[2]
            ;
        ;

        ЛогИнформация(ТекстВывода)

    поймать Исключение: Исключение
        выбросить Исключение
    ;

    возврат ИдентификаторСессии
;

метод ОбщееПолучитьАдресSOAPСервиса(АдресВебСервера: Строка, ИмяПубликации: Строка, Сервис: Строка): Строка
    возврат "%{АдресВебСервера}/%{ИмяПубликации}/ws/%{Сервис}.1cws"
;

метод ОбщееВыполнитьSOAPЗапрос(АдресSOAPСервиса: Строка, Запрос: Строка, Пользователь: Строка = "", Пароль: Строка = ""): Строка
    
    пер Аутентификация: АутентификацияHttp = новый АутентификацияHttp(Пользователь, Пароль)
    пер UserAgent = "1C+Enterprise/8.3"

    исп Ответ: ОтветHttp = КлиентHttp.САутентификацией(Аутентификация)
        .СБазовымUrl(АдресSOAPСервиса)
        .ЗапросPost("")
        .УстановитьТело(Запрос)
        .ДобавитьЗаголовок("User-Agent", UserAgent)
        .ДобавитьЗаголовок("Accept", "*/*")
        .УстановитьТипСодержимого("application/soap+xml")
        .УстановитьТаймаутЗапроса(60с)
        .УстановитьТаймаутСоединения(60с)
        .Выполнить()

    если Ответ.КодСостояния == 200
        возврат Ответ.Тело.ПрочитатьКакСтроку()
    иначе
        выбросить новый ИсключениеВремениВыполнения("Response was returned with status code: %{Ответ.КодСостояния}; Message: %{Ответ.Тело.ПрочитатьКакСтроку()}")
    ;

    возврат ""
;

метод ОбщееНайтиИсполняемыйФайлПлатформы(ПутьКПлатформе: Строка, ИмяИсполняемогоФайла: Строка): Строка
    пер ЭтоWindows = (ОбщиеТипОС() == ПеречислениеОперационнаяСистема.WINDOWS)
    пер НастройкиПоискаДиректорииBin = новый НастройкиПоиска()
        .ИмяСодержит("bin")
        .ИсключитьФайлы(Истина)
    пер ДиректорияBin = ""

    если не Файлы.Найти(ОбщиеУбратьПоследнийРазделитель(ПутьКПлатформе), НастройкиПоискаДиректорииBin).Пусто()
         ДиректорияBin = ОбщиеДобавитьРазделитель("bin")

    ;

    пер ПутьКДиректорииBin = "${ОбщиеДобавитьРазделитель(ПутьКПлатформе)}%{ДиректорияBin}"
    ПутьКДиректорииBin = ОбщиеУбратьПоследнийРазделитель(ПутьКДиректорииBin)

    пер Расширение = (ЭтоWindows ? ".exe" : "")
    пер ПутьКФайлу = "${ОбщиеДобавитьРазделитель(ПутьКДиректорииBin)}%{ИмяИсполняемогоФайла}%{Расширение}"

    возврат новый Файл(ПутьКФайлу).Путь
;
// #конец_импорта


// #импорт include/logger.sbsl 


///////////////////////////////////////////////////////////////////
// ЛОГГЕР
///////////////////////////////////////////////////////////////////

метод ЛогСтарт()

    пер КаталогЛога = новый Файл(ОбщиеДобавитьРазделитель(ОбщиеКаталогСкрипта()) + "script_logs")
    если не КаталогЛога.Существует()
        Файлы.СоздатьКаталог(КаталогЛога)
    ;

    пер PID = "7777"

    пер ЛогДатаВремя = ДатаВремя.Сейчас().Представление("ггММдд_ЧЧммсс_")
    пер ИмяФайлаЛога = ОбщиеФайлСкрипта().ИмяБезРасширения + "_" + ЛогДатаВремя + PID + ".log"

    пер ФайлЛога = новый Файл(ОбщиеДобавитьРазделитель(КаталогЛога.Путь) + ИмяФайлаЛога)
    если не ФайлЛога.Существует()
        исп ПотокЗаписи = ФайлЛога.ОткрытьПотокЗаписи()
        ПотокЗаписи.СброситьБуферы()
        ПотокЗаписи.Закрыть()
    ;

    ЛогИнформация("Started")
    
;

метод НайтиТекущийФайлЛога(): Файл?

    пер МассивНайденныхФайлов = новый Массив(Файлы.Найти(ОбщиеДобавитьРазделитель(ОбщиеКаталогСкрипта()) + "script_logs",
        новый НастройкиПоиска()
            .ИмяСодержит(ОбщиеФайлСкрипта().ИмяБезРасширения)
            .ИсключитьКаталоги(Истина)
            .МаксимальнаяГлубина(1)
        ))

    если МассивНайденныхФайлов.Размер() > 0 
        МассивНайденныхФайлов.Сортировать((о1:Файл,о2:Файл) -> (о1.ИмяБезРасширения>о2.ИмяБезРасширения ? -1 : 1))
        возврат МассивНайденныхФайлов[0]
    иначе
        возврат Неопределено
    ;

;

метод ЛогВывод(ЛогУровень: Строка, ДатаВремяНачала: ДатаВремя? = Неопределено, ЛогТекст: Строка, Ошибка: Булево = Ложь)
    
    пер ЛогДлительность: Число = (ДатаВремяНачала != Неопределено ? (ДатаВремя.Сейчас() - ДатаВремяНачала).ВМиллисекундах() : 0)
    пер ЛогДатаВремя = ДатаВремя.Сейчас().Представление("гггг-ММ-дд ЧЧ:мм:сс.ССС")

    пер СтрокаЛог = "$ЛогДатаВремя-$ЛогДлительность [$ЛогУровень] $ЛогТекст"
    
    если Ошибка
        Консоль.ЗаписатьОшибку(СтрокаЛог)
    иначе
        Консоль.Записать(СтрокаЛог)
    ;

    пер ФайлЛога = НайтиТекущийФайлЛога()
    если ФайлЛога != Неопределено
        исп ПотокЗаписи = ФайлЛога.ОткрытьПотокЗаписи(Истина)
        ПотокЗаписи.Записать(СтрокаЛог + "\r\n")
    ;
    
;

метод ЛогИнформация(ЛогТекст: Строка, ДатаВремяНачала: ДатаВремя? = Неопределено)
    
    пер ЛогУровень = "INFO"
    ЛогВывод(ЛогУровень, ДатаВремяНачала, ЛогТекст)
    
;

метод ЛогОшибка(ЛогТекст: Строка, ДатаВремяНачала: ДатаВремя? = Неопределено)
    
    пер ЛогУровень = "ERROR"
    ЛогВывод(ЛогУровень, ДатаВремяНачала, ЛогТекст, Истина)
    
;

// #конец_импорта



///////////////////////////////////////////////////////////////////
// ПРИВАТНАЯ ЧАСТЬ
///////////////////////////////////////////////////////////////////


структура СтркутураОписаниеДистрибутива
    пер ЕдиныйПакетLinux: Булево = Ложь
    пер УстановкаКопированием: Булево = Ложь
    пер Версия: Строка = ""
    пер Модули: Множество<Строка> = {}
    пер Архитектура: Число = 0
    пер Путь: Строка = ""
;

структура СтруктураПараметров

    // общие
    пер Задержка: Число = 0
    пер ВремяСтарта: ДатаВремя = ДатаВремя{2000-01-01}
    пер ЛимитВремени: Число = 0

    // параметры скрипта
    пер Версия: Строка = ""
    пер КаталогДистрибутива: Строка = ""
    пер МодулиПлатформы: Строка = ""
    пер КаталогУстановки: Строка = ""
    пер Языки: Строка = "ru"
;

метод ПолучитьПараметры(СоответствиеПараметров: Соответствие<Строка, Строка>): СтруктураПараметров

    пер Параметры = новый СтруктураПараметров()
    
    Параметры.ВремяСтарта = ДатаВремя.Сейчас()

    Параметры.Версия = ОбщиеЗначениеПараметраСтрока(СоответствиеПараметров, "version")
    Параметры.КаталогДистрибутива = ОбщиеЗначениеПараметраСтрока(СоответствиеПараметров, "distr-folder")
    Параметры.МодулиПлатформы = ОбщиеЗначениеПараметраСтрока(СоответствиеПараметров, "platform-modules")
    Параметры.КаталогУстановки = ОбщиеЗначениеПараметраСтрока(СоответствиеПараметров, "setup-folder")
    
    Параметры.Языки = ОбщиеЗначениеПараметраСтрока(СоответствиеПараметров, "languages", Параметры.Языки)
    
    Параметры.ЛимитВремени = ОбщиеЗначениеПараметраЧисло(СоответствиеПараметров, "time-limit")
    Параметры.Задержка = ОбщиеЗначениеПараметраЧисло(СоответствиеПараметров, "max-delay")
    
    возврат Параметры

;

метод НайтиДистрибутив(Параметры: СтруктураПараметров): СтркутураОписаниеДистрибутива

    пер ТребуемыйДистрибутив: СтркутураОписаниеДистрибутива = новый СтркутураОписаниеДистрибутива()
    ТребуемыйДистрибутив.Версия = Параметры.Версия
    ТребуемыйДистрибутив.Архитектура = 32
    ТребуемыйДистрибутив.Модули = {}
    
    пер МассивМодулей: Массив<Строка> = Параметры.МодулиПлатформы.Разделить(",")
    для Модуль из МассивМодулей
        если Модуль.Содержит("64")
            ТребуемыйДистрибутив.Архитектура = 64
        ;
        
        если Модуль.Содержит("all")
            ТребуемыйДистрибутив.Модули = {"server", "client", "thin", "web"}
        иначе
            ТребуемыйДистрибутив.Модули.Добавить(Модуль.Заменить("64", "")) 
        ;
    ;

    пер ЕдиныйПакетLinux: Булево = (новый Число(Параметры.Версия.Разделить(".")[2]) > 19)
    пер ТипОС: ПеречислениеОперационнаяСистема = ОбщиеТипОС(Истина)
    
    если ТипОС == ПеречислениеОперационнаяСистема.WINDOWS
    
        // MSI
        пер НастройкиПоиска : НастройкиПоиска = новый НастройкиПоиска()
        НастройкиПоиска.ИмяСодержит(".msi")
        пер НайденныеФайлы: ЧитаемыйМассив<Файл> = Файлы.Найти(Параметры.КаталогДистрибутива, НастройкиПоиска)
        для Файл из НайденныеФайлы
            
            пер ФайлINI: Файл = новый Файл(ОбщиеДобавитьРазделитель(Файл.Каталог.Путь) + "setup.ini")
            пер ФайлEXE: Файл = новый Файл(ОбщиеДобавитьРазделитель(Файл.Каталог.Путь) + "setup.exe")
            
            если не Файл.ИмяБезРасширения.НачинаетсяС("1c", Истина) или не ФайлEXE.Существует() или не ФайлINI.Существует()
                продолжить
            ;
            
            пер ОписаниеДистрибутива: СтркутураОписаниеДистрибутива = новый СтркутураОписаниеДистрибутива()
            ОписаниеДистрибутива.Путь = ФайлEXE.Каталог.Путь
            ОписаниеДистрибутива.Архитектура = (Файл.ИмяБезРасширения.Содержит("64", Истина) ? 64 : 32)

            исп ПотокЧтенияINI: ПотокЧтения = ФайлINI.ОткрытьПотокЧтения()
            пер СтрокаINI: Строка = ПотокЧтенияINI.ПрочитатьКакСтроку(Кодировка="UTF-16").Заменить(" ", "").Заменить("\t", "")
            если СтрокаINI.Найти("ProductVersion=") < 0
                продолжить
            ;
            
            ОписаниеДистрибутива.Версия = СтрокаINI.Подстрока(СтрокаINI.Найти("ProductVersion=") + ("ProductVersion=").Длина()).Разделить("\r")[0].Разделить("\n")[0]
            
            если Файл.ИмяБезРасширения.Содержит("server", Истина)
                ОписаниеДистрибутива.Модули = {"server", "web"}
            иначе если Файл.ИмяБезРасширения.Содержит("thin", Истина)
                ОписаниеДистрибутива.Модули = {"thin"}
            иначе
                ОписаниеДистрибутива.Модули = {"server", "client", "thin", "web"}
            ;
            
            если ОписаниеДистрибутива.Архитектура == ТребуемыйДистрибутив.Архитектура
                и ОписаниеДистрибутива.Версия == ТребуемыйДистрибутив.Версия
                и ОписаниеДистрибутива.Модули.СодержитВсе(ТребуемыйДистрибутив.Модули)
                
                ТребуемыйДистрибутив.Путь = ОписаниеДистрибутива.Путь
                
                возврат ТребуемыйДистрибутив
                
            ;
            
        ;
        
        // EXE
        НайденныеФайлы = Файлы.Найти(Параметры.КаталогДистрибутива)
        пер МодулиВКаталогах: Соответствие<Строка, Множество<Строка>> = новый Соответствие<Строка, Множество<Строка>>()
        пер МодулиВФайлах: Соответствие<Строка, Строка> = {"ragent": "server", "1cv8": "client", "1cv8c": "thin", "wsisapi": "web"}
        для Файл из НайденныеФайлы
            если МодулиВФайлах.СодержитКлюч(Файл.ИмяБезРасширения)
                МодулиВКаталогах.ВставитьЕслиОтсутствует(Файл.Каталог.Путь, {}).Добавить(МодулиВФайлах[Файл.ИмяБезРасширения])
            ;
        ;
        
        для МодулиВКаталоге из МодулиВКаталогах
            для ИмяФайлаEXE из ["ragent.exe", "1cv8.exe", "1cv8c.exe", "wsisapi.dll", "1c32.exe"]
                пер ФайлEXE: Файл = новый Файл(ОбщиеДобавитьРазделитель(МодулиВКаталоге.Ключ) + ИмяФайлаEXE)
                если ФайлEXE.Существует()
                
                    пер ОписаниеДистрибутива: СтркутураОписаниеДистрибутива = новый СтркутураОписаниеДистрибутива()
                    ОписаниеДистрибутива.Путь = ФайлEXE.Каталог.Путь
                    ОписаниеДистрибутива.Архитектура = ОбщиеАрхитектураEXE(ФайлEXE)
                    ОписаниеДистрибутива.Версия = ОбщиеВерсияEXE(ФайлEXE)
                    ОписаниеДистрибутива.Модули = МодулиВКаталоге.Значение

                    если ОписаниеДистрибутива.Архитектура == ТребуемыйДистрибутив.Архитектура
                        и ОписаниеДистрибутива.Версия == ТребуемыйДистрибутив.Версия
                        и ОписаниеДистрибутива.Модули.СодержитВсе(ТребуемыйДистрибутив.Модули)

                        ТребуемыйДистрибутив.УстановкаКопированием = Истина
                        ТребуемыйДистрибутив.Путь = ОписаниеДистрибутива.Путь
                        
                        возврат ТребуемыйДистрибутив
                        
                    ;
                    
                    прервать
                    
                ;
            ;
            
        ;
        
    
    иначе если ЕдиныйПакетLinux
    
        пер НастройкиПоиска : НастройкиПоиска = новый НастройкиПоиска()
        НастройкиПоиска.ИмяСодержит(".run")
        НастройкиПоиска.ИсключитьКаталоги(Истина)
        для Файл из Файлы.Найти(Параметры.КаталогДистрибутива, НастройкиПоиска)
            
            если Файл.Расширение != "run"
                продолжить
            ;

            пер ЧастиИмениФайла: Массив<Строка> = Файл.ИмяБезРасширения.Разделить("-")
            если ЧастиИмениФайла.Размер() < 3 или ЧастиИмениФайла[2].Разделить(".").Размер() != 4
                продолжить
            ;
            
            пер ОписаниеДистрибутива: СтркутураОписаниеДистрибутива = новый СтркутураОписаниеДистрибутива()
            ОписаниеДистрибутива.Путь = Файл.Путь
            ОписаниеДистрибутива.Архитектура = (Файл.ИмяБезРасширения.Содержит("x86_64", Истина) ? 64 : 32)
            ОписаниеДистрибутива.Версия = ЧастиИмениФайла[2]
            
            если Файл.ИмяБезРасширения.Содержит("-full-", Истина) и ТребуемыйДистрибутив.Модули != {"thin"}
                ОписаниеДистрибутива.Модули = {"server", "client", "thin", "web"}
            иначе если Файл.ИмяБезРасширения.Содержит("-thin-", Истина)
                ОписаниеДистрибутива.Модули.Добавить("thin")
            ;
            
            если ОписаниеДистрибутива.Архитектура == ТребуемыйДистрибутив.Архитектура
                и ОписаниеДистрибутива.Версия == ТребуемыйДистрибутив.Версия
                и ОписаниеДистрибутива.Модули.СодержитВсе(ТребуемыйДистрибутив.Модули)
                
                ТребуемыйДистрибутив.Путь = ОписаниеДистрибутива.Путь
                ТребуемыйДистрибутив.ЕдиныйПакетLinux = Истина
                
                возврат ТребуемыйДистрибутив
                
            ;
            
        ;
    
    иначе
        
        // packages
        
        пер НастройкиПоиска : НастройкиПоиска = новый НастройкиПоиска()
        НастройкиПоиска.ИмяСодержит("1c-enterprise-8.3.")
        НастройкиПоиска.ИсключитьКаталоги(Истина)
        для Файл из Файлы.Найти(Параметры.КаталогДистрибутива, НастройкиПоиска)
            
            если (ТипОС == ПеречислениеОперационнаяСистема.LINUX_DEB и Файл.Расширение != "deb")
                или (ТипОС == ПеречислениеОперационнаяСистема.LINUX_RPM и Файл.Расширение != "rpm")
                продолжить
            ;
            
            пер ЧастиИмениФайла: Массив<Строка> = Файл.ИмяБезРасширения.Разделить("-")
            если ЧастиИмениФайла.Размер() < 3 или ЧастиИмениФайла[2].Разделить(".").Размер() != 4
                продолжить
            ;
            
            пер ОписаниеДистрибутива: СтркутураОписаниеДистрибутива = новый СтркутураОписаниеДистрибутива()
            ОписаниеДистрибутива.Путь = Файл.Каталог.Путь
            ОписаниеДистрибутива.Архитектура = (Файл.ИмяБезРасширения.Содержит("x86_64", Истина) или Файл.ИмяБезРасширения.Содержит("amd64", Истина) ? 64 : 32)
            ОписаниеДистрибутива.Версия = ЧастиИмениФайла[2]
            
            пер НастройкиПоискаМодулей : НастройкиПоиска = новый НастройкиПоиска()
            НастройкиПоиска.ИмяСодержит("." + Файл.Расширение)
            НастройкиПоиска.ИсключитьКаталоги(Истина)
            для Модуль из Файлы.Найти(Параметры.КаталогДистрибутива, НастройкиПоиска)
                если Модуль.ИмяБезРасширения.Содержит("-server_", Истина)
                    ОписаниеДистрибутива.Модули.Добавить("server")
                иначе если Модуль.ИмяБезРасширения.Содержит("-thin-client_", Истина)
                    ОписаниеДистрибутива.Модули.Добавить("thin")
                иначе если Модуль.ИмяБезРасширения.Содержит("-client_", Истина)
                    ОписаниеДистрибутива.Модули.Добавить("client")
                иначе если Модуль.ИмяБезРасширения.Содержит("-ws_", Истина)
                    ОписаниеДистрибутива.Модули.Добавить("web")
                ;
            ;
            
            если ОписаниеДистрибутива.Архитектура == ТребуемыйДистрибутив.Архитектура
                и ОписаниеДистрибутива.Версия == ТребуемыйДистрибутив.Версия
                и ОписаниеДистрибутива.Модули.СодержитВсе(ТребуемыйДистрибутив.Модули)
                
                ТребуемыйДистрибутив.Путь = ОписаниеДистрибутива.Путь
                
                возврат ТребуемыйДистрибутив
                
            ;
            
        ;

    ; 
    
    возврат ТребуемыйДистрибутив

;

метод УстановитьVCRedist(Дистрибутив: СтркутураОписаниеДистрибутива)

    пер ФайлVCRedist: Файл = новый Файл(ОбщиеДобавитьРазделитель(Дистрибутив.Путь) + "vc_redist" + (Дистрибутив.Архитектура == 32 ? ".x86" : ".x64") + ".exe")
    если не ФайлVCRedist.Существует()
        возврат
    ;

    ЛогИнформация("Install Microsoft Visual C++ Redistributable...")
    
    // убрать сведения из метаданных, что файл был загружен из интернет
    пер Процесс: ПроцессОс = новый ПроцессОс("cmd", ["/C", "echo.>\"" + ФайлVCRedist.Путь + ":Zone.Identifier\""])
    ОбщиеЗапуститьПроцессОС(Процесс)
    
    // установка
    Процесс = новый ПроцессОс(ФайлVCRedist.Путь, ["/i", "/S"])
    ОбщиеЗапуститьПроцессОС(Процесс, 
        метод(КодОшибки: Число, ТекстОшибки: Строка) ->
            если КодОшибки == 1638
                ЛогИнформация("Microsoft Visual C++ Redistributable already installed")
            иначе если КодОшибки != 0
                пер Ошибка: Строка = "Cannot install Microsoft Visual C++ Redistributable. Return code: $КодОшибки. $ТекстОшибки" 
                ЛогОшибка(Ошибка)
                выбросить новый ИсключениеВремениВыполнения(Ошибка)
            ;
        ;
    , 0, "cp866") 
    
;

метод УстановитьПлатформуWindows(Параметры: СтруктураПараметров, Дистрибутив: СтркутураОписаниеДистрибутива)

    ЛогИнформация("Install platform via setup.exe")
    
    пер ФайлSetup: Файл = новый Файл(ОбщиеДобавитьРазделитель(Дистрибутив.Путь) + "setup.exe")
    
    // убрать сведения из метаданных, что файл был загружен из интернет
    пер Процесс: ПроцессОс = новый ПроцессОс("cmd", ["/C", "echo.>\"" + ФайлSetup.Путь + ":Zone.Identifier\""])
    ОбщиеЗапуститьПроцессОС(Процесс, Неопределено, Параметры.ЛимитВремени)
    
    пер МассивПараметров: Массив<Строка> = ["/S"]

    пер ТребуемыеМодули: Соответствие<Строка, Строка> = {
        "DESIGNERALLCLIENTS=" : "0", 
        "THINCLIENT=" : "0",
        "WEBSERVEREXT=" : "0",
        "SERVER=" : "0",
        "CONFREPOSSERVER=" : "0", 
        "CONVERTER77=" : "0",
        "SERVERCLIENT=" : "0",
        "LANGUAGES=" : Параметры.Языки
    }
    
    пер МассивМодулей: Массив<Строка> = Параметры.МодулиПлатформы.Заменить(" ", "").Разделить(",")
    для Модуль из МассивМодулей
    
        выбор(Модуль)
        
            когда "all", "all64"
                ТребуемыеМодули["SERVER="] = "1"
                ТребуемыеМодули["DESIGNERALLCLIENTS="] = "1"
                ТребуемыеМодули["THINCLIENT="] = "1"
                ТребуемыеМодули["WEBSERVEREXT="] = "1"
                ТребуемыеМодули["SERVERCLIENT="] = "1"
                прервать
        
            когда "server", "server64"
                ТребуемыеМодули["SERVER="] = "1"
                ТребуемыеМодули["SERVERCLIENT="] = "1"
                
            когда "client", "client64"
                ТребуемыеМодули["DESIGNERALLCLIENTS="] = "1"
                ТребуемыеМодули["SERVERCLIENT="] = "1"
                
            когда "thin", "thin64"
                ТребуемыеМодули["THINCLIENT="] = "1"
                
            когда "web", "web64"
                ТребуемыеМодули["WEBSERVEREXT="] = "1"
                
        ;
        
    ;
    
    для КлючЗначение из ТребуемыеМодули
        МассивПараметров.Добавить("${КлючЗначение.Ключ}${КлючЗначение.Значение}")
    ;

    МассивПараметров.Добавить("INSTALLDIR=")
    МассивПараметров.Добавить(Параметры.КаталогУстановки)

    Процесс = новый ПроцессОс(ФайлSetup.Путь, новый ЧитаемыйМассив<Строка>(МассивПараметров))
    ОбщиеЗапуститьПроцессОС(Процесс)
    
;

метод УстановитьПлатформуLinux(Параметры: СтруктураПараметров, Дистрибутив: СтркутураОписаниеДистрибутива)

    пер МассивМодулей: Массив<Строка> = Параметры.МодулиПлатформы.Заменить(" ", "").Разделить(",")
    пер ТребемыеМодули: Множество<Строка> = новый Множество<Строка>()
    пер Языки: Массив<Строка> = Параметры.Языки.ВНижнийРегистр().Заменить(" ", "").Разделить(",")

    для Модуль из МассивМодулей
        если Модуль.Заменить("64", "") == "all"
            ТребемыеМодули.ДобавитьВсе(["server", "client", "thin", "web"])
        иначе
            ТребемыеМодули.Добавить(Модуль.Заменить("64", ""))
        ;
    ;
    
    если Дистрибутив.ЕдиныйПакетLinux
    
        пер ПараметрыУстановки: Массив<Строка> = ["--mode", "unattended", "--unattendedmodeui", "none", "--installer-language", "en", "--enable-components"]
        пер Компоненты: Массив<Строка> = []
        
        пер ТипыПакетов: Соответствие<Строка, ЧитаемыйМассив<Строка>> = {
            "server": ["server", "server_admin", "additional_admin_functions", "liberica_jre"],
            "client": ["client_full"],
            "thin": ["client_thin"],
            "web": ["ws"]
        }
        
        если Языки.Размер() == 0 и Языки.Добавить("ru");
        Компоненты.ДобавитьВсе(Языки)
        
        для Модуль из ТребемыеМодули
            Компоненты.ДобавитьВсе(ТипыПакетов[Модуль])
        ;
        
        ПараметрыУстановки.Добавить(Строки.Соединить(Компоненты, ","))
        пер Процесс = новый ПроцессОс(Дистрибутив.Путь, ПараметрыУстановки)
        Консоль.Записать(ОбщиеЗапуститьПроцессОС(Процесс, Неопределено, Параметры.ЛимитВремени))
    
    иначе
    
        пер МножествоПакетов: Множество<Строка> = {}
                
        пер ТипОС: ПеречислениеОперационнаяСистема = ОбщиеТипОС(Истина)
        пер ЧастиВерсии: Массив<Строка> = Дистрибутив.Версия.Разделить(".")
        
        Языки.УдалитьВсе(["ru", "en"])
        пер NLS = Языки.Размер() > 0 ? ["", "-nls"] : [""]
    
        пер ЛямбдаПеремножитьСпискиСложением: (ЧитаемыйМассив<Строка>, ЧитаемыйМассив<Строка>)->ЧитаемыйМассив<Строка> = метод(Список1: ЧитаемыйМассив<Строка>, Список2: ЧитаемыйМассив<Строка>) ->
            пер Результат: Массив<Строка> = новый Массив<Строка>()
            если Список2.Размер() == 0
                возврат Список1
            ;
            для Значение1 из Список1
                для Значение2 из Список2
                    Результат.Добавить(Значение1 + Значение2)
                ;
            ;
            возврат новый ЧитаемыйМассив(Результат)
        ;
    
        пер ТипыПакетов: Соответствие<Строка, ЧитаемыйМассив<Строка>> = {
            "server": ЛямбдаПеремножитьСпискиСложением(["common", "server"], NLS),
            "client": ЛямбдаПеремножитьСпискиСложением(["client", "common", "server"], NLS),
            "thin": ЛямбдаПеремножитьСпискиСложением(["thin-client"], NLS),
            "web": ЛямбдаПеремножитьСпискиСложением(["common", "ws"], NLS)
        }
    
        пер НачалоИмениФайла: Строка = "1c-enterprise-" + Дистрибутив.Версия + "-"
        пер НастройкиПоиска : НастройкиПоиска = новый НастройкиПоиска()
        НастройкиПоиска.ИмяСодержит(НачалоИмениФайла)
        НастройкиПоиска.ИсключитьКаталоги(Истина)
        для Файл из Файлы.Найти(Дистрибутив.Путь, НастройкиПоиска)
        
            если (ТипОС == ПеречислениеОперационнаяСистема.LINUX_DEB и Файл.Расширение != "deb")
                или (ТипОС == ПеречислениеОперационнаяСистема.LINUX_RPM и Файл.Расширение != "rpm")
                или Дистрибутив.Архитектура != (Файл.ИмяБезРасширения.Содержит("x86_64", Истина) или Файл.ИмяБезРасширения.Содержит("amd64", Истина) ? 64 : 32)
                продолжить
            ;
    
            пер ТипПакета: Строка = Файл.ИмяБезРасширения
                .Заменить(НачалоИмениФайла, "")
                .Заменить(".x86_64", "").Заменить("_amd64", "")
                .Заменить(".i386", "").Заменить("_i386", "")
                .Заменить("_" + ЧастиВерсии[0] + "." + ЧастиВерсии[1] + "." + ЧастиВерсии[2] + "-" + ЧастиВерсии[3], "")
                .Заменить("-" + ЧастиВерсии[0] + "." + ЧастиВерсии[1] + "." + ЧастиВерсии[2] + "-" + ЧастиВерсии[3], "")

            для Модуль из ТребемыеМодули
                если ТипыПакетов[Модуль].Содержит(ТипПакета) и МножествоПакетов.Добавить(Файл.Путь);
            ;
            
        ;
        
        ЛогИнформация("Install platform")
        пер Установщик: Строка = "dpkg"
        пер ПараметрыУстановки: Массив<Строка> = []

        если ТипОС == ПеречислениеОперационнаяСистема.LINUX_DEB
            Установщик = "dpkg"
            ПараметрыУстановки = ["-i"]
        иначе
            ПараметрыУстановки = ["-Uhv", "--nodeps"]
            Установщик = "rpm"
        ;
        
        ПараметрыУстановки.ДобавитьВсе(МножествоПакетов)
        пер Процесс = новый ПроцессОс(Установщик, ПараметрыУстановки)
        Консоль.Записать(ОбщиеЗапуститьПроцессОС(Процесс, Неопределено, Параметры.ЛимитВремени))
    
    ;


;


///////////////////////////////////////////////////////////////////
// ТОЧКА ВХОДА
///////////////////////////////////////////////////////////////////


метод Скрипт(СоответствиеПараметров: Соответствие<Строка, Строка>): Число

    // Тестовый режим.
    если ОбщиеЗначениеПараметраБулево(СоответствиеПараметров, "test-mode")
        ЛогИнформация("Test mode completed successfully")
        возврат 0
    ;

    ЛогСтарт()

    пер Параметры = ПолучитьПараметры(СоответствиеПараметров)
    
    ОбщиеПроверитьОбязательныеПараметры(Параметры, [
              новый СтруктураПроверкиПараметра("version", Параметры.Версия,  
                    метод() ->
                        
                        пер Результат: Булево = Истина
                        пер ЧастиВерсии: Массив<Строка> = Параметры.Версия.Разделить(".")
                        
                        попытка
                            Результат = (новый Число(ЧастиВерсии[0]) == 8 и (новый Число(ЧастиВерсии[1])) == 3 и ЧастиВерсии[2].ТолькоЦифры() и ЧастиВерсии[3].ТолькоЦифры())
                        поймать Исключение: Исключение
                            Результат = Ложь
                        ;

                        возврат Результат
                        
                    ;
              ),
              
              новый СтруктураПроверкиПараметра("platform-modules", Параметры.МодулиПлатформы,  
                    метод() ->
                        
                        пер Результат: Булево = не Параметры.МодулиПлатформы.Пусто()
                        
                        если Результат
                            пер МассивМодулей: Массив<Строка> = Параметры.МодулиПлатформы.Разделить(",")
                            для Модуль из МассивМодулей
                                если не ["all", "all64", "server", "server64", "client", "client64", "thin", "thin64", "web", "web64"].Содержит(Модуль.ВНижнийРегистр().Сократить())
                                    Результат = Ложь
                                    прервать
                                ;
                            ;
                        ;

                        возврат Результат
                        
                    ;
              ),
              
              новый СтруктураПроверкиПараметра("distr-folder", Параметры.КаталогДистрибутива, () -> (не Параметры.КаталогДистрибутива.Пусто())),
              новый СтруктураПроверкиПараметра("setup-folder", Параметры.КаталогУстановки, () -> (не Параметры.КаталогУстановки.Пусто() или ОбщиеТипОС() == ПеречислениеОперационнаяСистема.LINUX))
        ]
    )

    // Случайная задержка перед выполнением операции
    если Параметры.Задержка > 0
        ОбщиеПауза(Параметры.Задержка, Истина)
    ;

    Параметры.ВремяСтарта = ДатаВремя.Сейчас()

    пер Дистрибутив: СтркутураОписаниеДистрибутива = НайтиДистрибутив(Параметры)

    ОбщиеВремяИстекло(Параметры.ВремяСтарта, Параметры.ЛимитВремени)

    если Дистрибутив.УстановкаКопированием
        
        ЛогИнформация("Install platform via copy")
        
        пер КаталогПриемник: Файл = новый Файл(ОбщиеУбратьПоследнийРазделитель(Параметры.КаталогУстановки))
        
        если КаталогПриемник.Существует() и не КаталогПриемник.ЯвляетсяКаталогом()
            выбросить новый ИсключениеКаталогОказалсяФайлом("Destination path exists and not a directory: " + КаталогПриемник.Путь, КаталогПриемник.Путь)
        иначе если не КаталогПриемник.Существует()
            Файлы.СоздатьКаталог(КаталогПриемник)
        ;
        
        пер НастройкиКопирования = новый НастройкиКопирования()
        НастройкиКопирования.КопироватьАтрибуты(Истина)
        НастройкиКопирования.ПропускатьДочерние(Истина)
        НастройкиКопирования.ПропускатьСуществующие(Ложь)
        НастройкиКопирования.СледоватьСсылкам(Истина)
        
        для ФайлИсточник из Файлы.Найти(Дистрибутив.Путь)
        
            ОбщиеВремяИстекло(Параметры.ВремяСтарта, Параметры.ЛимитВремени)
        
            пер ФайлПриемник = новый Файл(ФайлИсточник.Путь.Заменить(Дистрибутив.Путь, КаталогПриемник.Путь))
            
            если ФайлИсточник.ЯвляетсяКаталогом()
                если не ФайлПриемник.Существует()
                    Файлы.СоздатьКаталог(ФайлПриемник)
                ;
                продолжить
              
            иначе если не ФайлПриемник.Каталог.Существует()
                Файлы.СоздатьКаталог(ФайлПриемник.Каталог)
            ;        
    
            Файлы.Скопировать(ФайлИсточник, ФайлПриемник, НастройкиКопирования)
            
        ;
        
    иначе
    
        если ОбщиеТипОС() == ПеречислениеОперационнаяСистема.WINDOWS
            УстановитьVCRedist(Дистрибутив)
            УстановитьПлатформуWindows(Параметры, Дистрибутив)
        иначе
            УстановитьПлатформуLinux(Параметры, Дистрибутив)
        ;
    
    ;


    ЛогИнформация("Finished", Параметры.ВремяСтарта)
    возврат 0
  
;
